{
    "DataProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n# It would be too exhaustive to error trap elements not existing in dimension for each possible number of dimensions\r\n# If an incorrect source file is specfied for a target cube then the TI will error with standard TI error messages.\r\n# Note: that the assumed file format is standard .cma cube export of Cube, d1, d2, dn, value\r\n# This is equivalent to using the Bedrock.Cube.ExportToFile TI.\r\n\r\n## Increase Record count\r\nnRecordProcessedCount = nRecordProcessedCount + 1;\r\n\r\n### Zero out Target view using filter in the 1st record of the data source, if requested\r\nIf( nRecordProcessedCount = 1 );\r\n  If( pZeroFilter = 2 );\r\n    sRowIsFilter = v2;\r\n    sImportedFilter = v3;\r\n    sImportedDelimDim = v4;\r\n    sImportedElementStartDelim = v5;\r\n    sImportedDelimElem = v6;\r\n    ### Check Filter row\r\n    If(sRowIsFilter @<> 'Filter');\r\n        sMessage = 'Filter row in source file not having the expected format.';\r\n        nErrors = nErrors + 1;\r\n        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n        If( pStrictErrorHandling = 1 );\r\n            ProcessQuit;\r\n        Else;\r\n            ProcessBreak;\r\n        EndIf;\r\n    ENDIF;\r\n    ### Check delimiters are the same when using any mapping. This because filter from the file and mappings form the params will be concatenated / substituted\r\n    If((sElementMapping @<> '' % pDimension @<>'') & (sDelimDim @<> sImportedDelimDim % sElementStartDelim @<> sImportedElementStartDelim % sDelimElem @<> sImportedDelimElem));\r\n        sMessage = 'Error zeroing out target slice corresponding to the filter plus new mapped dimensions: delimiters in source file do not match with the ones in parameters.';\r\n        nErrors = nErrors + 1;\r\n        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n        If( pStrictErrorHandling = 1 );\r\n            ProcessQuit;\r\n        Else;\r\n            ProcessBreak;\r\n        EndIf;\r\n    ENDIF;\r\n\r\n    ### Check filter in source file and validate its dimensions\r\n    sFilter = TRIM( sImportedFilter );\r\n    nChar = 1;\r\n    nCharCount = LONG( sFilter );\r\n    sWord = '';\r\n    sLastDelim = '';\r\n    nIndex = 1;\r\n    # Add a trailing element delimiter so that the last element is picked up\r\n    If( nCharCount > 0 );\r\n      sFilter = sFilter | sDelimElem;\r\n      nCharCount = nCharCount + LONG(sDelimElem);\r\n    EndIf;\r\n\r\n    WHILE (nChar <= nCharCount);\r\n        sChar = SUBST( sFilter, nChar, 1);\r\n\r\n        # Used for delimiters, required for multiple character delimiters\r\n        sDelim = '';\r\n        nAddExtra = 0;\r\n\r\n        # Ignore spaces\r\n        IF (TRIM(sChar) @<> '' );\r\n\r\n          ### Dimension Name ###\r\n\r\n          # If the delimiter is more than 1 character peek ahead the same amount\r\n          # Ignore the first character\r\n          sDelim = sChar;\r\n          nCount = LONG(sElementStartDelim) - 1;\r\n          If( nCount > 0 & nChar + nCount <= nCharCount );\r\n            # Add the extra characters\r\n            sDelim = sDelim | SUBST( sFilter, nChar + 1, nCount);\r\n            # Move to the end of the delimter\r\n            nAddExtra = nCount;\r\n          EndIf;\r\n\r\n          If( sDelim @= sElementStartDelim );\r\n\r\n            sChar = sDelim;\r\n\r\n            If( sLastDelim @<> '' & sLastDelim @<> sDelimDim );\r\n                sMessage = 'The name of a dimension must follow a dimension delimiter (' | sDelimDim | ')';\r\n                nErrors = nErrors + 1;\r\n                LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n            EndIf;\r\n\r\n            sDimension = sWord;\r\n\r\n            If( DimensionExists( sDimension ) = 0 );\r\n                # The dimension does not exist in the model. Cancel process\r\n                sMessage = 'Dimension: ' | sDimension | ' does not exist';\r\n                nErrors = nErrors + 1;\r\n                LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n            EndIf;\r\n\r\n            ### Determine the dimension is a member of the cube ###\r\n            nCount = 1;\r\n            nDimensionIndex = 0;\r\n            While( TabDim( pCube, nCount ) @<> '' );\r\n                sCubeDimName = TabDim( pCube, nCount );\r\n                If( sDimension @= sCubeDimName );\r\n                    nDimensionIndex = nCount;\r\n                EndIf;\r\n                nCount = nCount + 1;\r\n            End;\r\n\r\n            If( nDimensionIndex = 0 );\r\n                # The dimension does not exist in the cube. Cancel process\r\n                sMessage = 'Dimension: ' | sDimension | ' is not a member of: '| pCube | ' cube.';\r\n                nErrors = nErrors + 1;\r\n                LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n            EndIf;\r\n\r\n\r\n\r\n            nIndex = 1;\r\n            sLastDelim = sChar;\r\n            # Clear the word\r\n            sWord = '';\r\n          Else;\r\n\r\n            # Reset extra chars\r\n            nAddExtra = 0;\r\n\r\n            ### Check both both dim delimiter and element delimiter ###\r\n            nIsDelimiter = 0;\r\n\r\n            ## Check dimension delimiter first\r\n            # If the delimiter is more than 1 character peek ahead the same amount\r\n            # Ignore the first character\r\n            sDelim = sChar;\r\n            nCount = LONG(sDelimDim) - 1;\r\n            If( nCount > 0 & nChar + nCount <= nCharCount );\r\n              # Add the extra characters\r\n              sDelim = sDelim | SUBST( sFilter, nChar + 1, nCount);\r\n              # Move to the end of the delimter\r\n              nAddExtra = nCount;\r\n            EndIf;\r\n\r\n            If( sDelim @= sDelimDim );\r\n              nIsDelimiter = 1;\r\n              sChar = sDelim;\r\n            Else;\r\n              # Reset extra chars\r\n              nAddExtra = 0;\r\n\r\n              ## Check element delimiter\r\n\r\n              # If the delimiter is more than 1 character peek ahead the same amount\r\n              # Ignore the first character\r\n              sDelim = sChar;\r\n              nCount = LONG(sDelimElem) - 1;\r\n              If( nCount > 0 & nChar + nCount <= nCharCount );\r\n                # Add the extra characters\r\n                sDelim = sDelim | SUBST( sFilter, nChar + 1, nCount);\r\n                # Move to the end of the delimter\r\n                nAddExtra = nCount;\r\n              EndIf;\r\n\r\n              If( sDelim @= sDelimElem );\r\n                nIsDelimiter = 1;\r\n                sChar = sDelim;\r\n              Else;\r\n                # Reset extra chars\r\n                nAddExtra = 0;\r\n              EndIf;\r\n\r\n            EndIf;\r\n\r\n            If ( nIsDelimiter = 1 );\r\n\r\n              If( sLastDelim @= '' % sLastDelim @= sDelimDim );\r\n                sMessage = 'An element delimiter must follow a dimension name: ' |  sChar | ' (' | NumberToString(nChar) | ')';\r\n                nErrors = nErrors + 1;\r\n                LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n                #ProcessError();\r\n              EndIf;\r\n\r\n              sElement = sWord;\r\n\r\n              If( DimIx( sDimension, sElement ) = 0 );\r\n                  # The element does not exist in the dimension. Cancel process\r\n                  sMessage = 'Element: ' | sElement | ' in dimension ' | sDimension | ' does not exist';\r\n                  nErrors = nErrors + 1;\r\n                  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n                  #ProcessError();\r\n              EndIf;\r\n\r\n              nIndex = nIndex + 1;\r\n              sLastDelim = sChar;\r\n\r\n              # Clear the word\r\n              sWord = '';\r\n            Else;\r\n              sWord = sWord | sChar;\r\n            EndIf;\r\n\r\n          EndIf;\r\n\r\n        EndIf;\r\n\r\n        nChar = nChar + nAddExtra + 1;\r\n    END;\r\n\r\n    ### Check for errors before continuing\r\n    If( nErrors <> 0 );\r\n        If( pStrictErrorHandling = 1 );\r\n            ProcessQuit;\r\n        Else;\r\n            ProcessBreak;\r\n        EndIf;\r\n    EndIf;\r\n\r\n    If( sTargetFilter @= '' );\r\n      sTargetFilter = sImportedFilter;\r\n    Else;\r\n      sTargetFilter = sTargetFilter | sDelimDim | sImportedFilter;\r\n    EndIf;\r\n    ### Determine target dimension substitution in data clear filter\r\n    If( pDimension @<>'');\r\n      If( sTargetFilter @= '' );\r\n        sTargetFilter = pDimension | sElementStartDelim | sTargetElement;\r\n      Else;\r\n        ### Remove spaces from the string, then remove source element from the filter if present\r\n        sTargetFilter = UPPER( sTargetFilter );\r\n        nSPIndex = SCAN( ' ', sTargetFilter );\r\n        While ( nSPIndex <> 0);\r\n          sTargetFilter = DELET( sTargetFilter, nSPIndex, 1 );\r\n          nSPIndex = SCAN( ' ', sTargetFilter );\r\n        End;\r\n        sRemoveString = UPPER( sDelimDim | pDimension | sElementStartDelim | pSrcEle );\r\n        nRemoveIndex = SCAN( sRemoveString, sTargetFilter );\r\n        If( nRemoveIndex <> 0 );\r\n          sTargetFilter = DELET( sTargetFilter, nRemoveIndex, Long(sRemoveString) );\r\n        EndIf;\r\n        sRemoveString2 = UPPER( pDimension | sElementStartDelim | pSrcEle | sDelimDim );\r\n        nRemoveIndex = SCAN( sRemoveString2, sTargetFilter );\r\n        If( nRemoveIndex <> 0 );\r\n          sTargetFilter = DELET( sTargetFilter, nRemoveIndex, Long(sRemoveString2) );\r\n        EndIf;\r\n        sRemoveString3 = UPPER( sDelimDim | pDimension | sElementStartDelim | sSourceElement );\r\n        nRemoveIndex = SCAN( sRemoveString3, sTargetFilter );\r\n        If( nRemoveIndex <> 0 );\r\n          sTargetFilter = DELET( sTargetFilter, nRemoveIndex, Long(sRemoveString3) );\r\n        EndIf;\r\n        sRemoveString4 = UPPER( pDimension | sElementStartDelim | sSourceElement | sDelimDim );\r\n        nRemoveIndex = SCAN( sRemoveString4, sTargetFilter );\r\n        If( nRemoveIndex <> 0 );\r\n          sTargetFilter = DELET( sTargetFilter, nRemoveIndex, Long(sRemoveString4) );\r\n        EndIf;\r\n        ## Add target element to the filter\r\n        sTargetFilter = sTargetFilter | sDelimDim | pDimension | sElementStartDelim | sTargetElement;\r\n      EndIf;\r\n    Endif;\r\n\r\n    nRet = ExecuteProcess('}bedrock.cube.data.clear',\r\n       'pLogOutput', pLogOutput,\r\n       'pStrictErrorHandling', pStrictErrorHandling,\r\n       'pCube', pCube,\r\n       'pView', '',\r\n       'pFilter', sTargetFilter,\r\n       'pFilterParallel', '',\r\n       'pParallelThreads', 0,\r\n       'pDimDelim', sImportedDelimDim,\r\n       'pEleStartDelim', sImportedElementStartDelim,\r\n       'pEleDelim', sImportedDelimElem,\r\n       'pCubeLogging', pCubeLogging,\r\n       'pTemp', 1,\r\n       'pSandbox', pSandbox\r\n      );\r\n\r\n    If(nRet <> 0);\r\n        sMessage = 'Error zeroing out target slice corresponding to the filter.';\r\n        nErrors = nErrors + 1;\r\n        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n        If( pStrictErrorHandling = 1 );\r\n            ProcessQuit;\r\n        Else;\r\n            ProcessBreak;\r\n        EndIf;\r\n    ENDIF;\r\n  ENDIF;\r\n  If( pZeroFilter > 0 );\r\n    ItemSkip;\r\n  ENDIF;\r\nEndif;\r\n\r\n### Determine target dimension SubStitution ###\r\nIf( pDimension @<>'');\r\n\r\n  If(sSourceElement@<>Expand('%v'|numbertostring(nSubstututeDimensionIndex+1)|'%'));\r\n   # leave variable as is\r\n  Else;\r\n\r\n    v2 = If(nSubstututeDimensionIndex = 1, sTargetElement, v2);\r\n    v3 = If(nSubstututeDimensionIndex = 2, sTargetElement, v3);\r\n    v4 = If(nSubstututeDimensionIndex = 3, sTargetElement, v4);\r\n    v5 = If(nSubstututeDimensionIndex = 4, sTargetElement, v5);\r\n    v6 = If(nSubstututeDimensionIndex = 5, sTargetElement, v6);\r\n    v7 = If(nSubstututeDimensionIndex = 6, sTargetElement, v7);\r\n    v8 = If(nSubstututeDimensionIndex = 7, sTargetElement, v8);\r\n    v9 = If(nSubstututeDimensionIndex = 8, sTargetElement, v9);\r\n    v10 = If(nSubstututeDimensionIndex = 9, sTargetElement, v10);\r\n    v11 = If(nSubstututeDimensionIndex = 10, sTargetElement, v11);\r\n    v12 = If(nSubstututeDimensionIndex = 11, sTargetElement, v12);\r\n    v13 = If(nSubstututeDimensionIndex = 12, sTargetElement, v13);\r\n    v14 = If(nSubstututeDimensionIndex = 13, sTargetElement, v14);\r\n    v15 = If(nSubstututeDimensionIndex = 14, sTargetElement, v15);\r\n    v16 = If(nSubstututeDimensionIndex = 15, sTargetElement, v16);\r\n    v17 = If(nSubstututeDimensionIndex = 16, sTargetElement, v17);\r\n    v18 = If(nSubstututeDimensionIndex = 17, sTargetElement, v18);\r\n    v19 = If(nSubstututeDimensionIndex = 18, sTargetElement, v19);\r\n    v20 = If(nSubstututeDimensionIndex = 19, sTargetElement, v20);\r\n    v21 = If(nSubstututeDimensionIndex = 20, sTargetElement, v21);\r\n    v22 = If(nSubstututeDimensionIndex = 21, sTargetElement, v22);\r\n    v23 = If(nSubstututeDimensionIndex = 22, sTargetElement, v23);\r\n    v24 = If(nSubstututeDimensionIndex = 23, sTargetElement, v24);\r\n    v25 = If(nSubstututeDimensionIndex = 24, sTargetElement, v25);\r\n    v26 = If(nSubstututeDimensionIndex = 25, sTargetElement, v26);\r\n    v27 = If(nSubstututeDimensionIndex = 26, sTargetElement, v27);\r\n  EndIf;\r\n\r\nEndif;\r\n\r\n### Determine dimension Mapping SubStitution ###\r\nsV2 =If(nMappedDim1=1,  Expand('%'|sMappedV1|'%'), If(nNewDim1=1, sNewV1,V1));\r\nsV3 =If(nMappedDim2=1,  Expand('%'|sMappedV2|'%'), If(nNewDim2=1, sNewV2,V2));\r\nsV4 =If(nMappedDim3=1,  Expand('%'|sMappedV3|'%'), If(nNewDim3=1, sNewV3,V3));\r\nsV5 =If(nMappedDim4=1,  Expand('%'|sMappedV4|'%'), If(nNewDim4=1, sNewV4,V4));\r\nsV6 =If(nMappedDim5=1,  Expand('%'|sMappedV5|'%'), If(nNewDim5=1, sNewV5,V5));\r\nsV7 =If(nMappedDim6=1,  Expand('%'|sMappedV6|'%'), If(nNewDim6=1, sNewV6,V6));\r\nsV8 =If(nMappedDim7=1,  Expand('%'|sMappedV7|'%'), If(nNewDim7=1, sNewV7,V7));\r\nsV9 =If(nMappedDim8=1,  Expand('%'|sMappedV8|'%'), If(nNewDim8=1, sNewV8,V8));\r\nsV10 =If(nMappedDim9=1,  Expand('%'|sMappedV9|'%'), If(nNewDim9=1, sNewV9,V9));\r\nsV11=If(nMappedDim10=1, Expand('%'|sMappedV10|'%'),If(nNewDim10=1,sNewV10,V10));\r\nsV12=If(nMappedDim11=1, Expand('%'|sMappedV11|'%'),If(nNewDim11=1,sNewV11,V11));\r\nsV13=If(nMappedDim12=1, Expand('%'|sMappedV12|'%'),If(nNewDim12=1,sNewV12,V12));\r\nsV14=If(nMappedDim13=1, Expand('%'|sMappedV13|'%'),If(nNewDim13=1,sNewV13,V13));\r\nsV15=If(nMappedDim14=1, Expand('%'|sMappedV14|'%'),If(nNewDim14=1,sNewV14,V14));\r\nsV16=If(nMappedDim15=1, Expand('%'|sMappedV15|'%'),If(nNewDim15=1,sNewV15,V15));\r\nsV17=If(nMappedDim16=1, Expand('%'|sMappedV16|'%'),If(nNewDim16=1,sNewV16,V16));\r\nsV18=If(nMappedDim17=1, Expand('%'|sMappedV17|'%'),If(nNewDim17=1,sNewV17,V17));\r\nsV19=If(nMappedDim18=1, Expand('%'|sMappedV18|'%'),If(nNewDim18=1,sNewV18,V18));\r\nsV20=If(nMappedDim19=1, Expand('%'|sMappedV19|'%'),If(nNewDim19=1,sNewV19,V19));\r\nsV21=If(nMappedDim20=1, Expand('%'|sMappedV20|'%'),If(nNewDim20=1,sNewV20,V20));\r\nsV22=If(nMappedDim21=1, Expand('%'|sMappedV21|'%'),If(nNewDim21=1,sNewV21,V21));\r\nsV23=If(nMappedDim22=1, Expand('%'|sMappedV22|'%'),If(nNewDim22=1,sNewV22,V22));\r\nsV24=If(nMappedDim23=1, Expand('%'|sMappedV23|'%'),If(nNewDim23=1,sNewV23,V23));\r\nsV25=If(nMappedDim24=1, Expand('%'|sMappedV24|'%'),If(nNewDim24=1,sNewV24,V24));\r\nsV26=If(nMappedDim25=1, Expand('%'|sMappedV25|'%'),If(nNewDim25=1,sNewV25,V25));\r\nsV27=If(nMappedDim26=1, Expand('%'|sMappedV26|'%'),If(nNewDim26=1,sNewV26,V26));\r\nsV28=If(nMappedDim27=1, Expand('%'|sMappedV27|'%'),If(nNewDim27=1,sNewV27,V27));\r\nsV29=If(nMappedDim28=1, Expand('%'|sMappedV28|'%'),V28);\r\n\r\nV1 = V1;\r\nV2 = sV2;\r\nV3 = sV3;\r\nV4 = sV4;\r\nV5 = sV5;\r\nV6 = sV6;\r\nV7 = sV7;\r\nV8 = sV8;\r\nV9 = sV9;\r\nV10= sV10;\r\nV11= sV11;\r\nV12= sV12;\r\nV13= sV13;\r\nV14= sV14;\r\nV15= sV15;\r\nV16= sV16;\r\nV17= sV17;\r\nV18= sV18;\r\nV19= sV19;\r\nV20= sV20;\r\nV21= sV21;\r\nV22= sV22;\r\nV23= sV23;\r\nV24= sV24;\r\nV25= sV25;\r\nV26= sV26;\r\nV27= sV27;\r\nV28= sV28;\r\nV29= sV29;\r\n\r\nIf( pSkipInvalidRecords < 1 );\r\n  ## Do not check for a valid datapoint (any element that doesn't exist will generate error message on CellPut attempt)\r\nElse;\r\n  ## Allow records that do not have a valid datapoint to be skipped.\r\n  If( nDimensionCount >= 2 & (DimIx( sDim1, v2 ) = 0 % DimIx( sDim2, v3 ) = 0 ) );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 3 & DimIx( sDim3, v4 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 4 & DimIx( sDim4, v5 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 5 & DimIx( sDim5, v6 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 6 & DimIx( sDim6, v7 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 7 & DimIx( sDim7, v8 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 8 & DimIx( sDim8, v9 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 9 & DimIx( sDim9, v10 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 10 & DimIx( sDim10, v11 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 11 & DimIx( sDim11, v12 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 12 & DimIx( sDim12, v13 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 13 & DimIx( sDim13, v14 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 14 & DimIx( sDim14, v15 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 15 & DimIx( sDim15, v16 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 16 & DimIx( sDim16, v17 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 17 & DimIx( sDim17, v18 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 18 & DimIx( sDim18, v19 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 19 & DimIx( sDim19, v20 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 20 & DimIx( sDim20, v21 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 21 & DimIx( sDim21, v22 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 22 & DimIx( sDim22, v23 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 23 & DimIx( sDim23, v24 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 24 & DimIx( sDim24, v25 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 25 & DimIx( sDim25, v26 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 26 & DimIx( sDim25, v27 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\n  If( nDimensionCount >= 27 & DimIx( sDim27, v28 ) = 0 );\r\n      ItemSkip;\r\n  EndIf;\r\n\r\nEndIf;\r\n\r\n### Write data from source file to target cube ###\r\n\r\nIf( nDimensionCount = 2 );\r\n    If( CellIsUpdateable( pCube, v2, v3 ) = 1 );\r\n        sElType = DType( sDim2, v3 );\r\n        If( SubSt( sDim2, 1, 19 ) @= '}ElementAttributes_' % SubSt( pCube, 1, 17 ) @= '}ElementSecurity_' );\r\n            sDim = sDim1;\r\n        EndIf;\r\n        If( SubSt( pCube, 1, 17 ) @= '}ElementSecurity_' );\r\n            v4 = If( v4 @= '', 'NONE', v4 );\r\n            ElementSecurityPut( v4, sDim, v2, v3 );\r\n        ElseIf( SubSt( sDim2, 1, 19 ) @= '}ElementAttributes_' );\r\n            If( sElType @= 'AS');\r\n                AttrPutS( v4, sDim, v2, v3 );\r\n            ElseIf( sElType @= 'AA');\r\n                AttrPutS( v4, sDim, v2, v3, 1 );\r\n            ElseIf( sElType @= 'AN');\r\n                AttrPutN( StringToNumberEx(v4, sDecimalSeparator, sThousandSeparator), sDim, v2, v3 );\r\n            EndIf;\r\n        ElseIf( SubSt( sElType, 1, 1) @= 'A' );\r\n            If( sElType @= 'AA' % sElType @= 'AS' );\r\n                If( pCube @= '}ChoreAttributes' );\r\n                    ChoreAttrPutS( v4, v2, v3 );\r\n                ElseIf( pCube @= '}CubeAttributes' );\r\n                    CubeAttrPutS( v4, v2, v3 );\r\n                ElseIf( pCube @= '}DimensionAttributes' );\r\n                    DimensionAttrPutS( v4, v2, v3 );\r\n                ElseIf( pCube @= '}ProcessAttributes' );\r\n                    ProcessAttrPutS( v4, v2, v3 );\r\n                EndIf;\r\n            ElseIf( sElType @= 'AN');\r\n                If( pCube @= '}ChoreAttributes' );\r\n                    ChoreAttrPutN( StringToNumberEx(v4, sDecimalSeparator, sThousandSeparator), v2, v3 );\r\n                ElseIf( pCube @= '}CubeAttributes' );\r\n                    CubeAttrPutN( StringToNumberEx(v4, sDecimalSeparator, sThousandSeparator), v2, v3 );\r\n                ElseIf( pCube @= '}DimensionAttributes' );\r\n                    DimensionAttrPutN( StringToNumberEx(v4, sDecimalSeparator, sThousandSeparator), v2, v3 );\r\n                ElseIf( pCube @= '}ProcessAttributes' );\r\n                    ProcessAttrPutN( StringToNumberEx(v4, sDecimalSeparator, sThousandSeparator), v2, v3 );\r\n                EndIf;\r\n            EndIf;\r\n        ElseIf( sElType @= 'S');\r\n            CellPutS( v4, pCube, v2, v3 );\r\n        ElseIf( sElType @= 'N' & DimIx( sDim2, v3 ) <> 0 );\r\n            If(pCumulate = 1);\r\n                nObal = CellGetN( pCube, v2, v3 );\r\n                nCbal = nObal + StringToNumberEx(v4, sDecimalSeparator, sThousandSeparator);\r\n            ELSE;\r\n                nCbal = StringToNumberEx(v4, sDecimalSeparator, sThousandSeparator);\r\n            Endif;\r\n            CellPutN( nCbal, pCube, v2, v3 );\r\n        Else;\r\n            If( pStrictErrorHandling = 1 );\r\n                sErr = Expand('Unhandled element type %sElType% of element %v3% in dimension %sDim2%');\r\n                ItemReject( sErr );\r\n            EndIf;\r\n        EndIf;\r\n    EndIf;\r\nElseIf( nDimensionCount = 3 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4 ) = 1 );\r\n        sElType = DType( sDim3, v4 );\r\n        If( SubSt( sElType, 1, 1 ) @= 'A' );\r\n            If( SubSt( pCube, 1, 28 ) @= '}LocalizedElementAttributes_' );\r\n                sDim = sDim1;\r\n                If( sElType @= 'AS' );\r\n                    AttrPutS(v5, sDim, v2, v4, v3);\r\n                ElseIf( sElType @= 'AA' );\r\n                    AttrPutS(v5, sDim, v2, v4, v3, 1);\r\n                ElseIf( sElType @= 'AN' );\r\n                    AttrPutN(StringToNumberEx(v5, sDecimalSeparator, sThousandSeparator), sDim, v2, v4, v3);\r\n                EndIf;\r\n            ElseIf( pCube @= '}LocalizedChoreAttributes' );\r\n                If( sElType @= 'AS' % sElType @= 'AA' );\r\n                    ChoreAttrPutS(v5, v2, v4, v3);\r\n                ElseIf( sElType @= 'AN' );\r\n                    ChoreAttrPutN(StringToNumberEx(v5, sDecimalSeparator, sThousandSeparator), v2, v4, v3);\r\n                EndIf;\r\n            ElseIf( pCube @= '}LocalizedCubeAttributes' );\r\n                If( sElType @= 'AS' % sElType @= 'AA' );\r\n                    CubeAttrPutS(v5, v2, v4, v3);\r\n                ElseIf( sElType @= 'AN' );\r\n                    CubeAttrPutN(StringToNumberEx(v5, sDecimalSeparator, sThousandSeparator), v2, v4, v3);\r\n                EndIf;\r\n            ElseIf( pCube @= '}LocalizedDimensionAttributes' );\r\n                If( sElType @= 'AS' % sElType @= 'AA' );\r\n                    DimensionAttrPutS(v5, v2, v4, v3);\r\n                ElseIf( sElType @= 'AN' );\r\n                    DimensionAttrPutN(StringToNumberEx(v5, sDecimalSeparator, sThousandSeparator), v2, v4, v3);\r\n                EndIf;\r\n            ElseIf( pCube @= '}LocalizedProcessAttributes' );\r\n                If( sElType @= 'AS' % sElType @= 'AA' );\r\n                    ProcessAttrPutS(v5, v2, v4, v3);\r\n                ElseIf( sElType @= 'AN' );\r\n                    ProcessAttrPutN(StringToNumberEx(v5, sDecimalSeparator, sThousandSeparator), v2, v4, v3);\r\n                EndIf;\r\n            EndIf;\r\n        ElseIf( sElType @= 'N' );\r\n            If(pCumulate = 1);\r\n                nObal = CellGetN( pCube, v2, v3, v4 );\r\n                nCbal = nObal + StringToNumberEx(v5, sDecimalSeparator, sThousandSeparator);\r\n            ELSE;\r\n                nCbal = StringToNumberEx(v5, sDecimalSeparator, sThousandSeparator);\r\n            Endif;\r\n            CellPutN( nCbal, pCube, v2, v3, v4 );\r\n        ElseIf( sElType @= 'S' );\r\n            CellPutS( v5, pCube, v2, v3, v4 );\r\n        Else;\r\n            If( pStrictErrorHandling = 1 );\r\n                sErr = Expand('Unhandled element type %sElType% of element %v4% in dimension %sDim3%');\r\n                ItemReject( sErr );\r\n            EndIf;\r\n        EndIf;\r\n    EndIf;\r\nElseIf( nDimensionCount = 4 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5 ) = 1 );\r\n        sElType = DType( sDim4, v5 );\r\n        If( sElType @= 'N' );\r\n            If(pCumulate = 1);\r\n                nObal = CellGetN( pCube, v2, v3, v4, v5 );\r\n                nCbal = nObal + StringToNumberEx(v6, sDecimalSeparator, sThousandSeparator);\r\n            ELSE;\r\n                nCbal = StringToNumberEx(v6, sDecimalSeparator, sThousandSeparator);\r\n            Endif;\r\n            CellPutN( nCbal, pCube, v2, v3, v4, v5 );\r\n        ElseIf( sElType @= 'S' );\r\n            CellPutS( v6, pCube, v2, v3, v4, v5 );\r\n        Else;\r\n            If( pStrictErrorHandling = 1 );\r\n                sErr = Expand('Unhandled element type %sElType% of element %v5% in dimension %sDim4%');\r\n                ItemReject( sErr );\r\n            EndIf;\r\n        EndIf;\r\n    EndIf;\r\nElseIf( nDimensionCount = 5 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6 ) = 1 );\r\n      sElType = DType( sDim5, v6 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6 );\r\n          nCbal = nObal + StringToNumberEx(v7, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v7, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v7, pCube, v2, v3, v4, v5, v6 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v6% in dimension %sDim5%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 6 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7 ) = 1 );\r\n      sElType = DType( sDim6, v7 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7 );\r\n          nCbal = nObal + StringToNumberEx(v8, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v8, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v8, pCube, v2, v3, v4, v5, v6, v7 );\r\n      EndIf;\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v7% in dimension %sDim6%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 7 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8 ) = 1 );\r\n      sElType = DType( sDim7, v8 );\r\n      If( sElType @= 'N' );\r\n        If( pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8 );\r\n          nCbal = nObal + StringToNumberEx(v9, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v9, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v9, pCube, v2, v3, v4, v5, v6, v7, v8 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v8% in dimension %sDim7%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 8 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9 ) = 1 );\r\n      sElType = DType( sDim8, v9 );\r\n      If( sElType @= 'N' );\r\n        If( pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9 );\r\n          nCbal = nObal + StringToNumberEx(v10, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v10, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v10, pCube, v2, v3, v4, v5, v6, v7, v8, v9 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v9% in dimension %sDim8%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 9 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10 ) = 1 );\r\n      sElType = DType( sDim9, v10 );\r\n      If( sElType @= 'N' );\r\n        If( pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10 );\r\n          nCbal = nObal + StringToNumberEx(v11, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v11, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v11, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v10% in dimension %sDim9%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 10 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 ) = 1 );\r\n      sElType = DType( sDim10, v11 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );\r\n          nCbal = nObal + StringToNumberEx(v12, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v12, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v12, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v11% in dimension %sDim10%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 11 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 ) = 1 );\r\n      sElType = DType( sDim11, v12 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );\r\n          nCbal = nObal + StringToNumberEx(v13, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v13, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v13, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v12% in dimension %sDim11%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 12 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 ) = 1 );\r\n      sElType = DType( sDim12, v13 );\r\n      If( sElType @= 'N' );\r\n        If( pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );\r\n          nCbal = nObal + StringToNumberEx(v14, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v14, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v14, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v13% in dimension %sDim12%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 13 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 ) = 1 );\r\n      sElType = DType( sDim13, v14 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );\r\n          nCbal = nObal + StringToNumberEx(v15, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v15, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v15, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v14% in dimension %sDim13%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 14 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 ) = 1 );\r\n      sElType = DType( sDim14, v15 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );\r\n          nCbal = nObal + StringToNumberEx(v16, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v16, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v16, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v15% in dimension %sDim14%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 15 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 ) = 1 );\r\n      sElType = DType( sDim15, v16 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );\r\n          nCbal = nObal + StringToNumberEx(v17, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v17, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v17, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v16% in dimension %sDim15%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 16 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 ) = 1 );\r\n      sElType = DType( sDim16, v17 );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );\r\n          nCbal = nObal + StringToNumberEx(v18, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v18, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n      If( sElType @= 'N' );\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v18, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v17% in dimension %sDim16%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 17 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 ) = 1 );\r\n      sElType = DType( sDim17, v18 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );\r\n          nCbal = nObal + StringToNumberEx(v19, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v19, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v19, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v18% in dimension %sDim17%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 18 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 ) = 1 );\r\n      sElType = DType( sDim18, v19 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );\r\n          nCbal = nObal + StringToNumberEx(v20, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v20, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v20, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v19% in dimension %sDim18%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 19 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 ) = 1 );\r\n      sElType = DType( sDim19, v20 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );\r\n          nCbal = nObal + StringToNumberEx(v21, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v21, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v21, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v20% in dimension %sDim19%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 20 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 ) = 1 );\r\n      sElType = DType( sDim20, v21 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );\r\n          nCbal = nObal + StringToNumberEx(v22, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v22, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v22, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v21% in dimension %sDim20%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 21 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 ) = 1 );\r\n      sElType = DType( sDim21, v22 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );\r\n          nCbal = nObal + StringToNumberEx(v23, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v23, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v23, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v22% in dimension %sDim21%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 22 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 ) = 1 );\r\n      sElType = DType( sDim22, v23 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 );\r\n          nCbal = nObal + StringToNumberEx(v24, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v24, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v24, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v23% in dimension %sDim22%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 23 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23, v24 ) = 1 );\r\n      sElType = DType( sDim23, v24 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n            v23, v24 );\r\n          nCbal = nObal + StringToNumberEx(v25, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v25, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v25, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v24% in dimension %sDim23%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 24 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n      v23, v24, v25 ) = 1 );\r\n      sElType = DType( sDim24, v25 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n            v23, v24, v25 );\r\n          nCbal = nObal + StringToNumberEx(v26, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v26, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v26, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v25% in dimension %sDim24%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 25 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26 ) = 1 );\r\n      sElType = DType( sDim25, v26 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26 );\r\n          nCbal = nObal + StringToNumberEx(v27, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v27, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v27, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v26% in dimension %sDim25%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\nElseIf( nDimensionCount = 26 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27 ) = 1 );\r\n      sElType = DType( sDim26, v27 );\r\n      If( sElType @= 'N' );\r\n        If( pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27 );\r\n          nCbal = nObal + StringToNumberEx(v28, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v28, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v28, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v27% in dimension %sDim26%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\nElseIf( nDimensionCount = 27 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28 ) = 1 );\r\n      sElType = DType( sDim27, v28 );\r\n      If( sElType @= 'N' );\r\n        If(pCumulate = 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28 );\r\n          nCbal = nObal + StringToNumberEx(v29, sDecimalSeparator, sThousandSeparator);\r\n        ELSE;\r\n          nCbal = StringToNumberEx(v29, sDecimalSeparator, sThousandSeparator);\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v29, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28 );\r\n      Else;\r\n        If( pStrictErrorHandling = 1 );\r\n          sErr = Expand('Unhandled element type %sElType% of element %v28% in dimension %sDim27%');\r\n          ItemReject( sErr );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n\r\n\r\n  EndIf;\r\n\r\n## Increase Record count\r\nnRecordPostedCount = nRecordPostedCount + 1;\r\n### End Data ###",
    "DataSource": {
        "Type": "ASCII",
        "asciiDecimalSeparator": ".",
        "asciiDelimiterChar": ",",
        "asciiDelimiterType": "Character",
        "asciiHeaderRecords": 2,
        "asciiQuoteCharacter": "\"",
        "asciiThousandSeparator": ",",
        "dataSourceNameForClient": "C:\\TM1\\Bedrock\\Data\\Bedrock.Z.Cube.Placeholder.csv",
        "dataSourceNameForServer": "C:\\TM1\\Bedrock\\Data\\Bedrock.Z.Cube.Placeholder.csv"
    },
    "EpilogProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Cube Logging\r\nIf ( pCubeLogging <= 1 );\r\n  CubeSetLogChanges( pCube, If(sCubeLogging@='YES',1,0) );\r\nEndIf;\r\n\r\n### Delete source file (only if no errors) ###\r\nIf( nErrors = 0 & pFileDelete = 1 );\r\n    ASCIIDelete(sFile);\r\nEndIf;\r\n\r\n### If errors occurred terminate process with a major error status ###\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 major error and consequently aborted. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% aborted. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nEndIf;\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully imported data from file %sFile%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.cube.data.import",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pCube",
            "Prompt": "REQUIRED: Target Cube",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pSrcDir",
            "Prompt": "OPTIONAL: Source Directory (will default to error log path)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pSrcFile",
            "Prompt": "OPTIONAL: Source File (will default to pCube_Export.csv )",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDim",
            "Prompt": "OPTIONAL: Dimension",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pSrcEle",
            "Prompt": "OPTIONAL: Source Element ( Only required if a Dimension is used.)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pTgtEle",
            "Prompt": "OPTIONAL: Target Element (Only required if Dimension is used.)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pTitleRows",
            "Prompt": "REQUIRED: Number of Title Rows to Skip",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pDelim",
            "Prompt": "REQUIRED: AsciiOutput delimiter character (Default=comma 2 or 3 digits = ASCII code)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pQuote",
            "Prompt": "REQUIRED: Quote (Accepts empty quote 2 or 3 digits = ASCII code)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDecimalSeparator",
            "Prompt": "OPTIONAL: Decimal separator for conversion of number to string and string to number (default = '.' exactly 3 digits = ASCII code)",
            "Type": "String",
            "Value": "."
        },
        {
            "Name": "pThousandSeparator",
            "Prompt": "OPTIONAL: Thousand separator for conversion of number to string and string to number (default = '' exactly 3 digits = ASCII code)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pCumulate",
            "Prompt": "REQUIRED: Accumulate Amounts (0 = Overwrite values 1 = Accumulate values)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pCubeLogging",
            "Prompt": "Required: Cube Logging (0 = No transaction logging 1 = Logging of transactions 2 = Ignore Cube Logging - No Action Taken)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pSandbox",
            "Prompt": "OPTIONAL: To use sandbox not base data enter the sandbox name (invalid name will result in process error)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pZeroFilter",
            "Prompt": "OPTIONAL: Source file includes Zero out filter (0=No filter line in source file 1=Ignore filter line 2=Perform ZeroOut using filter line)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pMappingToNewDims",
            "Prompt": "REQUIRED IF TARGET HAS DIMS NOT IN SOURCE: DimX\u00a6InputElementForDimX & DimY\u00a6InputElementForDimY (specify an N level element for each new dim)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDimDelim",
            "Prompt": "OPTIONAL. Delimiter for start of Dimension/Element set",
            "Type": "String",
            "Value": "&"
        },
        {
            "Name": "pEleStartDelim",
            "Prompt": "OPTIONAL: Delimiter for start of element list",
            "Type": "String",
            "Value": "\u00a6"
        },
        {
            "Name": "pEleDelim",
            "Prompt": "OPTIONAL: Delimiter between elements",
            "Type": "String",
            "Value": "+"
        },
        {
            "Name": "pCharacterSet",
            "Prompt": "OPTIONAL: The output character set (defaults to TM1CS_UTF8 if blank)",
            "Type": "String",
            "Value": "TM1CS_UTF8"
        },
        {
            "Name": "pFileDelete",
            "Prompt": "OPTIONAL: Delete the source file on conclusion of import (Boolean 1/0 default = 0)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pSkipInvalidRecords",
            "Prompt": "OPTIONAL: Skip records with invalid elements rather than creating error log",
            "Type": "Numeric",
            "Value": "0"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.cube.data.import', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pCube', '', 'pSrcDir', '', 'pSrcFile', '',\r\n    \t'pDim', '', 'pSrcEle', '', 'pTgtEle', '',\r\n    \t'pTitleRows', 1, 'pDelim', ',', 'pQuote', '\"', 'pDecimalSeparator', '.', 'pThousandSeparator', ',',\r\n    \t'pCumulate', 0, 'pCubeLogging', 0, 'pSandbox', pSandbox, 'pZeroFilter', 0,\r\n    \t'pMappingToNewDims','', 'pDimDelim', '&', 'pEleStartDelim', '\u00a6', 'pEleDelim', '+', 'pFileDelete', 0, 'pSkipInvalidRecords', 0\r\n    );\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process will load a csv text file to the target cube.\r\n\r\n# Use case: Intended for development/prototyping or in Production environment.\r\n#1/ Import data from another TM1 model.\r\n#2/ To eliminate possibility of locking it is sometimes better to export and import when needing to copy data from one cube to another.\r\n\r\n# Note:\r\n# Naturally, a valid target cube name (pCube) is mandatory otherwise the process will abort.\r\n# Element mapping for new dimensions (pMappingToNewDims ) is also required when the target cube has more dimensions than the source, otherwise the process will abort.\r\n# The default input path is the same as the error file path if not specified.\r\n# If the file name is left blank, the process will look for a file called pCube_Export.csv.\r\n\r\n# Format:\r\n# The assumed file format is as per standard CMA export:\r\n# - v1 specIfies cube name, subsequent fields specify cube address ( individual element names ).\r\n# - vN specIfies cell data value to load. With provision for files with header rows.\r\n# Format of filter row for Zero out:\r\n# - v1 specifies source cube name\r\n# - v2 must be equal to \"Filter\".\r\n# - v3 specifies the filter to be used to zero out. Please note if target cube has additional dimensions this is the final filter used if pMappingToNewDims is not speficied. All the elements in additional dimensions will be cleaned\r\n# - v4 specifies the dimension delimiter used in filter\r\n# - v5 specifies the element start delimiter used in filter\r\n# - v6 specifies the element delimiter used in filter\r\n# Note about the Zero out:\r\n# if pMappingToNewDims parameter is specified, it will be concatenated to the filter in the file to restict the cube slice to be zeroed out. Similarly, if pDim is specified the source element is substituted with the targed one, sould it be in the filter string\r\n# in both cases the delimiters in the source file must match the delimiters passed in parameters of this process.\r\n#EndRegion @DOC\r\n\r\n### Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName     = GetProcessName();\r\ncUserName         = TM1User();\r\ncTimeStamp        = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt        = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub          = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pSrcDir:%pSrcDir%, pSrcFile:%pSrcFile%, pCube:%pCube%, pDim:%pDim%, pSrcEle:%pSrcEle%, pTgtEle:%pTgtEle%, pTitleRows:%pTitleRows%, pDelim:%pDelim%, pQuote:%pQuote%, pCumulate:%pCumulate%, pCubeLogging:%pCubeLogging%, pSandbox:%pSandbox%, pZeroFilter:%pZeroFilter%, pMappingToNewDims:%pMappingToNewDims%, pDimDelim:%pDimDelim%, pEleStartDelim:%pEleStartDelim%, pEleDelim:%pEleDelim%.';\r\ncMinLenASCIICode = 2;\r\ncMaxLenASCIICode = 3;\r\n\r\npDelimiter        = TRIM(pDelim);\r\nsDelimDim           = TRIM(pDimDelim);\r\nsElementStartDelim  = TRIM(pElEStartDelim);\r\nsDelimElem          = TRIM(pEleDelim);\r\npDecimalSeparator   = TRIM(pDecimalSeparator);\r\npThousandSeparator  = TRIM(pThousandSeparator);\r\n\r\n## LogOutput parameters\r\nIf( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\nnRecordProcessedCount   = 0;\r\nnRecordPostedCount      = 0;\r\nnErrors                 = 0;\r\n\r\n\r\n### Validate Parameters ###\r\npSourceDir    = TRIM(pSrcDir);\r\npSourceFile   = TRIM(pSrcFile);\r\n\r\n## check operating system\r\nIf( SubSt( GetProcessErrorFileDirectory, 2, 1 ) @= ':' );\r\n  sOS = 'Windows';\r\n  sOSDelim = '\\';\r\nElseIf( Scan( '/', GetProcessErrorFileDirectory ) > 0 );\r\n  sOS = 'Linux';\r\n  sOSDelim = '/';\r\nElse;\r\n  sOS = 'Windows';\r\n  sOSDelim = '\\';\r\nEndIf;\r\n\r\n# Validate source directory\r\nIf(Trim( pSourceDir ) @= '' );\r\n    pSourceDir = GetProcessErrorFileDirectory;\r\nEndIf;\r\n\r\nIf( SubSt( pSourceDir, Long( pSourceDir ), 1 ) @= sOSDelim );\r\n  pSourceDir = SubSt( pSourceDir, 1, Long( pSourceDir ) - 1 );\r\nEndIf;\r\n\r\nIf( FileExists( pSourceDir ) = 0 );\r\n  sMessage = 'Invalid source directory specified: folder does not exist.';\r\n  nErrors = nErrors + 1;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIf( pSourceFile @= '' );\r\n    pSourceFile = Expand('%pCube%_Export.csv');\r\nEndIf;\r\n\r\nsFile = pSourceDir | sOSDelim | pSourceFile;\r\n# Validate source file\r\nIf( FileExists( sFile ) = 0 );\r\n  sMessage = 'Invalid source file specified: file does not exist in directory:' | sFile;\r\n  nErrors = nErrors + 1;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Automatic file deletion\r\nIf( pFileDelete <> 1 );\r\n    pFileDelete = 0;\r\nEndIf;\r\n\r\n# Skip invalid records\r\nIf( pSkipInvalidRecords <> 1 );\r\n    pSkipInvalidRecords = 0;\r\nEndIf;\r\n\r\n## Validate cube\r\nIf( Trim( pCube ) @= '' );\r\n  sMessage = 'No target cube specified.';\r\n  nErrors = nErrors + 1;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIf( CubeExists( pCube ) = 0 );\r\n  sMessage = 'Invalid target cube specified: ' | pCube;\r\n  nErrors = nErrors + 1;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate file delimiter & quote character\r\nIf( pDelimiter @= '' );\r\n    pDelimiter = ',';\r\nElse;\r\n    # If length of pDelimiter is between 2 and 3 chars and each of them is decimal digit, then the pDelimiter is entered as ASCII code\r\n    If ( LONG(pDelimiter) <= cMaxLenASCIICode & LONG(pDelimiter) >= cMinLenASCIICode  );\r\n      nValid = 1;\r\n      nChar = 1;\r\n      While ( nChar <= LONG(pDelimiter) );\r\n        If( CODE( pDelimiter, nChar ) < CODE( '0', 1 ) % CODE( pDelimiter, nChar ) > CODE( '9', 1 ) );\r\n          nValid = 0;\r\n          Break;\r\n        EndIf;\r\n        nChar = nChar + 1;\r\n      End;\r\n      If ( nValid<>0 );\r\n        pDelimiter=CHAR(StringToNumber( pDelimiter ));\r\n      EndIf;\r\n    EndIf;\r\nEndIf;\r\n\r\nIf( pQuote @= '' );\r\n    ## Use no quote character\r\nElse;\r\n    # If length of pQuote is between 2 and 3 chars and each of them is decimal digit, then the pQuote is entered as ASCII code\r\n    If ( LONG(pQuote) <= cMaxLenASCIICode & LONG(pQuote) >= cMinLenASCIICode);\r\n      nValid = 1;\r\n      nChar = 1;\r\n      While ( nChar <= LONG(pQuote) );\r\n        If( CODE( pQuote, nChar ) < CODE( '0', 1 ) % CODE( pQuote, nChar ) > CODE( '9', 1 ) );\r\n          nValid = 0;\r\n          Break;\r\n        EndIf;\r\n        nChar = nChar + 1;\r\n      End;\r\n      If ( nValid<>0 );\r\n        pQuote=CHAR(StringToNumber( pQuote ));\r\n      EndIf;\r\n    EndIf;\r\nEndIf;\r\n\r\nIf ( LONG(pDecimalSeparator) <= cMaxLenASCIICode & LONG(pDecimalSeparator) >= cMinLenASCIICode );\r\n  nValid = 0;\r\n  nChar = 1;\r\n  While ( nChar <= LONG(pDecimalSeparator) );\r\n    If( CODE( pDecimalSeparator, nChar ) >= CODE( '0', 1 ) & CODE( pDecimalSeparator, nChar ) <= CODE( '9', 1 ) );\r\n      nValid = 1;\r\n    Else;\r\n      nValid = 0;\r\n      Break;\r\n    EndIf;\r\n    nChar = nChar + 1;\r\n  End;\r\n  If ( nValid<>0 );\r\n    pDecimalSeparator = CHAR(StringToNumber( pDecimalSeparator ));\r\n  Else;\r\n    pDecimalSeparator = SubSt( Trim( pDecimalSeparator ), 1, 1 );\r\n  EndIf;\r\nEndIf;\r\nsDecimalSeparator = pDecimalSeparator;\r\n\r\nIf ( LONG(pThousandSeparator) <= cMaxLenASCIICode & LONG(pThousandSeparator) >= cMinLenASCIICode );\r\n  nValid = 0;\r\n  nChar = 1;\r\n  While ( nChar <= LONG(pThousandSeparator) );\r\n    If( CODE( pThousandSeparator, nChar ) >= CODE( '0', 1 ) & CODE( pThousandSeparator, nChar ) <= CODE( '9', 1 ) );\r\n      nValid = 1;\r\n    Else;\r\n      nValid = 0;\r\n      Break;\r\n    EndIf;\r\n    nChar = nChar + 1;\r\n  End;\r\n  If ( nValid<>0 );\r\n    pThousandSeparator = CHAR(StringToNumber( pThousandSeparator ));\r\n  Else;\r\n    pThousandSeparator = SubSt( Trim( pThousandSeparator ), 1, 1 );\r\n  EndIf;\r\nEndIf;\r\nsThousandSeparator = pThousandSeparator;\r\n\r\n# Validate Sandbox\r\nIf( TRIM( pSandbox ) @<> '' );\r\n    If( ServerSandboxExists( pSandbox ) = 0 );\r\n        SetUseActiveSandboxProperty( 0 );\r\n        nErrors = nErrors + 1;\r\n        sMessage = Expand('Sandbox %pSandbox% is invalid for the current user.');\r\n        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    Else;\r\n        ServerActiveSandboxSet( pSandbox );\r\n        SetUseActiveSandboxProperty( 1 );\r\n    EndIf;\r\nElse;\r\n    SetUseActiveSandboxProperty( 0 );\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n## Validate Dimension\r\npDimension      = TRIM( pDim);\r\npSourceElement  = TRIM(pSrcEle);\r\npTargetElement  = TRIM(pTgtEle);\r\n\r\nIf( pDimension @<> '');\r\n\r\n  If( DimensionExists( pDimension ) = 0 );\r\n    sMessage = 'Invalid dimension specified: ' | pDimension;\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n  EndIf;\r\n\r\n  # Validate Source Element\r\n  If( pSourceElement @= '' );\r\n    sMessage = 'Error: The Source Element parameter is blank.';\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n  EndIf;\r\n\r\n  If( DimIx( pDimension, pSourceElement ) = 0 );\r\n    sMessage = 'Invalid source element, ' | pSourceElement | ' specified for ' | pDimension | ' dimension.';\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n  EndIf;\r\n  sSourceElement = DimensionElementPrincipalName( pDimension, pSourceElement);\r\n\r\n  # Validate Target Element\r\n  If( pTargetElement @= '' );\r\n    sMessage = 'Error: The Target Element parameter is blank.';\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n  ElseIf( DimIx( pDimension, pTargetElement ) = 0 );\r\n    sMessage = 'Invalid target element, ' | pTargetElement | ' specified for ' | pDimension | ' dimension.';\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n  EndIf;\r\n  sTargetElement = DimensionElementPrincipalName( pDimension, pTargetElement);\r\n\r\nENDIF;\r\n\r\n## Validate delimiter\r\n\r\nIf( pDelimiter @= '' );\r\n  sMessage = 'Error: The file delimiter parameter is blank.';\r\n  nErrors = nErrors + 1;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIf( Long( pDelimiter ) > 1 );\r\n  sMessage = 'Invalid delimiter specified: ' | pDelimiter | ' field delimiter must be single character or 2-3 symbols number representing ASCII code.';\r\n  nErrors = nErrors + 1;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n## Validate quote character\r\nIf( Long( pQuote ) > 1 );\r\n  sMessage = 'Invalid string qualIfier: ' | pQuote | ' quote character must be single character or empty string or 2-3 symbols number representing ASCII code.';\r\n  nErrors = nErrors + 1;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Determine number of dims in target cube ###\r\nnCount = 1;\r\nnSubstututeDimensionIndex = 0;\r\nWhile(\r\nTabDim( pCube, nCount ) @<> '' );\r\n  sDimension = TabDim( pCube, nCount );\r\n  If( sDimension @= pDimension );\r\n    nSubstututeDimensionIndex = nCount;\r\n  EndIf;\r\n  nCount = nCount + 1;\r\nEnd;\r\nnDimensionCount = nCount - 1;\r\n\r\n## Validate the dimension is part of the cube.\r\nIf( pDimension @= '');\r\n  ## CONTINUE;\r\nELSEIf( nSubstututeDimensionIndex = 0 );\r\n    sMessage = 'Specified dimension: ' | pDimension | ' is not a component of the cube: ' | pCube;\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nENDIF;\r\n\r\n        ## Default filter delimiters\r\n        If( pDimDelim     @= '' );\r\n            pDimDelim     = '&';\r\n        EndIf;\r\n        If( pEleStartDelim@= '' );\r\n            pEleStartDelim= '\u00a6';\r\n        EndIf;\r\n        If( pEleDelim     @= '' );\r\n            pEleDelim     = '+';\r\n        EndIf;\r\n\r\n\r\nIf( nDimensionCount > 27 );\r\n  sMessage = 'Cube has too many dimensions: ' | pCube | ' max 27 dimensions.';\r\n  nErrors = nErrors + 1;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Determine dimensions in target cube, we need to know this to test cell type before loading ###\r\nsDim1  = TabDim( pCube, 1 );\r\nsDim2  = TabDim( pCube, 2 );\r\nsDim3  = TabDim( pCube, 3 );\r\nsDim4  = TabDim( pCube, 4 );\r\nsDim5  = TabDim( pCube, 5 );\r\nsDim6  = TabDim( pCube, 6 );\r\nsDim7  = TabDim( pCube, 7 );\r\nsDim8  = TabDim( pCube, 8 );\r\nsDim9  = TabDim( pCube, 9 );\r\nsDim10 = TabDim( pCube, 10 );\r\nsDim11 = TabDim( pCube, 11 );\r\nsDim12 = TabDim( pCube, 12 );\r\nsDim13 = TabDim( pCube, 13 );\r\nsDim14 = TabDim( pCube, 14 );\r\nsDim15 = TabDim( pCube, 15 );\r\nsDim16 = TabDim( pCube, 16 );\r\nsDim17 = TabDim( pCube, 17 );\r\nsDim18 = TabDim( pCube, 18 );\r\nsDim19 = TabDim( pCube, 19 );\r\nsDim20 = TabDim( pCube, 20 );\r\nsDim21 = TabDim( pCube, 21 );\r\nsDim22 = TabDim( pCube, 22 );\r\nsDim23 = TabDim( pCube, 23 );\r\nsDim24 = TabDim( pCube, 24 );\r\nsDim25 = TabDim( pCube, 25 );\r\nsDim26 = TabDim( pCube, 26 );\r\nsDim27 = TabDim( pCube, 27 );\r\n\r\n### Placeholders for mappped dimensions and for new dimensions\r\n\r\nnMappedDim1 = 0;\tsMappedV1 = '';\t\tnNewDim1 = 0;\t  sNewV1 = '';\r\nnMappedDim2 = 0;\tsMappedV2 = '';\t\tnNewDim2 = 0;\t  sNewV2 = '';\r\nnMappedDim3 = 0;\tsMappedV3 = '';\t\tnNewDim3 = 0;\t  sNewV3 = '';\r\nnMappedDim4 = 0;\tsMappedV4 = '';\t\tnNewDim4 = 0;\t  sNewV4 = '';\r\nnMappedDim5 = 0;\tsMappedV5 = '';\t\tnNewDim5 = 0;\t  sNewV5 = '';\r\nnMappedDim6 = 0;\tsMappedV6 = '';\t\tnNewDim6 = 0;\t  sNewV6 = '';\r\nnMappedDim7 = 0;\tsMappedV7 = '';\t\tnNewDim7 = 0;\t  sNewV7 = '';\r\nnMappedDim8 = 0;\tsMappedV8 = '';\t\tnNewDim8 = 0;\t  sNewV8 = '';\r\nnMappedDim9 = 0;\tsMappedV9 = '';\t\tnNewDim9 = 0;\t  sNewV9 = '';\r\nnMappedDim10 = 0;\tsMappedV10 = '';\tnNewDim10 = 0;\tsNewV10 = '';\r\nnMappedDim11 = 0;\tsMappedV11 = '';\tnNewDim11 = 0;\tsNewV11 = '';\r\nnMappedDim12 = 0;\tsMappedV12 = '';\tnNewDim12 = 0;\tsNewV12 = '';\r\nnMappedDim13 = 0;\tsMappedV13 = '';\tnNewDim13 = 0;\tsNewV13 = '';\r\nnMappedDim14 = 0;\tsMappedV14 = '';\tnNewDim14 = 0;\tsNewV14 = '';\r\nnMappedDim15 = 0;\tsMappedV15 = '';\tnNewDim15 = 0;\tsNewV15 = '';\r\nnMappedDim16 = 0;\tsMappedV16 = '';\tnNewDim16 = 0;\tsNewV16 = '';\r\nnMappedDim17 = 0;\tsMappedV17 = '';\tnNewDim17 = 0;\tsNewV17 = '';\r\nnMappedDim18 = 0;\tsMappedV18 = '';\tnNewDim18 = 0;\tsNewV18 = '';\r\nnMappedDim19 = 0;\tsMappedV19 = '';\tnNewDim19 = 0;\tsNewV19 = '';\r\nnMappedDim20 = 0;\tsMappedV20 = '';\tnNewDim20 = 0;\tsNewV20 = '';\r\nnMappedDim21 = 0;\tsMappedV21 = '';\tnNewDim21 = 0;\tsNewV21 = '';\r\nnMappedDim22 = 0;\tsMappedV22 = '';\tnNewDim22 = 0;\tsNewV22 = '';\r\nnMappedDim23 = 0;\tsMappedV23 = '';\tnNewDim23 = 0;\tsNewV23 = '';\r\nnMappedDim24 = 0;\tsMappedV24 = '';\tnNewDim24 = 0;\tsNewV24 = '';\r\nnMappedDim25 = 0;\tsMappedV25 = '';\tnNewDim25 = 0;\tsNewV25 = '';\r\nnMappedDim26 = 0;\tsMappedV26 = '';\tnNewDim26 = 0;\tsNewV26 = '';\r\nnMappedDim27 = 0;\tsMappedV27 = '';\tnNewDim27 = 0;\tsNewV27 = '';\r\n                  sMappedV28 = '';\r\n\r\n###########################################\r\n### SPLIT MAPPING TO NEW DIMS PARAMETER ###\r\n###########################################\r\n\r\nnTargetCubeDimensionCount   = nDimensionCount;\r\n\r\nsElementMapping = TRIM( pMappingToNewDims );\r\nnChar = 1;\r\nnCharCount = LONG( sElementMapping );\r\n\r\nsTargetFilter = '';\r\nsWord = '';\r\nsLastDelim = '';\r\nnIndex = 1;\r\n\r\n# Add a trailing element delimiter so that the last element is picked up\r\nIf( nCharCount > 0 );\r\n  sElementMapping = sElementMapping | sDelimDim;\r\n  nCharCount = nCharCount + LONG(sDelimDim);\r\nEndIf;\r\n\r\nWHILE (nChar <= nCharCount);\r\n    sChar = SUBST( sElementMapping, nChar, 1);\r\n\r\n    # Used for delimiters, required for multiple character delimiters\r\n    sDelim = '';\r\n    nAddExtra = 0;\r\n\r\n    # Ignore spaces\r\n    IF (TRIM(sChar) @<> '' );\r\n\r\n      ### Dimension Name ###\r\n\r\n      # If the delimiter is more than 1 character peek ahead the same amount\r\n      # Ignore the first character\r\n      sDelim = sChar;\r\n      nCount = LONG(sElementStartDelim) - 1;\r\n      If( nCount > 0 & nChar + nCount <= nCharCount );\r\n        # Add the extra characters\r\n        sDelim = sDelim | SUBST( sElementMapping, nChar + 1, nCount);\r\n        # Move to the end of the delimter\r\n\r\n      EndIf;\r\n\r\n      If( sDelim @= sElementStartDelim );\r\n        nAddExtra = nCount;\r\n        sChar = sDelim;\r\n\r\n        If( sLastDelim @<> '' & sLastDelim @<> sDelimDim );\r\n            sMessage = 'In pMappingToNewDims the name of a dimension must follow a dimension delimiter (' | sDelimDim | ')';\r\n            nErrors = nErrors + 1;\r\n            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n            #ProcessError();\r\n        EndIf;\r\n\r\n        # Found a dimension\r\n        sDimension = sWord;\r\n\r\n        If( DimensionExists( sDimension ) = 0 );\r\n            # The dimension does not exist in the model. Cancel process\r\n            sMessage = 'In pMappingToNewDims - Dimension: ' | sDimension | ' does not exist';\r\n            nErrors = nErrors + 1;\r\n            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n            #ProcessError();\r\n        EndIf;\r\n\r\n        ### Determine the dimension is a member of the cube ###\r\n        nMapCount = 1;\r\n        nMapDimensionIndex = 0;\r\n        While( TabDim( pCube, nMapCount ) @<> '' );\r\n            sMapCubeDimName = TabDim( pCube, nMapCount );\r\n            If( sDimension @= sMapCubeDimName );\r\n                nMapDimensionIndex = nMapCount;\r\n            EndIf;\r\n            nMapCount = nMapCount + 1;\r\n        End;\r\n\r\n        If( nMapDimensionIndex = 0 );\r\n            # The dimension does not exist in the cube. Cancel process\r\n            sMessage = 'Dimension: ' | sDimension | ' is not a member of: '| pCube | ' cube.';\r\n            nErrors = nErrors + 1;\r\n            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n            If( pStrictErrorHandling = 1 );\r\n                ProcessQuit;\r\n            Else;\r\n                ProcessBreak;\r\n            EndIf;\r\n        EndIf;\r\n\r\n        # Find the index of the dimension is in the Target cube\r\n        nTargetIndexCounter = 1;\r\n\r\n        WHILE(nTargetIndexCounter <= nTargetCubeDimensionCount );\r\n          sNthDimension = TabDim( pCube, nTargetIndexCounter );\r\n\r\n          If(sDimension @= sNthDimension);\r\n            nTargetIndex = nTargetIndexCounter;\r\n            nTargetIndexCounter = 1000;\r\n          EndIf;\r\n\r\n          nTargetIndexCounter = nTargetIndexCounter + 1;\r\n        END;\r\n\r\n        #Add to the Target filter\r\n        If(sTargetFilter@='');\r\n          sTargetFilter=sDimension;\r\n        Else;\r\n          sTargetFilter=sTargetFilter|sDelimDim|sDimension;\r\n        Endif;\r\n\r\n        sLastDelim = sChar;\r\n        # Clear the word\r\n        sWord = '';\r\n\r\n      Else;\r\n\r\n        # Reset extra chars\r\n        nAddExtra = 0;\r\n\r\n        ### Check both dim delimiter and element delimiter ###\r\n        nIsDelimiter = 0;\r\n\r\n        ## Check dimension delimiter first\r\n        # If the delimiter is more than 1 character peek ahead the same amount\r\n        # Ignore the first character\r\n        sDelim = sChar;\r\n        nCount = LONG(sDelimDim) - 1;\r\n        If( nCount > 0 & nChar + nCount <= nCharCount );\r\n          # Add the extra characters\r\n          sDelim = sDelim | SUBST( sElementMapping, nChar + 1, nCount);\r\n          # Move to the end of the delimter\r\n\r\n        EndIf;\r\n\r\n        If( sDelim @= sDelimDim );\r\n          nIsDelimiter = 1;\r\n          sChar = sDelim;\r\n          nAddExtra = nCount;\r\n        EndIf;\r\n\r\n        If ( nIsDelimiter = 1 );\r\n\r\n          If( sLastDelim @= '' % sLastDelim @= sDelimDim );\r\n            sMessage = 'In pMappingToNewDims - an element delimiter must follow a dimension name: ' |  sChar | ' (' | NumberToString(nChar) | ')';\r\n            nErrors = nErrors + 1;\r\n            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n            #ProcessError();\r\n          EndIf;\r\n\r\n          # an element has been found\r\n          sElement = sWord;\r\n\r\n          If( DimIx( sDimension, sElement ) = 0 );\r\n              # The element does not exist in the dimension. Cancel process\r\n              sMessage = 'In pMappingToNewDims - Element: ' | sElement | ' in dimension ' | sDimension | ' does not exist';\r\n              nErrors = nErrors + 1;\r\n              LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n              #ProcessError();\r\n          EndIf;\r\n\r\n          # Allow consolidations only if pSuppressConsol is set to 0\r\n\r\n          If ( DTYPE( sDimension, sElement) @= 'C' );\r\n            sMessage = Expand( 'In pMappingToNewDims - Target element: %sElement% for dimension %sDimension% is consolidated' );\r\n            nErrors = nErrors + 1;\r\n            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n            #ProcessError();\r\n          Endif;\r\n\r\n\r\n          # Add the element to the source or target depending on whether it's the first or the second element\r\n          # Get principal name\r\n          # in case source element and this element are using different aliases\r\n\r\n          sElement = DimensionElementPrincipalName(sDimension,sElement);\r\n\r\n          ### Update the variable for InputElement Target Dim ######################################\r\n          If(nTargetIndex = 1);\r\n            nNewDim1 = 1;\r\n            sNewV1 = sElement;\r\n          ElseIf(nTargetIndex = 2);\r\n            nNewDim2 = 1;\r\n            sNewV2 = sElement;\r\n          ElseIf(nTargetIndex = 3);\r\n            nNewDim3 = 1;\r\n            sNewV3 = sElement;\r\n          ElseIf(nTargetIndex = 4);\r\n            nNewDim4 = 1;\r\n            sNewV4 = sElement;\r\n          ElseIf(nTargetIndex = 5);\r\n            nNewDim5 = 1;\r\n            sNewV5 = sElement;\r\n          ElseIf(nTargetIndex = 6);\r\n            nNewDim6 = 1;\r\n            sNewV6 = sElement;\r\n          ElseIf(nTargetIndex = 7);\r\n            nNewDim7 = 1;\r\n            sNewV7 = sElement;\r\n          ElseIf(nTargetIndex = 8);\r\n            nNewDim8 = 1;\r\n            sNewV8 = sElement;\r\n          ElseIf(nTargetIndex = 9);\r\n            nNewDim9 = 1;\r\n            sNewV9 = sElement;\r\n          ElseIf(nTargetIndex = 10);\r\n            nNewDim10 = 1;\r\n            sNewV10 = sElement;\r\n          ElseIf(nTargetIndex = 11);\r\n            nNewDim11 = 1;\r\n            sNewV11 = sElement;\r\n          ElseIf(nTargetIndex = 12);\r\n            nNewDim12 = 1;\r\n            sNewV12 = sElement;\r\n          ElseIf(nTargetIndex = 13);\r\n            nNewDim13 = 1;\r\n            sNewV13 = sElement;\r\n          ElseIf(nTargetIndex = 14);\r\n            nNewDim14 = 1;\r\n            sNewV14 = sElement;\r\n          ElseIf(nTargetIndex = 15);\r\n            nNewDim15 = 1;\r\n            sNewV15 = sElement;\r\n          ElseIf(nTargetIndex = 16);\r\n            nNewDim16 = 1;\r\n            sNewV16 = sElement;\r\n          ElseIf(nTargetIndex = 17);\r\n            nNewDim17 = 1;\r\n            sNewV17 = sElement;\r\n          ElseIf(nTargetIndex = 18);\r\n            nNewDim18 = 1;\r\n            sNewV18 = sElement;\r\n          ElseIf(nTargetIndex = 19);\r\n            nNewDim19 = 1;\r\n            sNewV19 = sElement;\r\n          ElseIf(nTargetIndex = 20);\r\n            nNewDim20 = 1;\r\n            sNewV20 = sElement;\r\n          ElseIf(nTargetIndex = 21);\r\n            nNewDim21 = 1;\r\n            sNewV21 = sElement;\r\n          ElseIf(nTargetIndex = 22);\r\n            nNewDim22 = 1;\r\n            sNewV22 = sElement;\r\n          ElseIf(nTargetIndex = 23);\r\n            nNewDim23 = 1;\r\n            sNewV23 = sElement;\r\n          ElseIf(nTargetIndex = 24);\r\n            nNewDim24 = 1;\r\n            sNewV24 = sElement;\r\n          ElseIf(nTargetIndex = 25);\r\n            nNewDim25 = 1;\r\n            sNewV25 = sElement;\r\n          ElseIf(nTargetIndex = 26);\r\n            nNewDim26 = 1;\r\n            sNewV26 = sElement;\r\n          ElseIf(nTargetIndex = 27);\r\n            nNewDim27 = 1;\r\n            sNewV27 = sElement;\r\n          EndIf;\r\n\r\n          #Add to the Target filter - no need to manage element separators, since just one target element is possible in mapping\r\n          sTargetFilter=sTargetFilter|sElementStartDelim|sElement;\r\n\r\n          # Clear the word\r\n          sWord = '';\r\n          sLastDelim = sChar;\r\n\r\n        Else;\r\n          sWord = sWord | sChar;\r\n        EndIf;\r\n\r\n      EndIf;\r\n\r\n    EndIf;\r\n\r\n    nChar = nChar + nAddExtra + 1;\r\n\r\nEND;\r\n\r\n\r\n###########################################\r\n#Region ### MAPPING Target DIMENSIONS #####\r\n\r\n## Source index starting from 2, since first columns holds the export cube name\r\nnSourceIndex = 2;\r\nnTargetIndex = 1;\r\nWHILE(TabDim( pCube, nTargetIndex ) @<> '');\r\n  sTargetDim = TabDim( pCube, nTargetIndex );\r\n\r\n  If(nTargetIndex = 1);\r\n    If( nNewDim1 = 0 );\r\n      nMappedDim1 = 1;\r\n      sMappedV1  = 'V' | NumberToString(nSourceIndex);\r\n      nSourceIndex = nSourceIndex + 1;\r\n    Else;\r\n\r\n    EndIf;\r\n  ElseIf(nTargetIndex = 2 & nNewDim2 = 0);\r\n    nMappedDim2 = 1;\r\n    sMappedV2  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 3 & nNewDim3 = 0);\r\n    nMappedDim3 = 1;\r\n    sMappedV3  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 4 & nNewDim4 = 0);\r\n    nMappedDim4 = 1;\r\n    sMappedV4  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 5 & nNewDim5 = 0);\r\n    nMappedDim5 = 1;\r\n    sMappedV5  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 6 & nNewDim6 = 0);\r\n    nMappedDim6 = 1;\r\n    sMappedV6  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 7 & nNewDim7 = 0);\r\n      nMappedDim7 = 1;\r\n      sMappedV7  = 'V' | NumberToString(nSourceIndex);\r\n      nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 8 & nNewDim8 = 0);\r\n    nMappedDim8 = 1;\r\n    sMappedV8  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 9 & nNewDim9 = 0);\r\n    nMappedDim9 = 1;\r\n    sMappedV9  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 10 & nNewDim10 = 0);\r\n    nMappedDim10 = 1;\r\n    sMappedV10  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 11 & nNewDim11 = 0);\r\n    nMappedDim11 = 1;\r\n    sMappedV11  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 12 & nNewDim12 = 0 );\r\n    nMappedDim12 = 1;\r\n    sMappedV12  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 13 & nNewDim13 = 0 );\r\n    nMappedDim13 = 1;\r\n    sMappedV13  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 14 & nNewDim14 = 0 );\r\n    nMappedDim14 = 1;\r\n    sMappedV14  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 15 & nNewDim15 = 0 );\r\n    nMappedDim15 = 1;\r\n    sMappedV15  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 16 & nNewDim16 = 0 );\r\n    nMappedDim16 = 1;\r\n    sMappedV16  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 17 & nNewDim17 = 0 );\r\n    nMappedDim17 = 1;\r\n    sMappedV17  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 18 & nNewDim18 = 0 );\r\n    nMappedDim18 = 1;\r\n    sMappedV18  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 19 & nNewDim19 = 0 );\r\n    nMappedDim19 = 1;\r\n    sMappedV19  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 20 & nNewDim20 = 0 );\r\n    nMappedDim20 = 1;\r\n    sMappedV20  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 21 & nNewDim21 = 0 );\r\n    nMappedDim21 = 1;\r\n    sMappedV21  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 22 & nNewDim22 = 0 );\r\n    nMappedDim22 = 1;\r\n    sMappedV22  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 23 & nNewDim23 = 0 );\r\n    nMappedDim23 = 1;\r\n    sMappedV23  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 24 & nNewDim24 = 0 );\r\n    nMappedDim24 = 1;\r\n    sMappedV24  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 25 & nNewDim25 = 0 );\r\n    nMappedDim25 = 1;\r\n    sMappedV25  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 26 & nNewDim26 = 0 );\r\n    nMappedDim26 = 1;\r\n    sMappedV26  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  ElseIf(nTargetIndex = 27 & nNewDim27 = 0 );\r\n    nMappedDim27 = 1;\r\n    sMappedV27  = 'V' | NumberToString(nSourceIndex);\r\n    nSourceIndex = nSourceIndex + 1;\r\n  EndIf;\r\n\r\n  nTargetIndex = nTargetIndex + 1;\r\n\r\nEND;\r\n\r\n# The last variable in the data source holds the values\r\n# which need to be mapped to the last variable in the target\r\n\r\nIf(nTargetIndex = 1 & nNewDim1 = 0);\r\n  nMappedDim1 = 1;\r\n  sMappedV1  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 2 & nNewDim2 = 0);\r\n  nMappedDim2 = 1;\r\n  sMappedV2  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 3 & nNewDim3 = 0);\r\n  nMappedDim3 = 1;\r\n  sMappedV3  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 4 & nNewDim4 = 0);\r\n  nMappedDim4 = 1;\r\n  sMappedV4  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 5 & nNewDim5 = 0);\r\n  nMappedDim5 = 1;\r\n  sMappedV5  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 6 & nNewDim6 = 0);\r\n  nMappedDim6 = 1;\r\n  sMappedV6  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 7 & nNewDim7 = 0);\r\n  nMappedDim7 = 1;\r\n  sMappedV7  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 8 & nNewDim8 = 0);\r\n  nMappedDim8 = 1;\r\n  sMappedV8  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 9 & nNewDim9 = 0);\r\n  nMappedDim9 = 1;\r\n  sMappedV9  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 10 & nNewDim10 = 0);\r\n  nMappedDim10 = 1;\r\n  sMappedV10  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 11 & nNewDim11 = 0);\r\n  nMappedDim11 = 1;\r\n  sMappedV11  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 12);\r\n  nMappedDim12 = 1;\r\n  sMappedV12  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 13);\r\n  nMappedDim13 = 1;\r\n  sMappedV13  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 14);\r\n  nMappedDim14 = 1;\r\n  sMappedV14  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 15);\r\n  nMappedDim15 = 1;\r\n  sMappedV15  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 16);\r\n  nMappedDim16 = 1;\r\n  sMappedV16  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 17);\r\n  nMappedDim17 = 1;\r\n  sMappedV17  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 18);\r\n  nMappedDim18 = 1;\r\n  sMappedV18  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 19);\r\n  nMappedDim19 = 1;\r\n  sMappedV19  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 20);\r\n  nMappedDim20 = 1;\r\n  sMappedV20  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 21);\r\n  nMappedDim21 = 1;\r\n  sMappedV21  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 22);\r\n  nMappedDim22 = 1;\r\n  sMappedV22  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 23);\r\n  nMappedDim23 = 1;\r\n  sMappedV23  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 24);\r\n  nMappedDim24 = 1;\r\n  sMappedV24  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 25);\r\n  nMappedDim25 = 1;\r\n  sMappedV25  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 26);\r\n  nMappedDim26 = 1;\r\n  sMappedV26  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nElseIf(nTargetIndex = 27);\r\n  nMappedDim27 = 1;\r\n  sMappedV27  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\n\r\n# a cube with 27 dimensions uses V28 to hold the values\r\nElseIf(nTargetIndex = 28);\r\n  nMappedDim28 = 1;\r\n  sMapped28  = 'V' | NumberToString(nSourceIndex);\r\n  nSourceIndex = nSourceIndex + 1;\r\nEndIf;\r\n\r\n# Check that an input element or variable has been specified for all dimensions in the target cube\r\n\r\nnIndexInTarget = 1;\r\nWHILE(nIndexInTarget <= nTargetCubeDimensionCount);\r\n\r\n      sMapped   = Expand('%nMappedDim'| NumberToString(nIndexInTarget) |'%');\r\n      sMapped   = Subst( sMapped , Scan( '.' , sMapped )-1 , 99);\r\n      nMapped   = StringToNumber( Trim( sMapped ) );\r\n      sNew      = Expand('%nNewDim'| NumberToString(nIndexInTarget) |'%');\r\n      sNew      = Subst( sNew , Scan( '.' , sNew )-1 , 99);\r\n      nNew      = StringToNumber( Trim( sNew ) );\r\n\r\n      If(nMapped = 0 & nNew = 0 );\r\n            # there's no input element and this dimension is not in the source\r\n            nErrors         = nErrors + 1;\r\n            sTargetDimName  = TabDim( pCube,  nIndexInTarget );\r\n            sMessage        = 'Dimension ' | sTargetDimName | ' is missing an input element in pMappingToNewDims';\r\n            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n            If( pStrictErrorHandling = 1 );\r\n                ProcessQuit;\r\n            Else;\r\n                ProcessBreak;\r\n            EndIf;\r\n       EndIf;\r\n\r\n       nIndexInTarget = nIndexInTarget + 1;\r\nEND;\r\n#EndRegion ### MAPPING Target DIMENSIONS #####\r\n##############################################\r\n\r\n#CubeLogging\r\nIf ( pCubeLogging <= 1 );\r\n  sCubeLogging = CellGetS('}CubeProperties', pCube, 'LOGGING' );\r\n  CubeSetLogChanges( pCube, pCubeLogging);\r\nEndIf;\r\n\r\n### Assign Datasource ###\r\nDataSourceType                  = 'CHARACTERDELIMITED';\r\nDatasourceNameForServer         = sFile;\r\nDatasourceNameForClient         = sFile;\r\nDatasourceASCIIHeaderRecords    = pTitleRows;\r\nDatasourceASCIIDelimiter        = pDelimiter;\r\nDatasourceASCIIQuoteCharacter   = pQuote;\r\nSetInputCharacterSet (pCharacterSet);\r\n\r\n### End Prolog ###",
    "Variables": [
        {
            "EndByte": 0,
            "Name": "v1",
            "Position": 1,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v2",
            "Position": 2,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v3",
            "Position": 3,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v4",
            "Position": 4,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v5",
            "Position": 5,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v6",
            "Position": 6,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v7",
            "Position": 7,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v8",
            "Position": 8,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v9",
            "Position": 9,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v10",
            "Position": 10,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v11",
            "Position": 11,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v12",
            "Position": 12,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v13",
            "Position": 13,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v14",
            "Position": 14,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v15",
            "Position": 15,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v16",
            "Position": 16,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v17",
            "Position": 17,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v18",
            "Position": 18,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v19",
            "Position": 19,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v20",
            "Position": 20,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v21",
            "Position": 21,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v22",
            "Position": 22,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v23",
            "Position": 23,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v24",
            "Position": 24,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v25",
            "Position": 25,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v26",
            "Position": 26,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v27",
            "Position": 27,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v28",
            "Position": 28,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v29",
            "Position": 29,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "v30",
            "Position": 30,
            "StartByte": 0,
            "Type": "String"
        }
    ]
}