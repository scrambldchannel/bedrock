{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction      = Expand( 'Process:%cThisProcName% successfully deleted the appropriate elements in hierarchy %pDim%:%pHier%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.hier.element.delete",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pDim",
            "Prompt": "REQUIRED: dimension name accepts wildcards (if = * then all the dimensions)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pHier",
            "Prompt": "OPTIONAL: hierarchy name (if blank then same named hierarchy as dimension is assumed) accepts wildcards (if = * then all hierarchies)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pEle",
            "Prompt": "OPTIONAL: filter on elements (delimiter separated list of elements accepts wildcards (if = * then all the elements in hierarchy get deleted))",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: delimiter character for element list (default value if blank = '&')",
            "Type": "String",
            "Value": "&"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.hier.element.delete', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pDim', '', 'pHier', '', 'pEle', '',\r\n    \t'pDelim', '&'\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process will delete specified or all elements from a dimension Hierarchy. Elements might be\r\n# specified as a delimited list of elements. Each member in the list might be specified exactly or\r\n# by a wildcard pattern. Wildcards \"\\*\" and \"?\" are accepted.\r\n#\r\n# Caution: When pEle is set to \\*, __all__ elements in pHier will be deleted!\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName     = GetProcessName();\r\ncTimeStamp        = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt        = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSubDim       = cThisProcName |'_dims_'| cTimeStamp |'_'| cRandomInt;\r\ncTempSubHier      = cThisProcName |'_hiers_'| cTimeStamp |'_'| cRandomInt;\r\ncTempSubEle       = cThisProcName |'_eles_'| cTimeStamp |'_'| cRandomInt;\r\ncUserName         = TM1User();\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgInfoLevel     = 'INFO';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncMsgInfoContent   = 'User:%cUserName% Process:%cThisProcName% Message:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pDim:%pDim%, pHier:%pHier%, pEle:%pEle%, pDelim:%pDelim%.';\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\nIf( Scan( '*', pDim ) = 0 & Scan( '?', pDim ) = 0 & Scan( pDelim, pDim ) = 0 & Scan( ':', pDim ) > 0 & pHier @= '' );\r\n    # A hierarchy has been passed as dimension. Handle the input error by splitting dim:hier into dimension & hierarchy\r\n    pHier       = SubSt( pDim, Scan( ':', pDim ) + 1, Long( pDim ) );\r\n    pDim        = SubSt( pDim, 1, Scan( ':', pDim ) - 1 );\r\nEndIf;\r\n\r\n# Validate Dimension\r\nIf( Trim( pDim ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No dimension specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelim @= '' );\r\n    pDelim = '&';\r\nEndIf;\r\n\r\n# Validate Hierarchy\r\nIf( Trim( pHier ) @= '' );\r\n    ## use same name as Dimension. Since wildcards are allowed this is managed inside the code below\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n# Loop through dimensions in pDim\r\nsDims = pDim;\r\nnDimDelimiterIndex = 1;\r\nsMdx = '';\r\n# Get 1st dimension\r\nWhile( nDimDelimiterIndex <> 0 );\r\n    # Extract 1st dimension > sDim\r\n    nDimDelimiterIndex = Scan( pDelim, sDims );\r\n    If( nDimDelimiterIndex = 0 );\r\n        sDim = sDims;\r\n    Else;\r\n        sDim = Trim( SubSt( sDims, 1, nDimDelimiterIndex - 1 ) );\r\n        sDims = Trim( Subst( sDims, nDimDelimiterIndex + Long(pDelim), Long( sDims ) ) );\r\n    EndIf;\r\n\r\n      # Create subset of dimensions using Wildcard to loop through dimensions in pDim with wildcard\r\n    sDimExp = '\"'|sDim|'\"';\r\n    sMdxPart = '{TM1FILTERBYPATTERN( EXCEPT( TM1SUBSETALL( [}Dimensions] ) , TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions] ) , \"*:*\") ) ,'| sDimExp | ')}';\r\n    IF( sMdx @= '');\r\n      sMdx = sMdxPart;\r\n    ELSE;\r\n      sMdx = sMdx | ' + ' | sMdxPart;\r\n    ENDIF;\r\nEnd;\r\n\r\nIf( SubsetExists( '}Dimensions' , cTempSubDim ) = 1 );\r\n    # If a delimited list of dim names includes wildcards then we may have to re-use the subset multiple times\r\n    SubsetMDXSet( '}Dimensions' , cTempSubDim, sMDX );\r\nElse;\r\n    # temp subset, therefore no need to destroy in epilog\r\n    SubsetCreatebyMDX( cTempSubDim, sMDX, '}Dimensions' , 1 );\r\nEndIf;\r\n\r\n# Loop through dimensions in subset created based on wildcard\r\nnCountDim = SubsetGetSize( '}Dimensions' , cTempSubDim );\r\nWhile( nCountDim >= 1 );\r\n    sDim = SubsetGetElementName( '}Dimensions' , cTempSubDim, nCountDim );\r\n    # Validate dimension name\r\n    If( DimensionExists(sDim) = 0 );\r\n        nErrors = 1;\r\n        sMessage = Expand( 'Dimension %sDim% does not exist.' );\r\n        LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n    Else;\r\n        If( pLogOutput = 1 );\r\n          sMessage = Expand( 'Dimension %sDim% being processed....' );\r\n          LogOutput( 'INFO', Expand( cMsgInfoContent ) );\r\n        EndIf;\r\n        # Loop through hierarchies in pHier\r\n        If( Trim( pHier ) @= '' );\r\n          ### Use main hierarchy for each dimension if pHier is empty\r\n          sHierarchies      = sDim;\r\n        Else;\r\n          sHierarchies      = pHier;\r\n        EndIf;\r\n        nDelimiterIndexA    = 1;\r\n        sHierDim            = '}Dimensions' ;\r\n        sMdxHier            = '';\r\n        While( nDelimiterIndexA <> 0 );\r\n\r\n            nDelimiterIndexA = Scan( pDelim, sHierarchies );\r\n            If( nDelimiterIndexA = 0 );\r\n                sHierarchy   = sHierarchies;\r\n            Else;\r\n                sHierarchy   = Trim( SubSt( sHierarchies, 1, nDelimiterIndexA - 1 ) );\r\n                sHierarchies = Trim( Subst( sHierarchies, nDelimiterIndexA + Long(pDelim), Long( sHierarchies ) ) );\r\n            EndIf;\r\n\r\n            # Create subset of Hierarchies using Wildcard\r\n            If( sHierarchy  @= sDim );\r\n                sHierExp    = '\"'|sDim|'\"';\r\n            Else;\r\n                sHierExp    = '\"'|sDim|':'|sHierarchy|'\"';\r\n            EndIf;\r\n            sMdxHierPart    = '{TM1FILTERBYPATTERN( {TM1SUBSETALL([ ' |sHierDim| '])},'| sHierExp | ')}';\r\n            IF( sMdxHier    @= '');\r\n              sMdxHier      = sMdxHierPart;\r\n            ELSE;\r\n              sMdxHier      = sMdxHier | ' + ' | sMdxHierPart;\r\n            ENDIF;\r\n        End;\r\n        If( Trim( pHier )   @= '*' );\r\n          sMdxHier          = '{ UNION ( ' | sMdxHier |' , {[}Dimensions].[' | sDim | ']} )}';\r\n        EndIf;\r\n\r\n        If( SubsetExists( sHierDim, cTempSubHier ) = 1 );\r\n            # If a delimited list of hier names includes wildcards then we may have to re-use the subset multiple times\r\n            SubsetMDXSet( sHierDim, cTempSubHier, sMdxHier );\r\n        Else;\r\n            # temp subset, therefore no need to destroy in epilog\r\n            SubsetCreatebyMDX( cTempSubHier, sMdxHier, sHierDim, 1 );\r\n        EndIf;\r\n\r\n        # Loop through subset of hierarchies created based on wildcard\r\n        nCountHier = SubsetGetSize( sHierDim, cTempSubHier );\r\n        While( nCountHier >= 1 );\r\n            sCurrHier = SubsetGetElementName( sHierDim, cTempSubHier, nCountHier );\r\n            sCurrHierName = Subst( sCurrHier, Scan(':', sCurrHier)+1, Long(sCurrHier) );\r\n            # Validate hierarchy name in sHierDim\r\n            If( Dimix( sHierDim , sCurrHier ) = 0 );\r\n                sMessage = Expand('The %sCurrHier% hierarchy does NOT exist in the %sDim% dimension.');\r\n                LogOutput( 'INFO' , Expand( cMsgInfoContent ) );\r\n            Else;\r\n              If( pLogOutput = 1 );\r\n                sMessage = Expand( 'Hierarchy %sCurrHierName% in Dimension %sDim% being processed....' );\r\n                LogOutput( 'INFO', Expand( cMsgInfoContent ) );\r\n              EndIf;\r\n              # Loop through hierarchy elements in pEle\r\n              sEles = pEle;\r\n               nDelimiterIndexB = 1;\r\n              While( nDelimiterIndexB <> 0 );\r\n\r\n                  nDelimiterIndexB = Scan( pDelim, sEles );\r\n                  If( nDelimiterIndexB = 0 );\r\n                      sEle = sEles;\r\n                  Else;\r\n                      sEle = Trim( SubSt( sEles, 1, nDelimiterIndexB - 1 ) );\r\n                      sEles = Trim( Subst( sEles, nDelimiterIndexB + Long(pDelim), Long( sEles ) ) );\r\n                  EndIf;\r\n\r\n                  # Check if a wildcard has been used to specify the Element name.\r\n                  # If it hasn't then just delete the Element if it exists\r\n                  If(sEle @= '*');\r\n                          HierarchyDeleteAllElements(sDim, sCurrHierName);\r\n                  ElseIf( Scan( '*', sEle ) = 0 & Scan( '?', sEle ) = 0);\r\n                      If( HierarchyElementExists( sDim,sCurrHierName, sEle ) = 1 );\r\n                          HierarchyElementDelete( sDim, sCurrHierName,sEle );\r\n                          If( sCurrHierName @= 'Leaves' );\r\n                              sMessage = Expand('Element %sEle% deleted from LEAVES hierarchy in dimension %sDim%. This action removes the element from all hierarchies!');\r\n                              LogOutput( cMsgInfoLevel, Expand( cMsgInfoContent ) );\r\n                          ElseIf( pLogOutput = 1 );\r\n                              sMessage = Expand( 'Element %sEle% deleted from hierarchy %sCurrHierName% in dimension %sDim%.' );\r\n                              LogOutput( cMsgInfoLevel, Expand( cMsgInfoContent ) );\r\n                          EndIf;\r\n                      Else;\r\n                          If( pLogOutput >= 1 );\r\n                              sMessage = Expand('The Hierarchy %sCurrHier% does not contain element %sEle%.');\r\n                              LogOutput( cMsgInfoLevel, Expand( cMsgInfoContent ) );\r\n                          EndIf;\r\n                      Endif;\r\n                  Else;\r\n                      # Wildcard search string\r\n                      sEle = '\"'|sEle|'\"';\r\n                      sProc = '}bedrock.hier.sub.create.bymdx';\r\n                      sMdxEle = '{TM1FILTERBYPATTERN( {TM1SUBSETALL([ ' | sCurrHier |' ])},'| sEle| ')}';\r\n\r\n                      If( HierarchySubsetExists( sDim, sCurrHierName, cTempSubEle ) = 1 );\r\n                          # If a delimited list of ele names includes wildcards then we may have to re-use the subset multiple times\r\n                          HierarchySubsetMDXSet( sDim, sCurrHierName, cTempSubEle, sMDXEle );\r\n                      Else;\r\n                          # temp subset, therefore no need to destroy in epilog\r\n                          SubsetCreatebyMDX( cTempSubEle, sMDXEle, sCurrHier, 1 );\r\n                      EndIf;\r\n\r\n                      # Loop through subset of hierarchy elements created based on wildcard\r\n                      nCountElems = HierarchySubsetGetSize(sDim, sCurrHierName, cTempSubEle);\r\n                      While( nCountElems >= 1 );\r\n                          sElement = HierarchySubsetGetElementName(sDim, sCurrHierName, cTempSubEle, nCountElems);\r\n                          HierarchyElementDelete( sDim, sCurrHierName,sElement );\r\n                          If( pLogOutput = 1 );\r\n                              sMessage = Expand( 'Element %sElement% deleted from hierarchy %sCurrHierName% in dimension %sDim%.' );\r\n                              LogOutput( cMsgInfoLevel, Expand( cMsgInfoContent ) );\r\n                          EndIf;\r\n                          nCountElems = nCountElems - 1;\r\n                      End;\r\n                  EndIf;\r\n\r\n              End;\r\n          Endif;\r\n\r\n            nCountHier = nCountHier - 1;\r\n        End;\r\n\r\n    EndIf;\r\n\r\n    nCountDim = nCountDim - 1;\r\nEnd;\r\n\r\n\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}