{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully deleted view %pView% from cube %pCube%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.cube.view.delete",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pCube",
            "Prompt": "REQUIRED: List of Cubes Separated by Delimiter (For all cubes just the wildcard character alone i.e. *)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pView",
            "Prompt": "REQUIRED: List of Views Separated by Delimiter. Wildcards Permitted on View Names.",
            "Type": "String",
            "Value": "}bedrock*"
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: Delimiter Character  (default value if blank = '&')",
            "Type": "String",
            "Value": "&"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.cube.view.delete', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n\t    'pCube', '', 'pView', '', 'pDelim', '&'\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process deletes public views.\r\n\r\n# Use case: Intended for development/prototyping or production.\r\n# 1/ After a view has been created to zero or as a data source it needs to be deleted.\r\n# 2/ Clean up public views after Go Live.\r\n\r\n# Note:\r\n# This process can work on a single cubes or multiple cubes.\r\n# This process can work on a single view or multiple views.\r\n# When specifying view names wildcards can be included by using the * character.\r\n#       **Parameter pCube**.\r\n#   - To specify which cubes to delete views from use the pCubes parameter.\r\n#   - To delete views from a single cube only just specify that cube name e.g. Sales.\r\n#   - To delete views from multiple cubes specify each cube name separated by a delimiter e.g. Sales&Inventory&Cashflow.\r\n#   - To delete views from all cubes then set pCubes as *.\r\n#   - If any invalid cubes are specified they will be skipped but the process will continue to process the other cubes.\r\n#       **Parameter pView**.\r\n#   - To specify which views to delete use the pViews parameter.\r\n#   - This parameter must be specified, a blank value will cause the process to terminate.\r\n#   - To delete a single view only just specify that view name e.g. SalesByProduct.\r\n#   - To delete multiple views specify each view name separated by a delimiter e.g. SalesByProduct&SalesByManager&SalesByStore.\r\n#   - When specifying view names wildcards are permitted and all views that match the wildcard search string will be deleted.\r\n#   - The wildcard search string follows the same format as windows based file wildcards.\r\n#   - To delete all views that \"start\" with a specific string use a trailing * e.g. Bedrock*.\r\n#   - To delete all views that \"end\" in a specific string use a leading * e.g. *Bedrock.\r\n#   - To delete all views that \"contain\" a specific string use leading and trailing *'s e.g. *Bedrock*.\r\n#   - To delete a single specific view only don't use *'s at all e.g. Bedrock.\r\n#   - To specify multiple search stings list them all separated by a delimiter e.g. Bedrock*;*Temp;*Test*.\r\n#   - Specific view names and wildcard based names can both be used together e.g. SalesByProduct;Bedrock*.\r\n#       **Parameter pDelim**.\r\n#   - The delimiter can be used when specifying multiple cubes and/or multiple views.\r\n#   - The default delimiter is &.\r\n#   - Any delimiter can be used by specifying a value for pDelimiter.\r\n#   - Choose a delimiter that won't be used in either the wildcard search strings or cube names.\r\n#EndRegion @DOC\r\n\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n\r\n### Constants ###\r\ncThisProcName       = GetProcessName();\r\ncUserName           = TM1User();\r\ncTimeStamp          = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt          = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSubset         = cThisProcName | '_' | cTimeStamp | '_' | cRandomInt;\r\ncTempFile           = GetProcessErrorFileDirectory | cTempSubset | '.csv';\r\nsMessage            = \t'';\r\ncMsgErrorLevel      = 'ERROR';\r\ncMsgErrorContent    = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo            = 'Process:%cThisProcName% run with parameters pCube:%pCube%, pView:%pView%, pDelim:%pDelim%.' ;\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\nnErrors             = 0;\r\ncDimension          = '}Cubes';\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\n# Validate views\r\nIf( Trim( pView ) @= '' );\r\n    sMessage        = 'No views specified.';\r\n    nErrors         = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate delimiter\r\nIf( Trim( pDelim ) @= '' );\r\n    pDelim     = '&';\r\nEndIf;\r\n\r\n### Iterate through cubes ###\r\n\r\n# If no cube has been specified then process all cubes\r\nIf( Trim( pCube ) @= '' );\r\n    sMessage = 'No cube specified.';\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors > 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n# Work through all cubes specified in pCube\r\nsCubes                          = pCube;\r\nnCubeDelimIndex                 = 1;\r\nsDelimiter                      = pDelim;\r\nsMdx = '';\r\nWhile( nCubeDelimIndex <> 0 );\r\n    nCubeDelimIndex             = Scan( sDelimiter, sCubes  );\r\n    If( nCubeDelimIndex = 0 );\r\n        sCube                   = Trim( sCubes );\r\n    Else;\r\n        sCube                   = Trim( SubSt( sCubes, 1, nCubeDelimIndex - 1 ) );\r\n        sCubes                  = Trim( SubSt( sCubes, nCubeDelimIndex + Long( sDelimiter ), Long( sCubes ) ) );\r\n    EndIf;\r\n\r\n    # Create subset of cubes using Wildcard to loop through cubes in pCube with wildcard\r\n    sCubeExp = '\"'|sCube|'\"';\r\n    sMdxPart = Expand('{TM1FILTERBYPATTERN( TM1SUBSETALL( [}Cubes] ), %sCubeExp% )}');\r\n    IF( sMdx @= '');\r\n      sMdx = sMdxPart;\r\n    ELSE;\r\n      sMdx = sMdx | ' + ' | sMdxPart;\r\n    ENDIF;\r\nEnd;\r\n\r\nIf( SubsetExists( '}Cubes' , cTempSubset ) = 1 );\r\n    # If a delimited list of cube names includes wildcards then we may have to re-use the subset multiple times\r\n    SubsetMDXSet( '}Cubes' , cTempSubset, sMDX );\r\nElse;\r\n    # temp subset, therefore no need to destroy in epilog\r\n    SubsetCreatebyMDX( cTempSubset, sMDX, '}Cubes' , 1 );\r\nEndIf;\r\n\r\n\r\n    # Loop through cubess in subset created based on wildcard\r\n    nCountCubes = SubsetGetSize( '}Cubes' , cTempSubset );\r\n    While( nCountCubes >= 1 );\r\n      sCurrentCube = SubsetGetElementName( '}Cubes' , cTempSubset, nCountCubes );\r\n      # If a valid cube has been specified then delete specified views from it\r\n      If( CubeExists( sCurrentCube ) = 1 );\r\n          If( pLogOutput = 1 );\r\n            LogOutput( 'INFO', Expand( 'Processing cube %sCurrentCube%.' ) );\r\n          EndIf;\r\n          # Work through all views specified in pViews\r\n          sViews                  = pView;\r\n          nViewDelimIndex         = 1;\r\n          sMdxView = '';\r\n\r\n          While( nViewDelimIndex <> 0 );\r\n              nViewDelimIndex       = Scan( sDelimiter, sViews );\r\n              If( nViewDelimIndex = 0 );\r\n                  sView           = Trim( sViews );\r\n              Else;\r\n                  sView           = Trim( SubSt( sViews, 1, nViewDelimIndex - 1 ) );\r\n                  sViews          = Trim( SubSt( sViews, nViewDelimIndex + Long( sDelimiter ), Long( sViews ) ) );\r\n              EndIf;\r\n\r\n              # Check if a wildcard has been used to specify the view name.\r\n              # If it hasn't then just delete the view if it exists\r\n              If( Scan( '*', sView ) = 0 );\r\n                  If( ViewExists( sCurrentCube, sView ) = 1 );\r\n                      If( pLogOutput = 1 );\r\n                        LogOutput( 'INFO', Expand( '  Destroying view %sView% in cube %sCurrentCube%.' ) );\r\n                      EndIf;\r\n                      ViewDestroy( sCurrentCube, sView );\r\n                  EndIf;\r\n              # If it has then iterate through '}Views_CubeName' dimension\r\n              Else;\r\n                  sDimViews       = '}Views_' | sCurrentCube ;\r\n                  If( DimensionExists( sDimViews ) = 1 );\r\n                    # Create subset of views using Wildcard to loop through views in current cube\r\n                    sViewExp = '\"'|sView|'\"';\r\n                    sMdxViewPart = Expand('{TM1FILTERBYPATTERN( {TM1SUBSETALL([%sDimViews%])}, %sViewExp% )}');\r\n                    IF( sMdxView @= '');\r\n                      sMdxview = sMdxViewPart;\r\n                    ELSE;\r\n                      sMdxView = sMdxView | ' + ' | sMdxViewPart;\r\n                    ENDIF;\r\n                    If( SubsetExists( sDimViews, cTempSubset ) = 1 );\r\n                        # If a delimited list of attr names includes wildcards then we may have to re-use the subset multiple times\r\n                        SubsetMDXSet( sDimViews, cTempSubset, sMdxView );\r\n                    Else;\r\n                        # temp subset, therefore no need to destroy in epilog\r\n                        SubsetCreatebyMDX( cTempSubset, sMdxView, sDimViews, 1 );\r\n                    EndIf;\r\n\r\n                    # Loop through subset of views created based on wildcard\r\n                    nCountView = SubsetGetSize( sDimViews, cTempSubset );\r\n                    While( nCountView >= 1 );\r\n                        sViewEle = SubsetGetElementName( sDimViews, cTempSubset, nCountView );\r\n                        # Validate attribute name in sDim\r\n                        If( ViewExists( sCurrentCube, sViewEle ) = 1 );\r\n                          If( pLogOutput = 1 );\r\n                            LogOutput( 'INFO', Expand( 'Destroying view %sViewEle% in cube %sCurrentCube%.' ) );\r\n                          EndIf;\r\n                            ViewDestroy( sCurrentCube, sViewEle );\r\n                        Endif;\r\n                        nCountView = nCountView - 1;\r\n                    End;\r\n                  EndIf;\r\n              EndIf;\r\n\r\n          End;\r\n\r\n      # Cube does not exist\r\n      Else;\r\n          sMessage                = Expand('Cube %sCurrentCube% does not exist.');\r\n          LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n      EndIf;\r\n\r\n      nCountCubes = nCountCubes - 1;\r\n    End;\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}