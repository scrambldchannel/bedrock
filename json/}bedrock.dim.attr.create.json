{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully created attribute %pAttr% in dimension %pDim%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.dim.attr.create",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pDim",
            "Prompt": "REQUIRED: dimension name parameter accepts delimited list and wildcards",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pAttr",
            "Prompt": "REQUIRED: attribute name parameter accepts delimited list (separate with delimiter for multiple item e.g. Type&Active )",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pPrevAttr",
            "Prompt": "OPTIONAL: insert position (previous attribute) (Defaults to blank)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pAttrType",
            "Prompt": "OPTIONAL: attribute type (e.g. A S or N. If blank then assumed to be type=string)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: delimiter character for attribute list. (Defaults to & if blank)",
            "Type": "String",
            "Value": "&"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.dim.attr.create', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pDim', '', 'pAttr', '',\r\n    \t'pPrevAttr', '', 'pAttrType', '',\r\n    \t'pDelim', '&'\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process can insert one or more attributes in one or more specified dimensions.\r\n\r\n# Use case: Intended for development/prototyping.\r\n# 1/ Add multiple dimension attributes.\r\n\r\n# Note:\r\n# Delimited lists and/or wild card(*) are acceptable for pDim & pAttr.\r\n# Naturally, valid dimension name(s) (pDim) are mandatory otherwise the process will abort.\r\n# Known limitation: This process can insert multiple attributes to multiple dimensions but only for a single attribute type.\r\n#EndRegion @DOC\r\n\r\n### Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName   = GetProcessName();\r\ncUserName       = TM1User();\r\ncTimeStamp      = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt      = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub        = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel  = 'ERROR';\r\ncMsgErrorContent= 'Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo        = 'User:%cUserName% Process:%cThisProcName% run with parameters pDim:%pDim%, pPrevAttr:%pPrevAttr%, pAttr:%pAttr%, pAttrType:%pAttrType%, pDelim:%pDelim%.';\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\n# Validate dimension\r\nIf( Trim( pDim ) @= '' );\r\n    nErrors         = 1;\r\n    sMessage        = 'No dimension specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate attribute\r\nIF( Trim( pAttr ) @= '' );\r\n    nErrors         = 1;\r\n    sMessage        = 'No attribute specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate attribute type\r\npAttrType           = Upper( SubSt( pAttrType, 1, 1 ) );\r\nIf( pAttrType @<> 'A' & pAttrType @<> 'S' & pAttrType @<> 'N' );\r\n    nErrors         = 1;\r\n    sMessage        = 'Invalid attribute type specified: ' | pAttrType | '. Defaulted to String type';\r\n    LogOutput( 'INFO', Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate previous attribute\r\nIf( DimIx( '}ElementAttributes_' | pDim, pPrevAttr ) = 0 % pPrevAttr @= pAttr );\r\n    pPrevAttr       = '';\r\nEndIf;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelim @= '' );\r\n    pDelim          = '&';\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n# Loop through dimensions in pDim and attributes in pAttr\r\nsDims               = pDim;\r\nnDimDelimiterIndex  = 1;\r\n# Get 1st dimension\r\nWhile( nDimDelimiterIndex <> 0 );\r\n    # Extract 1st dimension > sDim\r\n    nDimDelimiterIndex = Scan( pDelim, sDims );\r\n    If( nDimDelimiterIndex = 0 );\r\n        sDim        = sDims;\r\n    Else;\r\n        sDim        = Trim( SubSt( sDims, 1, nDimDelimiterIndex - 1 ) );\r\n        sDims       = Trim( Subst( sDims, nDimDelimiterIndex + Long(pDelim), Long( sDims ) ) );\r\n    EndIf;\r\n\r\n    # Check if sDim has wildcard\r\n    If( Scan( '*', sDim ) = 0);\r\n        # Validate dimension\r\n        If( DimensionExists(sDim) = 0 );\r\n            nErrors = 1;\r\n            sMessage = Expand( 'Dimension \"%sDim%\" does not exist.' );\r\n            LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n            If( pStrictErrorHandling = 1 );\r\n                ProcessQuit;\r\n            Else;\r\n                ProcessBreak;\r\n            EndIf;\r\n        Else;\r\n            # Loop through attributes in pAttr\r\n            sAttrs = pAttr;\r\n            nDelimiterIndex = 1;\r\n            sAttrDim = '}ElementAttributes_'|sDim ;\r\n            While( nDelimiterIndex <> 0 );\r\n\r\n                nDelimiterIndex = Scan( pDelim, sAttrs );\r\n                If( nDelimiterIndex = 0 );\r\n                    sAttr   = sAttrs;\r\n                Else;\r\n                    sAttr   = Trim( SubSt( sAttrs, 1, nDelimiterIndex - 1 ) );\r\n                    sAttrs  = Trim( Subst( sAttrs, nDelimiterIndex + Long(pDelim), Long( sAttrs ) ) );\r\n                EndIf;\r\n\r\n                # Check to see if attribute already exists.\r\n                If( Dimix( sAttrDim , sAttr ) = 1 );\r\n                    nErrors = 1;\r\n                    sMessage = 'Attribute ' | sAttr | ' already exist in dimension ' | sDim;\r\n                    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n                Else;\r\n                    AttrInsert( sDim , pPrevAttr , sAttr , pAttrType ) ;\r\n                    If( pLogOutput = 1 );\r\n                        LogOutput( 'INFO', Expand( 'Attribute \"%sAttr%\" added to dimension %sDim%.' ) );\r\n                    EndIf;\r\n                Endif;\r\n            End;\r\n        EndIf;\r\n    Else;\r\n        # Create subset using Wildcard to loop through dimensions in pDim with wildcard\r\n        sDimExp = '\"'|sDim|'\"';\r\n        sMdx = '{TM1FILTERBYPATTERN( EXCEPT ( TM1SUBSETALL( [}Dimensions] ) , TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions] ) , \"*:*\") ) ,'| sDimExp | ')}';\r\n        If( SubsetExists( '}Dimensions' , cTempSub ) = 1 );\r\n            # If a delimited list of attr names includes wildcards then we may have to re-use the subset multiple times\r\n            SubsetMDXSet( '}Dimensions' , cTempSub, sMDX );\r\n        Else;\r\n            # temp subset, therefore no need to destroy in epilog\r\n            SubsetCreatebyMDX( cTempSub, sMDX, '}Dimensions' , 1 );\r\n        EndIf;\r\n\r\n        # Loop through dimensions in subset created based on wildcard\r\n        nCountDim = SubsetGetSize( '}Dimensions' , cTempSub );\r\n        While( nCountDim >= 1 );\r\n\r\n            sDim = SubsetGetElementName( '}Dimensions' , cTempSub, nCountDim );\r\n            # Validate dimension name\r\n            If( DimensionExists(sDim) = 0 );\r\n                nErrors = 1;\r\n                sMessage = Expand( 'Dimension \"%sDim%\" does not exist.' );\r\n                LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n                If( pStrictErrorHandling = 1 );\r\n                    ProcessQuit;\r\n                Else;\r\n                    ProcessBreak;\r\n                EndIf;\r\n            Else;\r\n            # Loop through attributes in pAttr\r\n                sAttrs = pAttr;\r\n                nDelimiterIndex = 1;\r\n                sAttrDim = '}ElementAttributes_'|sDim ;\r\n                While( nDelimiterIndex <> 0 );\r\n\r\n                    nDelimiterIndex = Scan( pDelim, sAttrs );\r\n                    If( nDelimiterIndex = 0 );\r\n                        sAttr   = sAttrs;\r\n                    Else;\r\n                        sAttr   = Trim( SubSt( sAttrs, 1, nDelimiterIndex - 1 ) );\r\n                        sAttrs  = Trim( Subst( sAttrs, nDelimiterIndex + Long(pDelim), Long( sAttrs ) ) );\r\n                    EndIf;\r\n\r\n                    # Check to see if attribute already exists.\r\n                    If( Dimix( sAttrDim , sAttr ) = 1 );\r\n                        nErrors = 1;\r\n                        sMessage = 'Attribute ' | sAttr | ' already exist in dimension ' | sDim;\r\n                        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n                    Else;\r\n                        AttrInsert( sDim , pPrevAttr , sAttr , pAttrType ) ;\r\n                        If( pLogOutput = 1 );\r\n                            LogOutput( 'INFO', Expand( 'Attribute \"%sAttr%\" added to dimension %sDim%.' ) );\r\n                        EndIf;\r\n                    Endif;\r\n                End;\r\n            EndIf;\r\n\r\n            nCountDim = nCountDim - 1;\r\n        End;\r\n    EndIf;\r\n\r\n\r\nEnd;\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}