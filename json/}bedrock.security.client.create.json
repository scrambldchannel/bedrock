{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n\r\n### Update password & Alias\r\n\r\nIf( nErrors = 0 );\r\n\r\n  sAliases  = pAlias;\r\n  sClients  = pClient;\r\n  nDelimiterIndex = 1;\r\n\r\n  While( nDelimiterIndex > 0 );\r\n    nDelimiterIndex = Scan( pDelim, sAliases );\r\n    If( nDelimiterIndex = 0 );\r\n      sAlias    = sAliases;\r\n    Else;\r\n      sAlias    = Trim( SubSt( sAliases, 1, nDelimiterIndex - 1 ) );\r\n      sAliases  = Trim( Subst( sAliases, nDelimiterIndex + Long(pDelim), Long( sAliases ) ) );\r\n    EndIf;\r\n    nDelimiterIndex = Scan( pDelim, sClients );\r\n    If( nDelimiterIndex = 0 );\r\n      sClient   = sClients;\r\n    Else;\r\n      sClient   = Trim( SubSt( sClients, 1, nDelimiterIndex - 1 ) );\r\n      sClients  = Trim( Subst( sClients, nDelimiterIndex + Long(pDelim), Long( sClients ) ) );\r\n    EndIf;\r\n\r\n    If( DimIx( '}Clients', sClient ) > 0 );\r\n      AssignClientPassword( sClient, pPassword );\r\n      If( sAlias @<> '' );\r\n        AttrPutS( sAlias, '}Clients', sClient, '}TM1_DefaultDisplayValue', 1 );\r\n      EndIf;\r\n    EndIf;\r\n  End;\r\n\r\nEndIf;\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully added user(s) %pClient% to }Clients Dimension.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.security.client.create",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pClient",
            "Prompt": "REQUIRED: Single user name or list of users separated by delimiter",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pAlias",
            "Prompt": "OPTIONAL: single or delimited list of }TM1_DefaultDisplayValue alias to assign to user (if list of users then size of list of aliases must be the same!)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pPassword",
            "Prompt": "OPTIONAL: Initial Password",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: Delimiter (Blank = &)",
            "Type": "String",
            "Value": "&"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.security.client.create', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n\t    'pClient', '', 'pAlias', '', 'pPassword', '', 'pDelim', '&'\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process will create clients, assign a password and max ports.\r\n\r\n# Use case: Intended for production.\r\n# 1/ Create clients for multiple new hires simultaneously.\r\n\r\n# Note:\r\n# Naturally, a client (pClient) is mandatory otherwise the process will abort.\r\n# - Multiple clients can be specified separated by a delimiter.\r\n# - If client already exists then the process will not attempt to re-create it but will reset password and max ports.\r\n# - Each client will have to be assigned to a group afterwards.\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName       = GetProcessName();\r\ncTimeStamp          = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt          = NumberToString( INT( RAND( ) * 1000 ));\r\ncUserName           = TM1User();\r\ncMsgErrorLevel      = 'ERROR';\r\ncMsgErrorContent    = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo            = 'Process:%cThisProcName% run with parameters pClient:%pClient%, pPassword:******, pDelim:%pDelim%.' ;\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors             = 0;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelim @= '' );\r\n  pDelim            = '&';\r\nEndIf;\r\n\r\n# If no clients have been specified then terminate process\r\nIf( Trim( pClient ) @= '' );\r\n  nErrors           = 1;\r\n  sMessage          = 'No clients specified.';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n# Alias\r\nIf( pAlias @<> '' );\r\n    If( DimensionExists( '}ElementAttributes_}Clients' ) = 0 );\r\n        AttrInsert( '}Clients', '', '}TM1_DefaultDisplayValue', 'A' );\r\n    ElseIf( DimIx( '}ElementAttributes_}Clients', '}TM1_DefaultDisplayValue' ) = 0 );\r\n        AttrInsert( '}Clients', '', '}TM1_DefaultDisplayValue', 'A' );\r\n    EndIf;\r\nEndIf;\r\n\r\n### Split pClient into individual Clients and add ###\r\nsClients            = pClient;\r\nnDelimiterIndex     = 1;\r\nWhile( nDelimiterIndex <> 0 );\r\n    nDelimiterIndex   = Scan( pDelim, sClients );\r\n    If( nDelimiterIndex = 0 );\r\n        sClient         = sClients;\r\n    Else;\r\n        sClient         = Trim( SubSt( sClients, 1, nDelimiterIndex - 1 ) );\r\n        sClients        = Trim( Subst( sClients, nDelimiterIndex + Long(pDelim), Long( sClients ) ) );\r\n    EndIf;\r\n    # Don't attempt to add a blank client\r\n    If( sClient @<> '' );\r\n        If( DimIx( '}Clients', sClient ) = 0 );\r\n            If( nErrors = 0 );\r\n                AddClient( sClient );\r\n            EndIf;\r\n        EndIf;\r\n    EndIf;\r\nEnd;\r\n\r\nIf( nErrors = 0 );\r\n    DimensionSortOrder( '}Clients', 'ByName', 'Ascending', 'ByName' , 'Ascending' );\r\nEndIf;\r\n\r\n\r\n### End Prolog ###",
    "Variables": []
}