{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully published view %pView% in cube %pCube% created by cient %pClient%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.cube.view.publish",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pCube",
            "Prompt": "REQUIRED: Cube Name",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pView",
            "Prompt": "REQUIRED: Private View Name",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pSubPublish",
            "Prompt": "OPTIONAL: Publish Private Subsets? (Boolean 1=Yes)",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pOverwrite",
            "Prompt": "OPTIONAL: Overwrite Existing Named View? (Boolean 1=Yes)",
            "Type": "Numeric",
            "Value": "0"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.cube.view.publish', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pCube', '', 'pView', '',\r\n    \t'pSubPublish', 1, 'pOverwrite', 0\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process converts a private view to a public view for the named client.\r\n#\r\n# Use case: Intended for development/prototyping or production.\r\n# 1. Make private view public to enable public consumption.\r\n#\r\n# Note:\r\n# * A valid cube name pCube is mandatory otherwise the process will abort.\r\n# * Also, a valid view name pView is mandatory otherwise the process will abort.\r\n# * This process must be run by the user owning the private view; it canot be run by another user.\r\n# * If the view contains private subsets they must also be made public or the view publish will fail.\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n\r\n### Constants ###\r\ncThisProcName       = GetProcessName();\r\ncUserName           = TM1User();\r\ncTimeStamp          = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt          = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSubset         = cThisProcName | '_' | cTimeStamp | '_' | cRandomInt;\r\ncTempFile           = GetProcessErrorFileDirectory | cTempSubset | '.csv';\r\nsMessage            = \t'';\r\ncMsgErrorLevel      = 'ERROR';\r\ncMsgErrorContent    = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo            = 'Process:%cThisProcName% run with parameters pCube:%pCube%, pView:%pView%, pSubPublish:%pSubPublish%, pOverwrite:%pOverwrite%.' ;\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\n# create friendly name for user handle\r\nIf( DimIx( '}ElementAttributes_}Clients', '}TM1_DefaultDisplayValue' ) > 0 );\r\n    pClient = AttrS( '}Clients', cUserName, '}TM1_DefaultDisplayValue' );\r\n    If( pClient @= '' );\r\n        pClient = cUserName;\r\n    EndIf;\r\nElse;\r\n    pClient = cUserName;\r\nEndIf;\r\n\r\n# Validate Cube\r\nIf( Trim( pCube ) @= '' );\r\n    sMessage = 'No cube specified';\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIf( CubeExists( pCube ) = 0 );\r\n    sMessage = Expand('Cube %pCube% does not exist on server');\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate view\r\nIf( Trim( pView ) @= '' );\r\n    sMessage = 'No view specified';\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# No way to check if private view exists except via file system.\r\n# Could include data directory param and concatenate with user, cube and view to check\r\n# if private view exists to handle error in the case that private view does not exist\r\n\r\n# Check for valid view name, subset publish and overwrite parameters\r\nIf( pSubPublish <> 0 & pSubPublish <> 1 );\r\n    sMessage = 'Invalid publish private subsets selection: ' | NumberToString( pSubPublish );\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIf( pOverwrite <> 0 & pOverwrite <> 1 );\r\n    sMessage = 'Invalid overwrite existing public view selection: ' | NumberToString( pOverwrite );\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIf( pOverwrite = 0 & ViewExists( pCube, pView ) = 1 );\r\n    # If NOT overwriting current public view AND view of the same name exists then cause minor error ( major error if not handled )\r\n    sMessage = 'Public view of same name already exists and Overwrite=0 specified';\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Publish the view ( and any private subsets ) ###\r\nPublishView( pCube, pView, pSubPublish, pOverwrite );\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}