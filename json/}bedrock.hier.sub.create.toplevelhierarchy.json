{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully created subset %pSub% from dimension %pDim%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.hier.sub.create.toplevelhierarchy",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pDim",
            "Prompt": "REQUIRED: Dimension name",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pHier",
            "Prompt": "OPTIONAL: Hierarchy name (default if blank = same named hierarchy)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pSub",
            "Prompt": "REQUIRED: Subset name",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pConvertToStatic",
            "Prompt": "OPTIONAL: Boolean: 1 = Convert to Static Subset",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pAlias",
            "Prompt": "OPTIONAL: Set Alias for Subset",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pTemp",
            "Prompt": "OPTIONAL: Use temporary objects? (Boolean 1=True)",
            "Type": "Numeric",
            "Value": "1"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.hier.sub.create.toplevelhierarchy', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pDim', '', 'pHier', '', 'pSub', '',\r\n    \t'pConvertToStatic', 1, 'pAlias', '', 'pTemp', 1\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n\r\n# This process will Create a Top Level Hierarchy by N-Level Elements\r\n# that is a subset of all \"top node\" elements ( Consolidated elements that have no parents )\r\n\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName       = GetProcessName();\r\ncUserName           = TM1User();\r\ncTimeStamp          = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt          = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub            = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel      = 'ERROR';\r\ncMsgErrorContent    = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo            = 'Process:%cThisProcName% run with parameters pDim:%pDim%, pHier:%pHier%, pSub:%pSub%, pConvertToStatic:%pConvertToStatic%, pAlias:%pAlias%, pTemp:%pTemp%.';\r\ncAttributeDim       = '}ElementAttributes_' | pDim;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\nIf( Scan( ':', pDim ) > 0 & pHier @= '' );\r\n    # A hierarchy has been passed as dimension. Handle the input error by splitting dim:hier into dimension & hierarchy\r\n    pHier       = SubSt( pDim, Scan( ':', pDim ) + 1, Long( pDim ) );\r\n    pDim        = SubSt( pDim, 1, Scan( ':', pDim ) - 1 );\r\nEndIf;\r\n\r\n# Validate dimension\r\nIf( Trim( pDim ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No dimension specified';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\nIf( DimensionExists( pDim ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid dimension: ' | pDim;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n\r\n## Validate Hierarchy\r\nIF(pHier @= 'Leaves' );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid  Hierarchy: ' | pDim |':'|pHier;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIf( Trim( pHier ) @= '' );\r\n  sHier = pDim;\r\nElse;\r\n  sHier = pHier;\r\nEndIf;\r\n\r\nIF(HierarchyExists(pDim, sHier ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid dimension Hierarchy: ' | pDim |':'|sHier;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIf( DnLev( pDim|':'|sHier ) <= 1 );\r\n  # Create by MDX would return empty set and fail so need to abort here\r\n  nErrors = 1;\r\n  sMessage = 'Cannot continue, dimension hierarchy is flat: ' | pDim|':'|sHier;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIF;\r\n\r\n\r\n# Validate subset\r\nIf( Trim( pSub ) @= '' );\r\n  pSub = 'Top Level Hierarchies';\r\nEndIf;\r\n\r\n## Validate Alias\r\nsDimAttr = '}ElementAttributes_' | pDim;\r\nIF(pAlias @<> '' );\r\n  IF(DimensionExists( sDimAttr ) = 0 );\r\n    sMessage = 'No attributes exist for the dimension: ' | pDim;\r\n    pAlias = '';\r\n  EndIf;\r\n\r\n  IF(DIMIX( sDimAttr, pAlias ) = 0 );\r\n    sMessage = 'The Alias: ' | pAlias | ' does not exist in the dimension: ' | pDim;\r\n    pAlias = '';\r\n  EndIf;\r\n\r\n  IF(DTYPE( sDimAttr, pAlias ) @<> 'AA' );\r\n    sMessage = 'The Alias: ' | pAlias | ' is not an Alias in the dimension: ' | sDimAttr;\r\n    pAlias = '';\r\n  EndIf;\r\nENDIF;\r\n\r\n## Validate pTemp\r\nIF( pTemp <> 0 & pTemp <> 1 );\r\n    nErrors = 1;\r\n    sMessage = 'Wrong parameter pTemp value (only 0 or 1 accepted).';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n### MDX for creating subset ###\r\n\r\nsMDX = '{EXCEPT( {FILTER( {TM1SUBSETALL( [' | pDim|':'|sHier | '] )}, MemberToStr( [' |\r\n       pDim|':'|sHier | '].CurrentMember.Parent ) = \"\" )},' |\r\n       '{TM1FILTERBYLEVEL( {TM1SUBSETALL( [' | pDim|':'|sHier | '] )},0 )} )}';\r\n\r\n\r\n### Create Subset ###\r\n\r\nIf( nErrors = 0 );\r\n\r\n  # For a dynamic subset, the original subset MUST be destroyed first or the MDX will fail\r\n  If( pConvertToStatic = 0 );\r\n    If( HierarchySubsetExists( pDim, sHier, pSub ) = 1 );\r\n      HierarchySubsetDestroy( pDim, sHier, pSub );\r\n    EndIf;\r\n    SubsetCreateByMDX( pSub, sMDX, pDim, pTemp );\r\n\r\n  # For a static subset the subset does not need to be destroyed but its elements need to be deleted first\r\n  Else;\r\n    If( HierarchySubsetExists( pDim, sHier, pSub ) = 1 );\r\n      HierarchySubsetDeleteAllElements( pDim, sHier, pSub );\r\n    Else;\r\n      HierarchySubsetCreate( pDim, sHier, pSub, pTemp );\r\n    EndIf;\r\n\r\n    # Create a temporary MDX subset for processing\r\n    sSubsetMDX = cThisProcName |'.' | NumberToString( Int( Rand() * 100000 ) );\r\n    # It is unlikely that the subset already exists due to the random number in the subset name\r\n    # However, it the SubsetDestroy is included in case the same random number is generated\r\n    If( HierarchySubsetExists( pDim, sHier, sSubsetMDX ) = 1 );\r\n      HierarchySubsetDestroy( pDim, sHier, sSubsetMDX );\r\n    EndIf;\r\n    SubsetCreateByMDX( sSubsetMDX, sMDX, pDim, pTemp );\r\n\r\n    # Transfer the elements from the MDX subset to the static subset\r\n    nSubsetSize = HierarchySubsetGetSize( pDim, sHier,sSubsetMDX );\r\n    nSubsetIndex = 0;\r\n    While( nSubsetIndex < nSubsetSize );\r\n      nSubsetIndex = nSubsetIndex + 1;\r\n      sTemp = HierarchySubsetElementGetIndex (pDim, sHier, sSubsetMDX, '', nSubsetIndex);\r\n      sElement = HierarchySubsetGetElementName( pDim, sHier, sSubsetMDX, nSubsetIndex );\r\n      HierarchySubsetElementInsert( pDim, sHier, pSub, sElement, nSubsetIndex );\r\n    End;\r\n  EndIf;\r\n\r\nEndIf;\r\n\r\n### Set Alias ##\r\nIF(pAlias @<> '' );\r\n  If( nErrors = 0 );\r\n    HierarchySubsetAliasSet( pDim, pHier, pSub, pAlias );\r\n  EndIf;\r\nENDIF;\r\n\r\n### End Prolog ###",
    "Variables": []
}