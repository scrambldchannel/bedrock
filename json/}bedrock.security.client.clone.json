{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n\r\n### Update group memberships ###\r\nsClients            = Trim( pTgtClient );\r\nnDelimiterIndex     = 1;\r\n\r\n# loop delimited string of target clients\r\nWhile( nDelimiterIndex <> 0 );\r\n    nDelimiterIndex = Scan( pDelim, sClients );\r\n    If( nDelimiterIndex = 0 );\r\n        sClient     = sClients;\r\n    Else;\r\n        sClient     = Trim( SubSt( sClients, 1, nDelimiterIndex - 1 ) );\r\n        sClients    = Trim( Subst( sClients, nDelimiterIndex + Long(pDelim), Long( sClients ) ) );\r\n    EndIf;\r\n    If( DimIx( '}Clients', sClient ) >= 1 );\r\n        IF (pPassword @<>'');\r\n          sPassExists = CellGetS('}ClientProperties', sClient, 'PASSWORD');\r\n          IF (sPassExists @='');\r\n            AssignClientPassword( sClient, pPassword );\r\n          EndIf;\r\n        EndIf;\r\n        sClient     = DimensionElementPrincipalName( '}Clients', sClient );\r\n        # loop all security groups\r\n        nGroupIndex = 1;\r\n        nMaxGroups  = DimSiz( '}Groups' );\r\n        While( nGroupIndex <= nMaxGroups );\r\n            sGroup  = DimNm( '}Groups', nGroupIndex );\r\n            If( sGroup @= CellGetS( '}ClientGroups', pSrcClient, sGroup ) );\r\n                AssignClientToGroup( sClient, sGroup );\r\n            Else;\r\n                If( pMode @= 'REPLACE' );\r\n                    # don't need to check if user in group. If user not in group then no error with RemoveClientFromGroup function\r\n                    RemoveClientFromGroup( sClient, sGroup );\r\n                EndIf;\r\n            EndIf;\r\n            nGroupIndex = nGroupIndex + 1;\r\n            # exit loop of }Groups\r\n        End;\r\n    EndIf;\r\n    # exit loop of target clients\r\nEnd;\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully cloned %pSrcClient% to %pTgtClient% by %pMode%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.security.client.clone",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pSrcClient",
            "Prompt": "REQUIRED: Source Client",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pTgtClient",
            "Prompt": "REQUIRED: List of Target Clients Separated by Delimiter",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pMode",
            "Prompt": "OPTIONAL: Mode REPLACE or ADD (default = REPLACE)",
            "Type": "String",
            "Value": "REPLACE"
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: Delimiter (Use for a list of target users. Defaults to & if blank.)",
            "Type": "String",
            "Value": "&"
        },
        {
            "Name": "pPassword",
            "Prompt": "OPTIONAL: Initial Password",
            "Type": "String",
            "Value": ""
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.security.client.clone', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pSrcClient', '', 'pTgtClient', '',\r\n    \t'pMode', 'REPLACE', 'pDelim', '&'\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process will copy security from one user to another. Target client(s) will be created if it doesn't exist.\r\n\r\n# Use case: Intended for production.\r\n# 1/ When a company hires new employees their profile can be set up by cloning an existing employee.\r\n\r\n# Note:\r\n# Naturally, a valid source client (pSrcClient) is mandatory otherwise the process will abort.\r\n# Also, a valid target client(s) (pTgtClient) must be specified, otherwise the process will abort:\r\n# - Multiple target clients can be specified separated by a delimiter.\r\n# - If target client doesn't already exist then Bedrock.Security.Client.Create will be called.\r\n# - The process has 2 modes REPLACE (default) clears any existing group memberships. ADD only adds new ones.\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n\r\n### Constants ###\r\ncThisProcName       = GetProcessName();\r\ncTimeStamp          = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt          = NumberToString( INT( RAND( ) * 1000 ));\r\ncUserName           = TM1User();\r\ncMsgErrorLevel      = 'ERROR';\r\ncMsgErrorContent    = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo            = 'Process:%cThisProcName% run with parameters pSrcClient:%pSrcClient%, pTgtClient:%pTgtClient%, pMode:%pMode%, pDelim:%pDelim%.' ;\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors             = 0;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelim @= '' );\r\n    pDelim          = '&';\r\nEndIf;\r\n\r\n# If blank mode specified then convert to default\r\nIf( pMode @= '' );\r\n    pMode           = 'REPLACE';\r\nEndIf;\r\n\r\n# If unsupported mode specified then abort\r\nIf( pMode @= 'ADD' % pMode @= 'REPLACE' );\r\n    # all is OK\r\nElse;\r\n    nErrors         = 1;\r\n    sMessage        = 'Invalid mode specified. Must be ADD or REPLACE';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# If no source client has been specified then terminate process\r\nIf( Trim( pSrcClient ) @= '' );\r\n    nErrors         = 1;\r\n    sMessage        = 'No source client specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIf( DimIx( '}Clients', pSrcClient ) = 0 );\r\n    nErrors         = 1;\r\n    sMessage        = 'Source client does not exist';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElse;\r\n    pSrcClient      = DimensionElementPrincipalName( '}Clients', pSrcClient );\r\nEndIf;\r\n\r\n# If no target clients have been specified then terminate process\r\nIf( Trim( pTgtClient ) @= '' );\r\n    nErrors         = 1;\r\n    sMessage        = 'No target client(s) specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIf( DimIx( '}Clients', pTgtClient ) > 0 );\r\n    pTgtClient      = DimensionElementPrincipalName( '}Clients', pTgtClient );\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Split pClients into individual Clients and add only if they don't exist ###\r\n\r\nsClients            = Trim( pTgtClient );\r\nnDelimiterIndex     = 1;\r\n\r\n# loop delimited string of target clients\r\nWhile( nDelimiterIndex <> 0 );\r\n    nDelimiterIndex = Scan( pDelim, sClients );\r\n    If( nDelimiterIndex = 0 );\r\n        sClient     = sClients;\r\n    Else;\r\n        sClient     = Trim( SubSt( sClients, 1, nDelimiterIndex - 1 ) );\r\n        sClients    = Trim( Subst( sClients, nDelimiterIndex + Long(pDelim), Long( sClients ) ) );\r\n    EndIf;\r\n    # Don't attempt to add a blank client\r\n    If( sClient @<> '' );\r\n        If( DimIx( '}Clients', sClient ) = 0 );\r\n            ExecuteProcess( '}bedrock.security.client.create', 'pStrictErrorHandling', pStrictErrorHandling, 'pClient', sClient);\r\n        EndIf;\r\n    EndIf;\r\nEnd;\r\n\r\n\r\n### End Prolog ###",
    "Variables": []
}