{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully deleted cube %pCube%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###\r\n",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.cube.delete",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pCube",
            "Prompt": "REQUIRED: List of Cubes to Delete (Separated by Delimiter Accepts Wild card)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: Delimiter",
            "Type": "String",
            "Value": "&"
        },
        {
            "Name": "pCtrlObj",
            "Prompt": "OPTIONAL: To Delete control cube 1=Delete control objects 0=Do not delete control objects Default value 0",
            "Type": "Numeric",
            "Value": "0"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.cube.delete', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pCube', '', 'pDelim', '&',\r\n    \t'pCtrlObj', 0\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process deletes cube(s).\r\n\r\n# Use case: Intended for cleaning up after development/prototyping.\r\n# 1\\ Delete all cubes not needed after Go Live.\r\n\r\n# Note:\r\n# A list of cubes can be specified and/or wild cards can be used.\r\n# Naturally valid cube name(s) must be specified otherwise the process will abort.\r\n# By default (pCtrlObj) the process will not delete control cubes (i.e. attributes, security etc).\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\n\r\ncThisProcName = GetProcessName();\r\ncUserName = TM1User();\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub          = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pCube:%pCube%, pDelim:%pDelim%, pCtrlObj:%pCtrlObj%.' ;\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelim @= '' );\r\n  pDelim = '&';\r\nEndIf;\r\n\r\n# If no cubes have been specified, then log error message\r\nIf( Trim( pCube ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No cubes specified';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n# If no wildcard and no delimiter, log error message if cubename is invalid\r\nIf( Scan( pDelim, pCube ) = 0 & Scan( '*', pCube ) = 0  & Trim( pCube ) @<> '' & CubeExists( pCube ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Cubename ' | pCube | ' is invalid';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Split parameter into individual cubes and delete ###\r\nsCubes = pCube;\r\nnDelimiterIndex = 1;\r\nsMdx = '';\r\n\r\nWhile( nDelimiterIndex <> 0 );\r\n  nDelimiterIndex = Scan( pDelim, sCubes );\r\n  If( nDelimiterIndex = 0 );\r\n    sCube = sCubes;\r\n  Else;\r\n    sCube = Trim( SubSt( sCubes, 1, nDelimiterIndex - 1 ) );\r\n    sCubes = Trim( Subst( sCubes, nDelimiterIndex + Long(pDelim), Long( sCubes ) ) );\r\n  EndIf;\r\n\r\n  # Check if a wildcard has been used to specify the Cube name.\r\n  # If it hasn't then just delete the Cube if it exists\r\n  # If it has then create cubes subset using Wildcard expression in Mdx\r\n  If( Scan( '*', sCube ) = 0 );\r\n    If( CubeExists( sCube ) = 1 );\r\n      If(Subst(sCube,1,1) @= '}');\r\n        If(pCtrlObj = 1);\r\n          CubeDestroy( sCube );\r\n        Endif;\r\n      Else;\r\n        CubeDestroy( sCube );\r\n      Endif;\r\n    Endif;\r\n  Else;\r\n      # Create subset of cubes using Wildcard\r\n    sCubeExp = '\"'|sCube|'\"';\r\n    IF( pCtrlObj = 1 );\r\n      sMdxPart = '{TM1FILTERBYPATTERN( TM1SUBSETALL( [}Cubes] ) ,'| sCubeExp | ')}';\r\n    ELSE;\r\n      sMdxPart = '{TM1FILTERBYPATTERN( EXCEPT( TM1SUBSETALL( [}Cubes] ) , TM1FILTERBYPATTERN( TM1SUBSETALL( [}Cubes] ) , \"}*\" ) ) ,'| sCubeExp | ')}';\r\n    ENDIF;\r\n    IF( sMdx @= '');\r\n      sMdx = sMdxPart;\r\n    ELSE;\r\n      sMdx = sMdx | ' + ' | sMdxPart;\r\n    ENDIF;\r\n\r\n    If( SubsetExists( '}Cubes' , cTempSub ) = 1 );\r\n        # If a delimited list of cube names includes wildcards then we may have to re-use the subset multiple times\r\n        SubsetMDXSet( '}Cubes' , cTempSub, sMDX );\r\n    Else;\r\n        # temp subset, therefore no need to destroy in epilog\r\n        SubsetCreatebyMDX( cTempSub, sMDX, '}Cubes' , 1 );\r\n    EndIf;\r\n\r\n    # Loop through cubes in subset created based on wildcard\r\n    nCountCubes = SubsetGetSize( '}Cubes' , cTempSub );\r\n    While( nCountCubes >= 1 );\r\n      sCurrCube = SubsetGetElementName( '}Cubes' , cTempSub, nCountCubes );\r\n      # Validate cube name\r\n      If( CubeExists( sCurrCube ) = 1 );\r\n        # Destroy Cube\r\n        If(Subst(sCube,1,1) @= '}');\r\n          If(pCtrlObj = 1);\r\n            CubeDestroy( sCurrCube );\r\n          Endif;\r\n        Else;\r\n          CubeDestroy( sCurrCube );\r\n        Endif;\r\n      Endif;\r\n        nCountCubes = nCountCubes - 1;\r\n    End;\r\n  EndIf;\r\n\r\nEnd;\r\n\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}