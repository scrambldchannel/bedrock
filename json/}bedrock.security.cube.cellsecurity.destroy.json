{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully detsroyed cell security for cube  %pCube%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\nsProcessReturnCode = pCube;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.security.cube.cellsecurity.destroy",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pCube",
            "Prompt": "REQUIRED: List of Cubes (Separated by Delimiter Accepts Wild card)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: Delimiter (Defaults to & if left blank.)",
            "Type": "String",
            "Value": "&"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.security.cube.cellsecurity.destroy', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n\t    'pCube', '', 'pDelim', '&'\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process will destroy the cell security cube(s) for the specified cube(s).\r\n\r\n# Use case: Intended for development.\r\n# 1/ Remove cell level security for one or more cubes.\r\n\r\n# Note:\r\n# Naturally, a valid cube (pCube) is mandatory otherwise the process will abort.\r\n# If the cube does not have cell security set up, it will skip that cube but log an error.\r\n# Multiple cubes can be specified separated by the pDelim or by using wildcards (*).\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName = GetProcessName();\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\nDatasourceASCIIQuoteCharacter = '';\r\ncUserName         = TM1User();\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% Message:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pCube:%pCube%, pDelim:%pDelim%.' ;\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n## check operating system\r\nIf( SubSt( GetProcessErrorFileDirectory, 2, 1 ) @= ':' );\r\n  sOS = 'Windows';\r\n  sOSDelim = '\\';\r\nElseIf( Scan( '/', GetProcessErrorFileDirectory ) > 0 );\r\n  sOS = 'Linux';\r\n  sOSDelim = '/';\r\nElse;\r\n  sOS = 'Windows';\r\n  sOSDelim = '\\';\r\nEndIf;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelim @= '' );\r\n    pDelim = '&';\r\nEndIf;\r\n\r\n# If no cubes have been specified then terminate process\r\nIf( Trim( pCube ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No cube(s) specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    Else;\r\n        ProcessBreak;\r\n    EndIf;\r\nEndIf;\r\n\r\n### Split pCubes into individual Cubes  ###\r\nsCubes                  = pCube;\r\nnDelimiterIndex         = 1;\r\nWhile( nDelimiterIndex <> 0 );\r\n    nDelimiterIndex     = Scan( pDelim, sCubes );\r\n    If( nDelimiterIndex = 0 );\r\n        sCube           = sCubes;\r\n    Else;\r\n        sCube           = Trim( SubSt( sCubes, 1, nDelimiterIndex - 1 ) );\r\n        sCubes          = Trim( Subst( sCubes, nDelimiterIndex + Long(pDelim), Long( sCubes ) ) );\r\n    EndIf;\r\n\r\n    # Check if a wildcard has been used to specify the Cube name.\r\n    # If it hasn't then just delete the Cube if it exists\r\n    # If it has then search the relevant Cube folder to find the matches\r\n    If( Scan( '*', sCube ) = 0 );\r\n        If( CubeExists( sCube ) = 1 );\r\n            If(CubeExists( '}CellSecurity_' | sCube ) = 1);\r\n                nRet = CellSecurityCubeDestroy( sCube );\r\n                If( nRet = 1 );\r\n                    sMessage = '}CellSecurity_' | sCube | ' successfully destroyed.';\r\n                    LogOutput( 'INFO', Expand( cMsgErrorContent ) );\r\n                Else;\r\n                    nErrors = 1;\r\n                    sMessage = 'Error. Could not destroy }CellSecurity_' | sCube;\r\n                    LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n                EndIf;\r\n            Endif;\r\n        Endif;\r\n    Else;\r\n        # Wildcard search string\r\n        sSearch                     = Expand('.%sOSDelim%%sCube%.cub');\r\n\r\n        # Find all Cubes that match search string\r\n        sFilename                   = WildcardFileSearch( sSearch, '' );\r\n        While( sFilename @<> '' );\r\n            # Trim .cub off the filename\r\n            sCube                   = SubSt( sFilename, 1, Long( sFilename ) - 4 );\r\n            # Destroy Cube\r\n            If( CubeExists( sCube ) = 1 );\r\n                If(CubeExists( '}CellSecurity_' | sCube ) = 1);\r\n                    nRet            = CellSecurityCubeDestroy( sCube );\r\n                    If( nRet = 1 );\r\n                        sMessage    = '}CellSecurity_' | sCube | ' successfully destroyed.';\r\n                        LogOutput( 'INFO', Expand( cMsgErrorContent ) );\r\n                    Else;\r\n                        nErrors     = 1;\r\n                        sMessage    = 'Error. Could not destroy }CellSecurity_' | sCube;\r\n                        LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n                    EndIf;\r\n                Endif;\r\n            Endif;\r\n            sFilename               = WildcardFileSearch( sSearch, sFilename );\r\n        End;\r\n    EndIf;\r\n\r\nEnd;\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}