{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully deleted dimensions %pDim%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.dim.delete",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pDim",
            "Prompt": "REQUIRED: Dimension (Delimited list & wildcards (*) acceptable)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDelim",
            "Prompt": "REQUIRED: delimiter character for attribute list. (default value if blank = '&')",
            "Type": "String",
            "Value": "&"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.dim.delete', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n\t    'pDim', '', 'pDelim', '&'\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~ Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0 ~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process deletes a dimension, list of dimensions, or set of dimensions specified by wildcard name match.\r\n\r\n# Use case: Intended for development/prototyping.\r\n# 1. During active agile development to remove dimensions due to renaming, change of requirements, etc.\r\n# 2. Clean up unused dimensions prior to system Go Live.\r\n\r\n# Note:\r\n# * A valid dimension name pDim or list thereof is mandatory otherwise the process will abort.\r\n# * Attribute dimensions are deliberately excluded because these are automatically cleaned up by removing the base dimension.\r\n#EndRegion @DOC\r\n\r\n### Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName     = GetProcessName();\r\ncUserName         = TM1User();\r\ncTimeStamp        = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt        = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub          = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pDim:%pDim%, pDelim:%pDelim%.';\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\nIf( Trim( pDim ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No dimension specified.';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n## Default delimiter\r\nIf( pDelim     @= '' );\r\n    pDelim     = '&';\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n## Dimension delete\r\n# Loop through dimensions in pDim\r\nsDims               = Trim( pDim );\r\nnDimDelimiterIndex  = 1;\r\n# Get 1st dimension\r\nWhile( nDimDelimiterIndex <> 0 );\r\n    # Extract 1st dimension > sDim\r\n    nDimDelimiterIndex = Scan( pDelim, sDims );\r\n    If( nDimDelimiterIndex = 0 );\r\n        sDim        = sDims;\r\n    Else;\r\n        sDim        = Trim( SubSt( sDims, 1, nDimDelimiterIndex - 1 ) );\r\n        sDims       = Trim( Subst( sDims, nDimDelimiterIndex + Long(pDelim), Long( sDims ) ) );\r\n    EndIf;\r\n\r\n    # Check if sDim has wildcard\r\n    If( Scan( '*', sDim ) = 0);\r\n        # check if dim is used in a cube\r\n        sDimIsUsed ='';\r\n        nDimIsUsed = 0;\r\n        nCubes = DimSiz( '}Cubes' );\r\n        nCube = 1;\r\n        While(nCube <= nCubes);\r\n            sCube = DimNm( '}Cubes' , nCube );\r\n            nDim = 1;\r\n            While(TabDim(sCube,nDim)@<>'' & Subst( sCube , 1 , 1) @<>'}' );\r\n                sDimInCube = TABDIM(sCube,nDim);\r\n                If(sDimInCube@=sDim);\r\n                    sDimIsUsed = sDimIsUsed | sCube | ' ';\r\n                    nDimIsUsed = nDimIsUsed+1;\r\n                EndIf;\r\n                nDim = nDim + 1;\r\n            End;\r\n            nCube = nCube + 1;\r\n        End;\r\n\r\n        # Delete if it exists and is not being used in a cube\r\n        If( DimensionExists(sDim) = 0 );\r\n            nErrors = 1;\r\n            sMessage = Expand( 'Dimension \"%sDim%\" does not exist.' );\r\n            LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n        ElseIF( sDimIsUsed@='');\r\n            DimensionDestroy( sDim );\r\n        Else;\r\n            nErrors = 1;\r\n            sMessage = 'The dimension ' | sDim | ' could not be destroyed as it is being used for ' | NumberToString(nDimIsUsed)  | ' cube(s) :' | sDimIsUsed;\r\n            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n        Endif;\r\n    Else;\r\n        # Create subset of dimensions using Wildcard to loop through dimensions in pDim with wildcard\r\n        sDimExp = '\"'|sDim|'\"';\r\n        sMdx = '{TM1FILTERBYPATTERN( EXCEPT ( EXCEPT ( TM1SUBSETALL( [}Dimensions] ) , TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions] ) , \"*:*\") ), TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions] ) , \"}ElementAttributes_*\") ) ,'| sDimExp | ')}';\r\n        If( SubsetExists( '}Dimensions' , cTempSub ) = 1 );\r\n            # If a delimited list of dim names includes wildcards then we may have to re-use the subset multiple times\r\n            SubsetMDXSet( '}Dimensions' , cTempSub, sMDX );\r\n        Else;\r\n            # temp subset, therefore no need to destroy in epilog\r\n            SubsetCreatebyMDX( cTempSub, sMDX, '}Dimensions' , 1 );\r\n        EndIf;\r\n\r\n        # Loop through dimensions in subset created based on wildcard\r\n        nCountDim = SubsetGetSize( '}Dimensions' , cTempSub );\r\n        While( nCountDim >= 1 );\r\n            sDim = SubsetGetElementName( '}Dimensions' , cTempSub, nCountDim );\r\n            # check if dim is used in a cube\r\n            sDimIsUsed ='';\r\n            nDimIsUsed = 0;\r\n            nCubes = DimSiz( '}Cubes' );\r\n            nCube = 1;\r\n            While(nCube <= nCubes);\r\n                sCube = DimNm( '}Cubes' , nCube );\r\n                nDim = 1;\r\n                While(TabDim(sCube,nDim)@<>'' & Subst( sCube , 1 , 1) @<>'}' );\r\n                    sDimInCube = TABDIM(sCube,nDim);\r\n                    If(sDimInCube@=sDim);\r\n                        sDimIsUsed = sDimIsUsed | sCube | ' ';\r\n                        nDimIsUsed = nDimIsUsed+1;\r\n                    EndIf;\r\n                    nDim = nDim + 1;\r\n                End;\r\n                nCube = nCube + 1;\r\n            End;\r\n            # Delete if it exists and is not being used in a cube\r\n            If( DimensionExists(sDim) = 0 );\r\n                nErrors = 1;\r\n                sMessage = Expand( 'Dimension %sDim% does not exist.' );\r\n                LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n            ElseIF( sDimIsUsed@='');\r\n                DimensionDestroy( sDim );\r\n            Else;\r\n                nErrors = 1;\r\n                sMessage = 'The dimension ' | sDim | ' could not be destroyed as it is being used for ' | NumberToString(nDimIsUsed)  | ' cube(s) :' | sDimIsUsed;\r\n                LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n            Endif;\r\n            IF( SubsetGetSize( '}Dimensions' , cTempSub ) < nCountDim - 1 );\r\n              nCountDim = SubsetGetSize( '}Dimensions' , cTempSub );\r\n            ELSE;\r\n            nCountDim = nCountDim - 1;\r\n            ENDIF;\r\n        End;\r\n    EndIf;\r\n\r\nEnd;\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}