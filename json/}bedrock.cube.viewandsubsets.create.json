{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully created views and subsets for cube  %pCube%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.cube.viewandsubsets.create",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pCube",
            "Prompt": "REQUIRED: List of Cubes (Separated by Delimiter Accepts Wild card)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pView",
            "Prompt": "OPTIONAL: View (will default to pSubset if left blank)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pSub",
            "Prompt": "OPTIONAL: Subset (will default to pView if left blank)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDim",
            "Prompt": "REQUIRED: Dimension(s) to create empty processing subsets for (separated by delimiter) * = all",
            "Type": "String",
            "Value": "*"
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: List Delimiter (default value if blank = '&')",
            "Type": "String",
            "Value": "&"
        },
        {
            "Name": "pSuppressZero",
            "Prompt": "OPTIONAL: Suppress Zeros (Boolean Yes = 1)",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pSuppressConsol",
            "Prompt": "OPTIONAL: Suppress Calcs (Boolean Yes = 1)",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pSuppressRules",
            "Prompt": "OPTIONAL: Suppress Rules (Boolean Yes = 1)",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pTemp",
            "Prompt": "OPTIONAL: Make View Temporary (1=Temporary)",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pSubN",
            "Prompt": "OPTIONAL: Create N level subset for all dims not mentioned in pDim",
            "Type": "Numeric",
            "Value": "0"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.cube.viewandsubsets.create', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pCube', '', 'pView', '', 'pSub', '',\r\n    \t'pDim', '*', 'pDelim', '&',\r\n    \t'pSuppressZero', 1, 'pSuppressConsol', 1, 'pSuppressRules', 1,\r\n    \t'pTemp', 1, 'pSubN', 0\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process creates a processing view for the cube and for specified dimensions of the cube.\r\n\r\n# Use case: Intended for development/prototyping or in Production environment.\r\n# 1. Create a view with subsets of the same name that are empty.\r\n\r\n# Note:\r\n# Creates empty subsets and assigns the empty subsets to the view.\r\n# A subsequent process is required to insert elements into subsets otherwise the views will not contain any data.\r\n# Naturally, a valid cube name (pCube) is mandatory otherwise the process will abort.\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n\r\n### Constants ###\r\ncThisProcName     = GetProcessName();\r\ncUserName         = TM1User();\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = '%cThisProcName% : %sMessage% : %cUserName%';\r\ncMsgInfoLevel     =  'INFO';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pCube:%pCube%, pView:%pView%, pSubset:%pSub%, pDim:%pDim%, pDelim:%pDelim%, pSuppressZero:%pSuppressZero%, pSuppressConsol:%pSuppressConsol%, pSuppressRules:%pSuppressRules%.';\r\ncTimeStamp        = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt        = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSubset       = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\nsMessage          = '';\r\ncDimCubes         = '}Cubes';\r\ncDimDimensions    = '}Dimensions';\r\ncAll              = 'ALL';\r\ncTemp             = If( pTemp >= 1, 1, 0 );\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate cube\r\nIf( Trim( pCube ) @= '' );\r\n    sMessage    = 'No cube specified.';\r\n    nErrors     = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate dimensions\r\nIf( Trim( pDim ) @= '' );\r\n    sMessage    = 'No dimensions specified.';\r\n    nErrors     = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate suppression parameters\r\nIf( pSuppressZero <> 0 & pSuppressZero <> 1 );\r\n    sMessage    = 'Invalid value for suppress zero parameter.';\r\n    nErrors     = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIf( pSuppressConsol <> 0 & pSuppressConsol <> 1 );\r\n    sMessage    = 'Invalid value for suppress consol parameter.';\r\n    nErrors     = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIf( pSuppressRules <> 0 & pSuppressRules <> 1 );\r\n    sMessage    = 'Invalid value for suppress rules parameter.';\r\n    nErrors     = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate view and subsets\r\nIf( pView @= '' & pSub @= '' );\r\n    ## Use standard view name.\r\n    cView       = cTempSubset;\r\n    cSubset     = cView;\r\nElseIf( pView @<> '' & pSub @= '' );\r\n    ## Use the nominated view name for the subset name.\r\n    cView       = pView;\r\n    cSubset     = pView;\r\nElseIf( pView @= '' & pSub @<> '' );\r\n    ## Use the nominated subset name for the view name.\r\n    cView       = pSub;\r\n    cSubset     = pSub;\r\nElse;\r\n    cView   = pView;\r\n    cSubset = pSub;\r\nEndIf;\r\n\r\n\r\n# Validate delimiter\r\nIf( pDelim @= '' );\r\n    pDelim     = '&';\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Handle All cubes or a cubes list\r\nIf ( TRIM( pCube ) @= cAll );\r\n  sMDX = Expand( '{TM1SUBSETALL([%cDimCubes%])}' );\r\nElse;\r\n  sCubeTokenizer = TRIM( pCube );\r\n  sMDX = '';\r\n  ### Loop and tokenize Cube list\r\n  While ( sCubeTokenizer @<> '' );\r\n    nPos = SCAN( pDelim, sCubeTokenizer );\r\n    If ( nPos = 0 );\r\n      nPos = LONG( sCubeTokenizer ) + 1;\r\n    EndIf;\r\n    sSearchCube = TRIM( SUBST( sCubeTokenizer, 1, nPos - 1 ) );\r\n    If ( SCAN( '*', sSearchCube ) <> 0 % SCAN( '?', sSearchCube ) <> 0 );\r\n      If( sMDX @= '' );\r\n        sMDX = Expand( '{TM1FILTERBYPATTERN({TM1SUBSETALL([%cDimCubes%])}, \"%sSearchCube%\")}' );\r\n      Else;\r\n        sMDX = Expand( '%sMDX% + {TM1FILTERBYPATTERN({TM1SUBSETALL([%cDimCubes%])}, \"%sSearchCube%\")}' );\r\n      EndIf;\r\n    Else;\r\n      If ( CubeExists( sSearchCube ) = 0 );\r\n        sMessage = Expand( 'Cube: %sSearchCube% does not exist.' );\r\n        nErrors = nErrors + 1;\r\n        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n        If( pStrictErrorHandling = 1 );\r\n            ProcessQuit;\r\n        Else;\r\n            ProcessBreak;\r\n        EndIf;\r\n      Else;\r\n        If( sMDX @= '' );\r\n          sMDX = Expand( '{[%cDimCubes%].[%sSearchCube%]}' );\r\n        Else;\r\n          sMDX = Expand( '%sMDX% + {[%cDimCubes%].[%sSearchCube%]}' );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n    ### Consume dimension and delimiter\r\n    sCubeTokenizer = TRIM( DELET( sCubeTokenizer, 1, nPos + LONG( pDelim ) - 1 ) );\r\n  End;\r\n  sMDX = Expand( '{%sMDX%}' );\r\nEndIf;\r\n\r\nIf (SubsetExists( cDimCubes, cTempSubset ) = 1 );\r\n  SubsetDestroy( cDimCubes, cTempSubset );\r\nEndIf;\r\nSubsetCreateByMDX( cTempSubset, sMDX, cDimCubes, 1 );\r\n\r\n### Handle All dimensions or a dimension list\r\n### We must exclude hierarchies\r\nIf ( TRIM( pDim ) @= cAll );\r\n  sMDX = Expand( '{FILTER(TM1SUBSETALL([%cDimDimensions%]), INSTR([%cDimDimensions%].CurrentMember.Name, '':'' ) = 0 )}' );\r\nElse;\r\n  sDimTokenizer = TRIM( pDim );\r\n  sMDX = '';\r\n  ### Loop and tokenize dimension list\r\n  While ( sDimTokenizer @<> '' );\r\n    nPos = SCAN( pDelim, sDimTokenizer );\r\n    If ( nPos = 0 );\r\n      nPos = LONG( sDimTokenizer ) + 1;\r\n    EndIf;\r\n    sSearchDim = TRIM( SUBST( sDimTokenizer, 1, nPos - 1 ) );\r\n    If ( SCAN( ':', sSearchDim ) <> 0 );\r\n      sMessage    = Expand( 'Dimension: The process is not accepting hierarchies: %sSearchDim%' );\r\n      nErrors     = nErrors + 1;\r\n      LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    ElseIf ( SCAN( '*', sSearchDim ) <> 0 % SCAN( '?', sSearchDim ) <> 0 );\r\n      If( sMDX @= '' );\r\n        sMDX = Expand( '{TM1FILTERBYPATTERN({FILTER(TM1SUBSETALL([%cDimDimensions%]), INSTR([%cDimDimensions%].CurrentMember.Name, '':'' ) = 0 )}, \"%sSearchDim%\")}' );\r\n      Else;\r\n        sMDX = Expand( '%sMDX% + {TM1FILTERBYPATTERN({FILTER(TM1SUBSETALL([%cDimDimensions%]), INSTR([%cDimDimensions%].CurrentMember.Name, '':'' ) = 0 )}, \"%sSearchDim%\")}' );\r\n      EndIf;\r\n    Else;\r\n      If ( DimensionExists( sSearchDim ) = 0 );\r\n        sMessage    = Expand( 'Dimension: %sSearchDim% does not exist.' );\r\n        nErrors     = nErrors + 1;\r\n        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n        If( pStrictErrorHandling = 1 );\r\n            ProcessQuit;\r\n        Else;\r\n            ProcessBreak;\r\n        EndIf;\r\n      Else;\r\n        If( sMDX @= '' );\r\n          sMDX = Expand( '{[%cDimDimensions%].[%sSearchDim%]}' );\r\n        Else;\r\n          sMDX = Expand( '%sMDX% + {[%cDimDimensions%].[%sSearchDim%]}' );\r\n        EndIf;\r\n      EndIf;\r\n    EndIf;\r\n    ### Consume dimension and delimiter\r\n    sDimTokenizer = TRIM( DELET( sDimTokenizer, 1, nPos + LONG( pDelim ) - 1 ) );\r\n  End;\r\n  sMDX = Expand( '{%sMDX%}' );\r\nEndIf;\r\n\r\nIf (SubsetExists( cDimDimensions, cTempSubset ) = 1 );\r\n  SubsetDestroy( cDimDimensions, cTempSubset );\r\nEndIf;\r\nSubsetCreateByMDX( cTempSubset, sMDX, cDimDimensions, 1 );\r\n\r\n### Build Subsets and assign to View ###\r\nnCube = 1;\r\nWhile ( nCube <= SubsetGetSize( cDimCubes, cTempSubset ) );\r\n  sCube = SubsetGetElementName( cDimCubes, cTempSubset, nCube );\r\n  ### Build View ###\r\n  If( ViewExists( sCube, cView ) = 1 );\r\n    ViewDestroy( sCube, cView );\r\n  EndIf;\r\n  nDim = 1;\r\n  sDim = TABDIM( sCube, nDim );\r\n  While ( sDim @<> '' );\r\n   # filter selection has non-empty intersect with current cube dimensions\r\n   #If ( SubsetElementExists( cDimDimensions, cTempSubset, sDim ) = 1 ); - bug does not work\r\n   IF( SubsetElementGetIndex( cDimDimensions, cTempSubset, sDim, 1 ) > 0 );\r\n      # create view if and only if there is at least one match with dimensions\r\n      If( ViewExists( sCube, cView ) = 0 );\r\n        ViewCreate( sCube, cView, cTemp );\r\n        ViewExtractSkipZeroesSet( sCube, cView, pSuppressZero );\r\n        ViewExtractSkipCalcsSet( sCube, cView, pSuppressConsol );\r\n        ViewExtractSkipRuleValuesSet( sCube, cView, pSuppressRules );\r\n      EndIf;\r\n      If ( SubsetExists ( sDim, cSubset ) = 1 );\r\n        If ( SubsetGetSize( sDim, cSubset ) > 0 );\r\n          SubsetDeleteAllElements( sDim, cSubset );\r\n        EndIf;\r\n      Else;\r\n        SubsetCreate( sDim, cSubset, cTemp );\r\n      EndIf;\r\n      ViewSubsetAssign( sCube, cView, sDim, cSubset );\r\n    EndIf;\r\n    nDim = nDim + 1;\r\n    sDim = TABDIM( sCube, nDim );\r\n  End;\r\n\r\n  # creating N level subset for all dim not included in pDim for the cube\r\n  If(pSubN = 1);\r\n    nCountDimC = 1;\r\n    While( TabDim( sCube, nCountDimC ) @<> '' );\r\n    sDimC = TabDim( sCube, nCountDimC );\r\n    If ( ViewExists( sCube, cView ) = 1 & SubsetElementGetIndex( cDimDimensions, cTempSubset, sDimC, 1 ) = 0 );\r\n      If ( SubsetExists ( sDimC, cSubset ) = 1 );\r\n        If ( SubsetGetSize( sDimC, cSubset ) > 0 );\r\n          SubsetDeleteAllElements( sDimC, cSubset );\r\n        EndIf;\r\n      Else;\r\n        SubsetCreate( sDimC, cSubset, cTemp );\r\n      Endif;\r\n      nElCount = DIMSIZ ( sDimC );\r\n      nElC = 1;\r\n      WHILE ( nElC <= nElCount );\r\n        sEl = DIMNM( sDimC, nElC );\r\n        IF(ElementLevel( sDimC, sDimC, sEl )= 0 );\r\n          SubsetElementInsert( sDimC, cSubset, sEl, 0 );\r\n        EndIf;\r\n        nElC = nElC + 1;\r\n      END;\r\n      ViewSubsetAssign( sCube, cView, sDimC, cSubset );\r\n    Endif;\r\n    nCountDimC = nCountDimC + 1;\r\n    End;\r\n  Endif;\r\n\r\n\r\n  nCube = nCube + 1;\r\nEnd;\r\n\r\n\r\n### End Prolog ###\r\n\r\n",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}