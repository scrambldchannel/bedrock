{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "?",
        "asciiDecimalSeparator": ".",
        "asciiDelimiterChar": ",",
        "asciiHeaderRecords": 0,
        "asciiQuoteCharacter": "\"",
        "asciiThousandSeparator": ",",
        "dataSourceNameForClient": "}Cubes",
        "dataSourceNameForServer": "}Cubes"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\nElse;\r\n\r\n    ### Remove Descendent attribute\r\n    IF( Scan( '*', pDim ) = 0 &  Scan( '?', pDim ) = 0 & Scan( pDelim, pDim ) = 0 & Scan( '*', pHier ) = 0 & Scan( '?', pHier ) = 0 & Scan( pDelim, pHier ) = 0 & Scan( '*', pConsol ) = 0 & Scan( '?', pConsol ) = 0 & Scan( pDelim, pConsol ) = 0 );\r\n      AttrDelete( pDim, cHierAttr );\r\n    EndIf;\r\nEndIf;\r\n\r\n### Reset Logging in the Attribute cube\r\nIF( Scan( '*', pDim ) = 0 & Scan( '?', pDim ) = 0 & Scan( pDelim, pDim ) = 0 & Scan( '*', pHier ) = 0 & Scan( '?', pHier ) = 0 & Scan( pDelim, pHier ) = 0 & Scan( '*', pConsol ) = 0 & Scan( '?', pConsol ) = 0 & Scan( pDelim, pConsol ) = 0 );\r\n    If( CubeExists( sAttrCube ) = 1 );\r\n        If( nLogging = 1 );\r\n            CubeSetLogChanges( sAttrCube, 1 );\r\n        EndIf;\r\n    EndIf;\r\nEndIf;\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully unwound the appropriate consolidated items the %pDim%:%pHier% dimension:hierarchy.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Check for errors in prolog ###\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### If Leaf or already unwound then skip\r\nIf( ElementComponentCount( pDim, pHier, vElement ) = 0 );\r\n    ItemSkip;\r\nEndIf;\r\n\r\n### Break all parent/child links below target consol ###\r\nIf( pConsol @= '*' );\r\n    sAttrVal = cAttrVal;\r\nElse;\r\n    sAttrVal = ElementAttrS( pDim, pHier, vElement, cHierAttr );\r\nEndIf;\r\n\r\nIf( sAttrVal @= cAttrVal );\r\n    bFastUnwind = 1;\r\n\r\n    # Cannot check nPars > 1 as due to ordering of elements processes some parents may have already been removed\r\n    nPars = ElementParentCount( pDim, pHier, vElement );\r\n    nPar = 1;\r\n    While( nPar <= nPars );\r\n        sPar = ElementParent( pDim, pHier, vElement, nPar );\r\n        If( ElementAttrS( pDim, pHier, sPar, cHierAttr ) @<> cAttrVal );\r\n            # Parent does not belong to unwinding intersection. Cannot delete C children, must unwind.\r\n            bFastUnwind = 0;\r\n        EndIf;\r\n        nPar = nPar + 1;\r\n    End;\r\n\r\n    If( bFastUnwind = 1 );\r\n        # delete and recreate C element (Fast)\r\n        sEleNext = ElementName( pDim, pHier, ElementIndex( pDim, pHier, vElement ) + 1 );\r\n        HierarchyElementDelete( pDim, pHier, vElement );\r\n        HierarchyElementInsert( pDim, pHier, sEleNext, vElement, 'C' );\r\n    Else;\r\n        # unwind C element without deletion (Slow for consols with many children)\r\n        nComp = ElementComponentCount( pDim, pHier, vElement );\r\n        While( nComp > 0 );\r\n            sComp = ElementComponent( pDim, pHier, vElement, nComp );\r\n            HierarchyElementComponentDelete( pDim, pHier, vElement, sComp );\r\n            nComp = nComp - 1;\r\n        End;\r\n    EndIf;\r\n\r\nEndIf;\r\n\r\n### End Metadata ###",
    "Name": "}bedrock.hier.unwind",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pDim",
            "Prompt": "REQUIRED: Target Dimension accepts wildcards (if = * then all the dimensions)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pHier",
            "Prompt": "OPTIONAL: Target Hierarchy (will use default is left blank) accepts wildcards (if = * then all hierarchies)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pConsol",
            "Prompt": "OPTIONAL: Target Consolidation accepts wildcards ( * will unwind ALL)",
            "Type": "String",
            "Value": "*"
        },
        {
            "Name": "pRecursive",
            "Prompt": "REQUIRED: Boolean: 1 = True (break from node down not just direct children)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: delimiter character for element list (default value if blank = '&')",
            "Type": "String",
            "Value": "&"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.hier.unwind', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pDim', '', 'pHier', '', 'pConsol', '*',\r\n    \t'pRecursive', 0, 'pDelim', '&'\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process will remove all children from a specific target consolidation (pConsol) in a Hierarchy\r\n# in target Dimension. If recursive (pRecursive=1), it will also unwind all consolidations that are\r\n# descendants of the target regardless of depth. If not recursive (pRecursive=0) then only immediate children\r\n# of the target consolidation will be removed.\r\n#\r\n# Use case: Intended for both production and development/prototyping scenarios.\r\n# 1. **Production** call prior to main dimension build process in case mapping relationships have changed to ensure no double-counting steming from leaf elements\r\n#    rolling into multiple parents within the same rollup or hierarhcy\r\n# 2. **Production** combine with }bedrock.hier.emptyconsols.delete to remove orphaned rollups\r\n# 3. **Development** manual cleanup of dimensions during prototyping or prior to going to production\r\n#\r\n# Note:\r\n# * A valid source dimension name (pDim) is mandatory otherwise the process will abort.\r\n# * A blank pHier parameter will process _only the same named hierarchy_ for each of the dimensions processed.\r\n# * A \\* pConsol parameter will process ALL C level items in the given hierarchy (pHier).\r\n# * A delimited list or wildcard for pDim or pHier or a delimited list of consolidations for pConsol will result in recursive calls of the process.\r\n#\r\n# Caution:\r\n# If consolidations are also used in unrelated consolidations and recursive is selected this\r\n# will result in orphan consolidations in the other rollups.\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName   = GetProcessName();\r\ncUserName       = TM1User();\r\ncTimeStamp      = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt      = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub        = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncTempSubOuter   = '}OuterLoop_' | cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncTempSubInner   = '}InnerLoop_' | cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel  = 'ERROR';\r\ncMsgErrorContent= 'Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncMsgInfoContent = 'User:%cUserName% Process:%cThisProcName% Message:%sMessage%';\r\ncLogInfo        = 'Process:%cThisProcName% run with parameters pDim:%pDim%, pHier:%pHier%, pConsol:%pConsol%, pRecursive:%pRecursive%, pDelim:%pDelim%.' ;\r\ncHierAttr       = 'Bedrock.Descendant';\r\ncAttrVal        = 'Descendant';\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\nIf( Scan( '*', pDim ) = 0 & Scan( '?', pDim ) = 0 & Scan( pDelim, pDim ) = 0 & Scan( ':', pDim ) > 0 & pHier @= '' );\r\n    # A hierarchy has been passed as dimension. Handle the input error by splitting dim:hier into dimension & hierarchy\r\n    pHier       = SubSt( pDim, Scan( ':', pDim ) + 1, Long( pDim ) );\r\n    pDim        = SubSt( pDim, 1, Scan( ':', pDim ) - 1 );\r\nEndIf;\r\n\r\n## Validate Source dimension\r\nIF( Trim( pDim ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No dimension specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIF( Scan( '*', pDim ) = 0 & Scan( '?', pDim ) = 0 & Scan( pDelim, pDim ) = 0 & DimensionExists( pDim ) = 0 );\r\n    nErrors = 1;\r\n    sMessage = 'Invalid dimension: ' | pDim;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate hierarchy (can only validate hierarchy up front if dimension is fixed and doesn't contain wildcards)\r\nIF( Scan( '*', pDim ) = 0 & Scan( '?', pDim ) = 0 & Scan( pDelim, pDim ) = 0 & pHier @= '');\r\n    pHier = pDim;\r\nElseIf( Scan( '*', pHier ) = 0 & Scan( '?', pHier ) = 0 & Scan( pDelim, pHier ) = 0 & pHier @<> '' & DimensionExists( pDim ) = 1 & HierarchyExists( pDim, pHier ) = 0 );\r\n    nErrors = 1;\r\n    sMessage = 'Invalid dimension hierarchy: ' | pHier;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndif;\r\n\r\nIf( Trim( pHier ) @= '' );\r\n    ## use same name as Dimension. Since wildcards are allowed, this is managed inside the code below\r\nEndIf;\r\n\r\n# Validate consol\r\nIf( pConsol @<> '');\r\n    If( Scan( '*', pConsol ) = 0 & Scan( '?', pConsol ) = 0 & Scan( pDelim, pConsol ) = 0 & ElementIndex( pDim, pHier, pConsol ) = 0 );\r\n        nErrors = 1;\r\n        sMessage = 'Item ' | pConsol | ' does NOT exist. Please enter a valid consolidation element in the ' |pDim| ':' |pHier| ' dimension:hierarchy.';\r\n        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    ElseIf( Scan( '*', pConsol ) = 0 & Scan( '?', pConsol ) = 0 & Scan( pDelim, pConsol ) = 0 & ElementType( pDim, pHier, pConsol ) @<> 'C' );\r\n        nErrors = 1;\r\n        sMessage = 'Item ' | pConsol | ' is NOT a consolidated item. Please enter a valid consolidation element in the ' |pDim| ':' |pHier| ' dimension:hierarchy.';\r\n        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    ElseIf( Scan( '*', pConsol ) = 0 & Scan( '?', pConsol ) = 0 & Scan( pDelim, pConsol ) = 0 & ElementComponentCount( pDim, pHier, pConsol ) = 0 );\r\n        nErrors = 1;\r\n        sMessage = 'Invalid consolidation: ' | pConsol | ' has no children.';\r\n        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    Endif;\r\nElseIf( Trim( pConsol ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No consolidated element specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndif;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelim @= '' );\r\n    pDelim = '&';\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nElse;\r\n  # If subset required will be set later\r\n  DataSourceType = 'NULL';\r\nEndIf;\r\n\r\n### If there is no separator and wildcard in the parameters, execute the unwind of the specific consolidated element\r\nIf( Scan( '*', pDim ) = 0 & Scan( '?', pDim ) = 0 & Scan( pDelim, pDim ) = 0 & Scan( '*', pHier ) = 0 & Scan( '?', pHier ) = 0 & Scan( pDelim, pHier ) = 0 & Scan( '*', pConsol ) = 0 & Scan( '?', pConsol ) = 0 & Scan( pDelim, pConsol ) = 0 );\r\n\r\n    ### In case alias used for pConsol convert to principal name\r\n    If( ElementIndex( pDim, pHier, pConsol ) > 0 );\r\n        pConsol = HierarchyElementPrincipalName( pDim, pHier, pConsol );\r\n    EndIf;\r\n\r\n    ### Turn-off Logging in the Attribute cube\r\n    sAttrCube = '}ElementAttributes_' | pDim;\r\n    If( CubeExists( sAttrCube ) = 1 );\r\n        nLogging = CubeGetLogChanges( sAttrCube );\r\n        CubeSetLogChanges( sAttrCube, 0 );\r\n    EndIf;\r\n\r\n    ### Create Temp Descendent Attribute\r\n    AttrDelete( pDim, cHierAttr );\r\n    AttrInsert( pDim, '', cHierAttr, 'S' );\r\n\r\n    ### Assign data source ###\r\n    If( pRecursive      = 1);\r\n        # Set Descendent attribute value\r\n        nElementIndex   = 1;\r\n        nElementCount   = ElementCount( pDim , pHier );\r\n        While( nElementIndex <= nElementCount );\r\n            sElement = ElementName( pDim, pHier, nElementIndex );\r\n            If( ElementIsAncestor( pDim, pHier, pConsol, sElement ) = 1 % pConsol @= sElement );\r\n                ElementAttrPutS( cAttrVal, pDim, pHier, sElement, cHierAttr );\r\n            EndIf;\r\n            nElementIndex = nElementIndex + 1;\r\n        End;\r\n        # Assign Data Source\r\n        DataSourceType            = 'SUBSET';\r\n        DatasourceNameForServer   = pDim|':'|pHier;\r\n        DatasourceNameForClient   = pDim|':'|pHier;\r\n        DatasourceDimensionSubset = 'ALL';\r\n    Else;\r\n        ### Remove direct children from the target consol ###\r\n        If( ElementComponentCount( pDim, pHier, pConsol ) > 0 );\r\n            If( pLogOutput = 1 );\r\n                LogOutput( 'INFO', Expand( 'Deleting all components from consolidation %pConsol% in hierarchy \"%pHier%\" of \"%pDim%\" dimension.' ) );\r\n            EndIf;\r\n            nComp = ElementComponentCount( pDim, pHier, pConsol );\r\n            While( nComp > 0 );\r\n                sComp = ElementComponent( pDim, pHier, pConsol, nComp );\r\n                HierarchyElementComponentDelete( pDim, pHier, pConsol, sComp );\r\n                nComp = nComp - 1;\r\n            End;\r\n        EndIf;\r\n        # No data source, straight to Epilog\r\n        DataSourceType = 'NULL';\r\n    EndIf;\r\n\r\n### If pConsol is \"*\" and there is no separator and wildcard in the pDim & pHier parameters then unwind the whole hierarchy\r\nElseIf( Scan( '*', pDim ) = 0 & Scan( '?', pDim ) = 0 & Scan( pDelim, pDim ) = 0 & Scan( '*', pHier ) = 0 & Scan( '?', pHier ) = 0 & Scan( pDelim, pHier ) = 0 & Trim( pConsol ) @= '*' );\r\n\r\n    # as pConsol is * wildcard it doesn't matter if recursive or not. We unwind everything. As speed enhancement rather than removing children delete and add back C elements to empty children in one step (not steps = count of children)\r\n    nMaxEle = ElementCount( pDim, pHier );\r\n    nCtrEle = 1;\r\n    While( nCtrEle <= nMaxEle );\r\n        sEle = ElementName( pDim, pHier, nCtrEle);\r\n        If( ElementComponentCount( pDim, pHier, sEle ) > 0 );\r\n            If( nCtrEle < nMaxEle );\r\n                sEleNext = ElementName( pDim, pHier, nCtrEle + 1 );\r\n            Else;\r\n                sEleNext = '';\r\n            EndIf;\r\n            HierarchyElementDelete( pDim, pHier, sEle );\r\n            HierarchyElementInsert( pDim, pHier, sEleNext, sEle, 'C' );\r\n        EndIf;\r\n        nCtrEle = nCtrEle + 1;\r\n    End;\r\n\r\n    # since hierarchy already fully unwound no subset; datasource = NULL\r\n    DataSourceType = 'NULL';\r\n\r\n## Otherwise, if there is a separator or wildcard in the parameters, tokenize the string and self-call the process recursively.\r\nElse;\r\n    # No data source, straight to Epilog\r\n    DataSourceType = 'NULL';\r\n\r\n    # Loop through dimensions in pDim\r\n    sDims = pDim;\r\n    nDimDelimiterIndex = 1;\r\n    sMdx = '';\r\n    # Get 1st dimension\r\n    While( nDimDelimiterIndex <> 0 );\r\n        # Extract 1st dimension > sDim\r\n        nDimDelimiterIndex = Scan( pDelim, sDims );\r\n        If( nDimDelimiterIndex = 0 );\r\n            sDim = sDims;\r\n        Else;\r\n            sDim = Trim( SubSt( sDims, 1, nDimDelimiterIndex - 1 ) );\r\n            sDims = Trim( Subst( sDims, nDimDelimiterIndex + Long(pDelim), Long( sDims ) ) );\r\n        EndIf;\r\n\r\n        # Create subset of dimensions using Wildcard to loop through dimensions in pDim with wildcard\r\n        sDimExp = '\"'|sDim|'\"';\r\n        sMdxPart = Expand('{TM1FILTERBYPATTERN( EXCEPT( TM1SUBSETALL( [}Dimensions].[}Dimensions] ), TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions].[}Dimensions] ) , \"*:*\") ) , %sDimExp% )}');\r\n        If( sMdx @= '');\r\n            sMdx = sMdxPart;\r\n        Else;\r\n            sMdx = sMdx | ' + ' | sMdxPart;\r\n        EndIf;\r\n    End;\r\n\r\n    If( SubsetExists( '}Dimensions' , cTempSubOuter ) = 1 );\r\n        # If a delimited list of dim names includes wildcards then we may have to re-use the subset multiple times\r\n        SubsetMDXSet( '}Dimensions' , cTempSubOuter, sMDX );\r\n    Else;\r\n        # temp subset, therefore no need to destroy in epilog\r\n        SubsetCreatebyMDX( cTempSubOuter, sMDX, '}Dimensions' , 1 );\r\n    EndIf;\r\n\r\n    # Loop through dimensions in subset created based on wildcard\r\n    nCountDim = SubsetGetSize( '}Dimensions' , cTempSubOuter );\r\n    While( nCountDim >= 1 );\r\n        sDim = SubsetGetElementName( '}Dimensions' , cTempSubOuter, nCountDim );\r\n        # Validate dimension name\r\n        If( DimensionExists(sDim) = 0 );\r\n            nErrors = 1;\r\n            sMessage = Expand( 'Dimension \"%sDim%\" does not exist.' );\r\n            LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n        Else;\r\n            If( pLogOutput = 1 );\r\n                sMessage = Expand( 'Dimension \"%sDim%\" being processed....' );\r\n                LogOutput( 'INFO', Expand( cMsgInfoContent ) );\r\n            EndIf;\r\n            # Loop through hierarchies in pHier\r\n            If( Trim( pHier ) @= '' );\r\n                ### Use main hierarchy for each dimension if pHier is empty\r\n                sHierarchies  = sDim;\r\n            Else;\r\n                sHierarchies  = pHier;\r\n            EndIf;\r\n            nDelimiterIndexA  = 1;\r\n            sHierDim          = '}Dimensions' ;\r\n            sMdxHier          = '';\r\n            While( nDelimiterIndexA <> 0 );\r\n                nDelimiterIndexA = Scan( pDelim, sHierarchies );\r\n                If( nDelimiterIndexA = 0 );\r\n                    sHierarchy   = sHierarchies;\r\n                Else;\r\n                    sHierarchy   = Trim( SubSt( sHierarchies, 1, nDelimiterIndexA - 1 ) );\r\n                    sHierarchies  = Trim( Subst( sHierarchies, nDelimiterIndexA + Long(pDelim), Long( sHierarchies ) ) );\r\n                EndIf;\r\n\r\n                # Create subset of Hierarchies using Wildcard\r\n                If( sDim @= sHierarchy );\r\n                    sHierExp = '\"'| sDim |'\"';\r\n                Else;\r\n                    sHierExp = '\"'| sDim | ':' | sHierarchy|'\"';\r\n                EndIf;\r\n                    sMdxHierPart = Expand('{TM1FILTERBYPATTERN( {TM1SUBSETALL([%sHierDim%].[%sHierDim%])}, %sHierExp% )}');\r\n                If( sMdxHier @= '');\r\n                    sMdxHier = sMdxHierPart;\r\n                Else;\r\n                    sMdxHier = sMdxHier | ' + ' | sMdxHierPart;\r\n                EndIf;\r\n            End;\r\n\r\n            # include the named hierarchy in case ALL hierachies\r\n            If( Trim(pHier) @= '*' );\r\n                sMdxHier = Expand('{[%sHierDim%].[%sHierDim%].[%sDim%]} + %sMdxHier%');\r\n            EndIf;\r\n\r\n            If( SubsetExists( sHierDim, cTempSubInner ) = 1 );\r\n                # If a delimited list of hierarchy names includes wildcards then we may have to re-use the subset multiple times\r\n                SubsetMDXSet( sHierDim, cTempSubInner, sMdxHier );\r\n            Else;\r\n                # temp subset, therefore no need to destroy in epilog\r\n                SubsetCreatebyMDX( cTempSubInner, sMdxHier, sHierDim, 1 );\r\n            EndIf;\r\n\r\n            # Loop through subset of hierarchies created based on wildcard\r\n            nCountHier = SubsetGetSize( sHierDim, cTempSubInner );\r\n            While( nCountHier >= 1 );\r\n                sCurrHier = SubsetGetElementName( sHierDim, cTempSubInner, nCountHier );\r\n                sCurrHierName = Subst( sCurrHier, Scan(':', sCurrHier)+1, Long(sCurrHier) );\r\n                # Validate hierarchy name in sHierDim\r\n                If( Dimix( sHierDim , sCurrHier ) = 0 );\r\n                    sMessage = Expand('The \"%sCurrHier%\" hierarchy does NOT exist in the \"%sDim%\" dimension.');\r\n                    LogOutput( 'INFO' , Expand( cMsgInfoContent ) );\r\n                ElseIf( sCurrHierName @= 'Leaves' );\r\n                    sMessage = Expand('Skipping %sCurrHier% hierarchy. No need to unwind!');\r\n                    If( pLogOutput = 1 );\r\n                        LogOutput( 'INFO', Expand( cMsgInfoContent ) );\r\n                    EndIf;\r\n                Else;\r\n                    If( pLogOutput = 1 );\r\n                        sMessage = Expand( 'Hierarchy \"%sCurrHierName%\" in Dimension \"%sDim%\" being processed....' );\r\n                        LogOutput( 'INFO', Expand( cMsgInfoContent ) );\r\n                    EndIf;\r\n                    # Loop through consolidated elements in pConsol\r\n                    sEles = Trim( pConsol );\r\n                    If( sEles @= '*' );\r\n                        # no need for recursive call for ALL wildcard. We can just unwind whole hierarchy\r\n                        nMaxEle = ElementCount( sDim, sCurrHierName );\r\n                        nCtrEle = 1;\r\n                        While( nCtrEle <= nMaxEle );\r\n                            sEle = ElementName( sDim, sCurrHierName, nCtrEle);\r\n                            If( ElementComponentCount( sDim, sCurrHierName, sEle ) > 0 );\r\n                                If( nCtrEle < nMaxEle );\r\n                                    sEleNext = ElementName( sDim, sCurrHierName, nCtrEle + 1 );\r\n                                Else;\r\n                                    sEleNext = '';\r\n                                EndIf;\r\n                                HierarchyElementDelete( sDim, sCurrHierName, sEle );\r\n                                HierarchyElementInsert( sDim, sCurrHierName, sEleNext, sEle, 'C' );\r\n                            EndIf;\r\n                            nCtrEle = nCtrEle + 1;\r\n                        End;\r\n                    Else;\r\n                        # a delimited list of consolidations is given. Handle with recursive call and temp descendents attribute\r\n                        nDelimiterIndexB = 1;\r\n                        While( nDelimiterIndexB <> 0 );\r\n                            nDelimiterIndexB = Scan( pDelim, sEles );\r\n                            If( nDelimiterIndexB = 0 );\r\n                                sEle = sEles;\r\n                            Else;\r\n                                sEle = Trim( SubSt( sEles, 1, nDelimiterIndexB - 1 ) );\r\n                                sEles = Trim( Subst( sEles, nDelimiterIndexB + Long(pDelim), Long( sEles ) ) );\r\n                            EndIf;\r\n\r\n                            # Wildcard search string\r\n                            sEle = '\"'|sEle|'\"';\r\n                            sMdxEle = Expand('{TM1FILTERBYPATTERN( {TM1SUBSETALL([%sCurrHier%])}, %sEle% )}');\r\n\r\n                            If( HierarchySubsetExists( sDim, sCurrHierName, cTempSub ) = 1 );\r\n                                # If a delimited list of dim names includes wildcards then we may have to re-use the subset multiple times\r\n                                HierarchySubsetMDXSet( sDim, sCurrHierName, cTempSub, sMDXEle );\r\n                            Else;\r\n                                # temp subset, therefore no need to destroy in epilog\r\n                                SubsetCreatebyMDX( cTempSub, sMDXEle, sCurrHier, 1 );\r\n                            EndIf;\r\n\r\n                            # Loop through subset of Consolidated elements created based on wildcard\r\n                            nCountElems = HierarchySubsetGetSize(sDim, sCurrHierName, cTempSub);\r\n                            While( nCountElems >= 1 );\r\n                                sElement = HierarchySubsetGetElementName(sDim, sCurrHierName, cTempSub, nCountElems);\r\n                                ## Check that the element is consolidated and has children\r\n                                If( DType( sCurrHier, sElement ) @= 'C' & ElementComponentCount( sDim, sCurrHierName, sElement ) > 0 );\r\n                                    If( pLogOutput = 1 );\r\n                                        LogOutput( 'INFO', Expand( 'Process called recursively for \"%sElement%\" in hierarchy \"%sDim%:%sCurrHierName%\".' ) );\r\n                                    EndIf;\r\n                                    ExecuteProcess( cThisProcName, 'pLogOutput', pLogOutput,\r\n                                        'pStrictErrorHandling', pStrictErrorHandling,\r\n                                        'pDim', sDim, 'pHier', sCurrHierName,\r\n                                        'pConsol', sElement, 'pRecursive', pRecursive,\r\n                                        'pDelim', pDelim\r\n                                    );\r\n                                EndIf;\r\n\r\n                                nCountElems = nCountElems - 1;\r\n                            End;\r\n                        End;\r\n                    EndIf;\r\n                Endif;\r\n\r\n                nCountHier = nCountHier - 1;\r\n            End;\r\n\r\n        EndIf;\r\n\r\n        nCountDim = nCountDim - 1;\r\n    End;\r\nEndIf;\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [
        {
            "EndByte": 0,
            "Name": "vElement",
            "Position": 1,
            "StartByte": 0,
            "Type": "String"
        }
    ],
    "VariablesUIData": []
}