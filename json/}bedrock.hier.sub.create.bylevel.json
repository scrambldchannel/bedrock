{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully created subset(s) %cSubs% from dimension %pDim%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.hier.sub.create.bylevel",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pDim",
            "Prompt": "REQUIRED: Dimension name",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pHier",
            "Prompt": "OPTIONAL: Hierarchy name (default if blank = same named hierarchy)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pSort",
            "Prompt": "OPTIONAL: Sort the Subset",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pConvertStatic",
            "Prompt": "OPTIONAL: Convert the Subset to Static",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pAlias",
            "Prompt": "OPTIONAL: Set Alias for Subset",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pTemp",
            "Prompt": "OPTIONAL: Use temporary objects? (Boolean 1=True)",
            "Type": "Numeric",
            "Value": "1"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.hier.sub.create.bylevel', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pDim', '', 'pHier', '',\r\n    \t'pSort', 0, 'pConvertStatic', 1,\r\n    \t'pAlias', '', 'pTemp', 1\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process creates static subsets named \"All level <nn>\" for the specified consolidation\r\n# levels in a Hierarchy of a Dimension.\r\n\r\n# Note:\r\n# Option to sort subset is available only for sorting per element principal names.\r\n\r\n# Caution: Target hierarchy cannot be `Leaves`.\r\n#EndRegion @DOC\r\n\r\n### Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName       = GetProcessName();\r\ncUserName           = TM1User();\r\ncTimeStamp          = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt          = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub            = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel      = 'ERROR';\r\ncMsgErrorContent    = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo            = 'Process:%cThisProcName% run with parameters pDim:%pDim%, pHier:%pHier%, pSort:%pSort%, pConvertStatic:%pConvertStatic%, pAlias:%pAlias%, pTemp:%pTemp%.';\r\ncAttributeDim       = '}ElementAttributes_' | pDim;\r\ncSubs               = '' ;\r\n\r\n## LogOutput parameters\r\nIF ( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\nIf( Scan( ':', pDim ) > 0 & pHier @= '' );\r\n    # A hierarchy has been passed as dimension. Handle the input error by splitting dim:hier into dimension & hierarchy\r\n    pHier       = SubSt( pDim, Scan( ':', pDim ) + 1, Long( pDim ) );\r\n    pDim        = SubSt( pDim, 1, Scan( ':', pDim ) - 1 );\r\nEndIf;\r\n\r\n# Validate dimension\r\nIf( Trim( pDim ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No dimension specified';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\nIf( DimensionExists( pDim ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid dimension: ' | pDim;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n## Validate Hierarchy\r\nIF(pHier @= 'Leaves' );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid  Hierarchy: ' | pDim |':'|pHier;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIf( Trim( pHier ) @= '' );\r\n  sHier = pDim;\r\nElse;\r\n  sHier = pHier;\r\nEndIf;\r\n\r\nIF(HierarchyExists(pDim, sHier ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid dimension Hierarchy: ' | pDim |':'|sHier;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n## Validate Alias\r\nIF(pAlias @<> '' );\r\n\r\n  sDimAttr = '}ElementAttributes_' | pDim;\r\n  IF(\r\n  DimensionExists( sDimAttr ) = 0 );\r\n    sMessage = 'No attributes exist for the dimension: ' | pDim;\r\n    pAlias = '';\r\n  EndIf;\r\n\r\n  IF(DIMIX( sDimAttr, pAlias ) = 0 );\r\n    sMessage = 'The Alias: ' | pAlias | ' does not exist in the dimension: ' | pDim;\r\n    pAlias = '';\r\n  EndIf;\r\n\r\n  IF(DTYPE( sDimAttr, pAlias ) @<> 'AA' );\r\n    sMessage = 'The Alias: ' | pAlias | ' is not an Alias in the dimension: ' | sDimAttr;\r\n    pAlias = '';\r\n  EndIf;\r\nENDIF;\r\n\r\n## Validate pTemp\r\nIF( pTemp <> 0 & pTemp <> 1 );\r\n    nErrors = 1;\r\n    sMessage = 'Wrong parameter pTemp value (only 0 or 1 accepted).';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n### Build Subset ###\r\n\r\nIf( nErrors = 0 );\r\n  nLevel = 0;\r\n  nLevelMax = DnLev( pDim|':'|sHier ) - 1;\r\n  While( nLevel <= nLevelMax );\r\n    # Loop through the levels of the dimension.\r\n    sLevel = NumberToString( nLevel );\r\n    sSubset = 'All Level ' | Fill( '0', 2 - Long( sLevel ) ) | sLevel;\r\n    cSubs = cSubs | ' ' | sSubset | ','  ;\r\n    If( HierarchySubsetExists( pDim, sHier, sSubset ) = 1 );\r\n      # Need to destroy the subset because the subset may change from an MDX subset to a Static Subset.\r\n      HierarchySubsetDestroy( pDim, sHier, sSubset );\r\n    EndIf;\r\n\r\n    # Generate MDX\r\n    sMDX = '{ TM1FILTERBYLEVEL( { TM1SUBSETALL( [' | pDim|':'|sHier | '] ) }, ' | sLevel | ' ) }';\r\n    If( pSort = 1 );\r\n      sMDX = '{ TM1SORT( ' | sMDX | ', ASC ) }';\r\n    EndIf;\r\n\r\n    ## Build Subset for the level.\r\n    If( pConvertStatic = 1 );\r\n      # Convert the subset to a static subset\r\n      sSubsetMDX = '}' | cThisProcName | '.' | NumberToString( Int( Rand() * 100000 ) );\r\n      If( HierarchySubsetExists( pDim, pHier, sSubsetMDX ) = 1 );\r\n        HierarchySubsetDestroy( pDim, sHier, sSubsetMDX );\r\n      EndIF;\r\n      SubsetCreatebyMDX( sSubsetMDX, sMDX, pDim, pTemp );\r\n      nSubsetSize = HierarchySubsetGetSize( pDim, sHier, sSubsetMDX );\r\n      nSubsetIndex = 0;\r\n      HierarchySubsetCreate( pDim, sHier, sSubset, pTemp );\r\n      While( nSubsetIndex < nSubsetSize );\r\n        nSubsetIndex = nSubsetIndex + 1;\r\n        sTemp =    HierarchySubsetElementGetIndex (pDim, sHier, sSubsetMDX, '', nSubsetIndex);\r\n        sElement = HierarchySubsetGetElementName( pDim, sHier, sSubsetMDX, nSubsetIndex );\r\n        HierarchySubsetElementInsert( pDim, sHier, sSubset, sElement, nSubsetIndex );\r\n      End;\r\n    Else;\r\n      SubsetCreatebyMDX( sSubset, sMDX, pDim, pTemp );\r\n    EndIf;\r\n\r\n    ### Assign Alias to subset\r\n    IF(pAlias @<> '' );\r\n      If( nErrors = 0 );\r\n        HierarchySubsetAliasSet( pDim, pHier, sSubset, pAlias );\r\n      EndIf;\r\n    ENDIF;\r\n    nLevel = nLevel + 1;\r\n  End;\r\nEndIf;\r\n\r\n\r\n\r\n\r\n### End Prolog ###",
    "Variables": []
}