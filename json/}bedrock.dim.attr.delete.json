{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction      = Expand( 'Process:%cThisProcName% successfully deleted attribute(s) %pAttr% from dimension(s) %pDim%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###\r\n",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.dim.attr.delete",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pDim",
            "Prompt": "REQUIRED: dimension name parameter accepts delimited list and wildcards(*).",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pAttr",
            "Prompt": "REQUIRED: attribute name parameter accepts delimited list and wildcards (* = ALL).",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: delimiter character for attribute list. (Defaults to & if blank)",
            "Type": "String",
            "Value": "&"
        },
        {
            "Name": "pCtrlObj",
            "Prompt": "REQUIRED: Include control dimensions (1 = include 0 = not include)",
            "Type": "Numeric",
            "Value": "0"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.dim.attr.delete', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n\t    'pDim', '', 'pAttr', '', 'pDelim', '&', 'pCtrlObj', 0\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process can delete one or more attributes in one or more specified dimensions.\r\n#\r\n# Use case: Intended for development/prototyping.\r\n# 1. Clean up unused dimension attributes before going to production\r\n#\r\n# Note:\r\n# * Delimited lists and/or wild card(*) are acceptable for pDim & pAttr\r\n# * Multi-character wildcard \"*\" value for pAttr is evaluated as \"ALL\"\r\n# * You cannot specify \"*\" for **both** pDim and pAttr!\r\n#\r\n# Warning:\r\n# 1. As the process accepts wildcards USE WITH GREAT CARE! As if using wildcards for dimensions and attributes any matching attributes\r\n# in any matching dimensions will be removed from the system.\r\n# 2. Multi-character wildcard \"*\" value for pAttr is evaluated as \"ALL\". Setting pAttr to \"*\" will delete all attributes in the spacified dimension.\r\n#EndRegion @DOC\r\n\r\n### Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName     = GetProcessName();\r\ncUserName         = TM1User();\r\ncTimeStamp        = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt        = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub          = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncMsgInfoContent   = 'User:%cUserName% Process:%cThisProcName% Message:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pDim:%pDim%, pAttr:%pAttr%, pDelim:%pDelim%, pCtrlObj:%pCtrlObj%.';\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\n## Validate dimension\r\nIf( (Trim( pDim ) @= 'ALL' & Trim( pAttr ) @= 'ALL') % (Trim( pDim ) @= '*' & Trim( pAttr ) @= 'ALL') % (Trim( pDim ) @= 'ALL' & Trim( pAttr ) @= '*') % (Trim( pDim ) @= '*' & Trim( pAttr ) @= '*') );\r\n    nErrors = 1;\r\n    sMessage = 'Deleting all attrbitutes from all dimensions is not supported.';\r\n    LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIf( Trim( pDim ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No dimension specified.';\r\n    LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate attribute\r\nIf( Trim( pAttr ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No attribute specified.';\r\n    LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelim @= '' );\r\n    pDelim = '&';\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors > 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n# Loop through dimensions in pDim and attributes in pAttr\r\nsDims = pDim;\r\nnDimDelimiterIndex = 1;\r\nsMdx = '';\r\n# Get 1st dimension\r\nWhile( nDimDelimiterIndex <> 0 );\r\n    # Extract 1st dimension > sDim\r\n    nDimDelimiterIndex = Scan( pDelim, sDims );\r\n    If( nDimDelimiterIndex = 0 );\r\n        sDim = sDims;\r\n    Else;\r\n        sDim = Trim( SubSt( sDims, 1, nDimDelimiterIndex - 1 ) );\r\n        sDims = Trim( Subst( sDims, nDimDelimiterIndex + Long(pDelim), Long( sDims ) ) );\r\n    EndIf;\r\n\r\n      # Create subset of dimensions using Wildcard to loop through dimensions in pDim with wildcard\r\n    sDimExp = '\"'|sDim|'\"';\r\n    IF( pCtrlObj = 1 );\r\n      sMdxPart = '{TM1FILTERBYPATTERN( EXCEPT( TM1SUBSETALL( [}Dimensions] ) , TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions] ) , \"*:*\") ) ,'| sDimExp | ')}';\r\n    ELSE;\r\n      sMdxPart = '{TM1FILTERBYPATTERN( EXCEPT( EXCEPT( TM1SUBSETALL( [}Dimensions] ) , TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions] ) , \"*:*\") ) , TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions] ) , \"}*\" ) ) ,'| sDimExp | ')}';\r\n    ENDIF;\r\n    IF( sMdx @= '');\r\n      sMdx = sMdxPart;\r\n    ELSE;\r\n      sMdx = sMdx | ' + ' | sMdxPart;\r\n    ENDIF;\r\n\r\n    If( SubsetExists( '}Dimensions' , cTempSub ) = 1 );\r\n        # If a delimited list of dim names includes wildcards then we may have to re-use the subset multiple times\r\n        SubsetMDXSet( '}Dimensions' , cTempSub, sMDX );\r\n    Else;\r\n        # temp subset, therefore no need to destroy in epilog\r\n        SubsetCreatebyMDX( cTempSub, sMDX, '}Dimensions' , 1 );\r\n    EndIf;\r\n\r\n    # Loop through dimensions in subset created based on wildcard\r\n    nCountDim = SubsetGetSize( '}Dimensions' , cTempSub );\r\n    While( nCountDim >= 1 );\r\n        sDim = SubsetGetElementName( '}Dimensions' , cTempSub, nCountDim );\r\n        # Validate dimension name\r\n        If( DimensionExists(sDim) = 0 );\r\n            nErrors = 1;\r\n            sMessage = Expand( 'Dimension %sDim% does not exist.' );\r\n            LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n        Else;\r\n            If( pLogOutput = 1 );\r\n              sMessage = Expand( 'Dimension %sDim% being processed....' );\r\n              LogOutput( 'INFO', Expand( cMsgInfoContent ) );\r\n            EndIf;\r\n            # Loop through attributes in pAttr\r\n            sAttrs              = pAttr;\r\n            nDelimiterIndexA    = 1;\r\n            sAttrDim            = '}ElementAttributes_'|sDim ;\r\n            sMdxAttr = '';\r\n            While( nDelimiterIndexA <> 0 );\r\n\r\n                nDelimiterIndexA = Scan( pDelim, sAttrs );\r\n                If( nDelimiterIndexA = 0 );\r\n                    sAttr   = sAttrs;\r\n                Else;\r\n                    sAttr   = Trim( SubSt( sAttrs, 1, nDelimiterIndexA - 1 ) );\r\n                    sAttrs  = Trim( Subst( sAttrs, nDelimiterIndexA + Long(pDelim), Long( sAttrs ) ) );\r\n                EndIf;\r\n\r\n                # Validate if sDim has attributes\r\n                IF( DimensionExists( '}ElementAttributes_'| sDim ) = 0 );\r\n                    sMessage = 'Dimension ' | sDim | ' has no attributes.';\r\n                    LogOutput( 'INFO' , Expand( cMsgInfoContent ) );\r\n                ElseIf( sAttr @= '*' );\r\n                    # Delete attribute cube and dimension if pAttr is blank or set to ALL\r\n                    CubeDestroy( sAttrDim );\r\n                    DimensionDestroy( sAttrDim );\r\n                Else;\r\n                    # Create subset of attributes using Wildcard to loop through attributes in pAttr with wildcard\r\n                    sAttr = '\"'|sAttr|'\"';\r\n                    sMdxAttrPart = '{TM1FILTERBYPATTERN( {TM1SUBSETALL([ ' |sAttrDim| '])},'| sAttr| ')}';\r\n                    IF( sMdxAttr @= '');\r\n                      sMdxAttr = sMdxAttrPart;\r\n                    ELSE;\r\n                      sMdxAttr = sMdxAttr | ' + ' | sMdxAttrPart;\r\n                    ENDIF;\r\n                    If( SubsetExists( sAttrDim, cTempSub ) = 1 );\r\n                        # If a delimited list of attr names includes wildcards then we may have to re-use the subset multiple times\r\n                        SubsetMDXSet( sAttrDim, cTempSub, sMdxAttr );\r\n                    Else;\r\n                        # temp subset, therefore no need to destroy in epilog\r\n                        SubsetCreatebyMDX( cTempSub, sMdxAttr, sAttrDim, 1 );\r\n                    EndIf;\r\n\r\n                    # Loop through subset of attributes created based on wildcard\r\n                    nCountAttr = SubsetGetSize( sAttrDim, cTempSub );\r\n                    While( nCountAttr >= 1 );\r\n                        sAttr = SubsetGetElementName( sAttrDim, cTempSub, nCountAttr );\r\n                        # Validate attribute name in sDim\r\n                        If( Dimix( sAttrDim , sAttr ) = 0 );\r\n                            sMessage = Expand('The %sAttr% attribute does NOT exist in the %sDim% dimension.');\r\n                            LogOutput( 'INFO' , Expand( cMsgInfoContent ) );\r\n                        Else;\r\n                            AttrDelete( sDim , sAttr ) ;\r\n                            If( pLogOutput = 1 );\r\n                                LogOutput( 'INFO', Expand( 'Attribute \"%sAttr%\" deleted from dimension %sDim%.' ) );\r\n                            EndIf;\r\n                        Endif;\r\n                        nCountAttr = nCountAttr - 1;\r\n                    End;\r\n                Endif;\r\n\r\n            End;\r\n        EndIf;\r\n\r\n        nCountDim = nCountDim - 1;\r\n    End;\r\nEnd;\r\n\r\n### End Prolog ###",
    "Variables": []
}