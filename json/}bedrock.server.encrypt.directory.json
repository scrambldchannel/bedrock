{
    "DataProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully processed directory %pDirectory%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;",
    "HasSecurityAccess": false,
    "MetadataProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****",
    "Name": "}bedrock.server.encrypt.directory",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pType",
            "Prompt": "REQUIRED: .rux .dim .pro .cub",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDirectory",
            "Prompt": "REQUIRED: Source directory to be processed",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDestPath",
            "Prompt": "REQUIRED: Directory where to store encrypted files blank = logging directory",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pConfigLocation",
            "Prompt": "REQUIRED: Path to tm1crypt.config file",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pTM1CryptLocation",
            "Prompt": "REQUIRED: Path to tm1crypt.exe",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pAction",
            "Prompt": "REQUIRED: 5 = unencrypt 4 = encrypt",
            "Type": "String",
            "Value": "5"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess('}bedrock.server.encrypt.directory',\r\n       'pLogOutput', pLogOutput,\r\n       'pStrictErrorHandling', pStrictErrorHandling,\r\n       'pType', pType,\r\n       'pDirectory', pDirectory,\r\n       'pDestPath', pDestPath,\r\n       'pConfigLocation', pConfigLocation,\r\n       'pTM1CryptLocation', pTM1CryptLocation,\r\n       'pAction', pAction\r\n    );\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process this process unencrypts all files existing in a directory, using the tm1crypt utility\r\n\r\n# Use case: To encrypts / unencrypts multile file in a directory. Calls sub-process.\r\n\r\n\r\n# Note: Generated commands will only work when the TM1 isntance is entrypted\r\n#\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName       = GetProcessName();\r\ncTimeStamp          = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt          = NumberToString( INT( RAND( ) * 1000 ));\r\ncUserName           = TM1User();\r\ncMsgErrorLevel      = 'ERROR';\r\ncMsgErrorContent    = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo            = 'Process:%cThisProcName% run with parameters pType:%pType%, pDirectory:%pDirectory%, pDestPath:%pDestPath%, pConfigLocation:%pConfigLocation%, pTM1CryptLocation:%pTM1CryptLocation%, pAction:%pAction%.' ;\r\ncMsgInfoContent     = 'User:%cUserName% Process:%cThisProcName% InfoMsg:%sMessage%';\r\nnDataCount        = 0;\r\nnErrors           = 0;\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\n\r\n## check operating system\r\nIf( SubSt( GetProcessErrorFileDirectory, 2, 1 ) @= ':' );\r\n  sOS = 'Windows';\r\n  sOSDelim = '\\';\r\nElseIf( Scan( '/', GetProcessErrorFileDirectory ) > 0 );\r\n  sOS = 'Linux';\r\n  sOSDelim = '/';\r\nElse;\r\n  sOS = 'Windows';\r\n  sOSDelim = '\\';\r\nEndIf;\r\n\r\n## Validate the source directory\r\nIf ( pDirectory @= '' );\r\n    nErrors         = 1;\r\n    sMessage        = 'pDirectory is Blank';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndif;\r\nsSourcePath = pDirectory;\r\nIf ( SubSt ( pDirectory, Long ( pDirectory ), 1 ) @<> sOSDelim );\r\n  sSourcePath = sSourcePath | sOSDelim;\r\nEndIf;\r\n\r\n## Validate the action\r\nsAction = '';\r\nIf ( pAction @= '4' % pAction @= '5');\r\n    sAction = pAction;\r\nELSE;\r\n    nErrors         = 1;\r\n    sMessage        = 'Specified Action is not valid';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n## Validate config and exe\r\nIf ( FileExists( pConfigLocation ) = 0 );\r\n    nErrors         = 1;\r\n    sMessage        = 'Specified config file not found';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndif;\r\n\r\nIf ( FileExists( pTM1CryptLocation ) = 0 );\r\n    nErrors         = 1;\r\n    sMessage        = 'Specified tm1crypt file not found';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndif;\r\n\r\n## Validate the dest path\r\nsDestPath = pDestPath;\r\nIf ( pDestPath @= '' );\r\n    sMessage        = 'pDestPath is Blank, using logging dir';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sDestPath = GetProcessErrorFileDirectory;\r\nEndIf;\r\nIf ( SubSt ( sDestPath, Long ( sDestPath ), 1 ) @<> sOSDelim );\r\n  sDestPath = sDestPath | sOSDelim;\r\nEndIf;\r\n\r\nIf ( sDestPath @= sSourcePath );\r\n    nErrors         = 1;\r\n    sMessage        = 'Destination is the same as source';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndif;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\nsFile = '';\r\nsPrev = '';\r\nsFile = WildcardFileSearch( sSourcePath | '****' | pType , sPrev);\r\n\r\nWhile ( sFile @<> '' );\r\n  IF( pLogoutput = 1 );\r\n      sMessage = 'Processing file: ' | sFile;\r\n      LogOutput('INFO', Expand( cMsgInfoContent ) );\r\n  ENDIF;\r\n  nRet = ExecuteProcess('}bedrock.server.encrypt.file',\r\n     'pSourcePath', sSourcePath,\r\n     'pSourceFile', sFile,\r\n     'pDestPath', sDestPath,\r\n     'pConfigLocation', pConfigLocation,\r\n     'pTM1CryptLocation', pTM1CryptLocation,\r\n     'pAction', pAction\r\n    );\r\n  If( nRet <> ProcessExitNormal() );\r\n      nErrors = nErrors + 1;\r\n      sMessage= 'Error in processing file: %sFile%.';\r\n      DataSourceType = 'NULL';\r\n      LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n  EndIf;\r\n  sPrev = sFile;\r\n  sFile = WildcardFileSearch( sSourcePath | '*' | pType , sPrev);\r\nEnd;\r\n\r\n",
    "Variables": []
}