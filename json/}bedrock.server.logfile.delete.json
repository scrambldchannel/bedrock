{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 3.0.0~~##\r\n#################################################################################################\r\n\r\n### Copy Data Dir to Backup ###\r\nsCommand = sFileName;\r\n\r\nIf(sOS @= 'Windows');\r\n  ExecuteCommand( sCommand, 1 );\r\nElse;\r\n  ExecuteCommand( 'sh ' | sCommand, 1 );\r\nEndIf;\r\nASCIIDelete( sFileName);\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully deleted log files from %pTgtDir% older then  %pLogDays%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.server.logfile.delete",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pTgtDir",
            "Prompt": "OPTIONAL: Log file directory. (Blank = from TM1 configuration file)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pLogDays",
            "Prompt": "REQUIRED: The number of days to retain log Files",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pErrorDays",
            "Prompt": "REQUIRED: The number of day to retain TM1 Error Logs",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pBedrockDays",
            "Prompt": "REQUIRED: The number of days to retain Bedrock Debug Files",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pCSVDays",
            "Prompt": "REQUIRED: The number of days to retain CSV files",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pFileSize",
            "Prompt": "OPTIONAL: The file size of log files (in MB) to exceed before removal (Default=0). Note: for tm1s*.log transaction logs only",
            "Type": "Numeric",
            "Value": "0"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.server.logfile.delete',\r\n      'pLogOutput', pLogOutput, 'pStrictErrorHandling', pStrictErrorHandling,\r\n      'pTgtDir', '', 'pLogDays', 7, 'pErrorDays', 21, 'pBedrockDays', 7, 'pCSVDays', 7, 'pFileSize', 2\r\n    );\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process will deletes the log files, csv file, debug files which are 'x' days old.\r\n\r\n# Use case: Intended for production.\r\n# 1/ Process cleans up old files to save space on hard disk.\r\n\r\n# Note:\r\n# The target directory (pTgtDir) will default to setting in TM1 configuration file if left blank.\r\n#EndRegion @DOC\r\n\r\n### Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName     = GetProcessName();\r\ncUserName         = TM1User();\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pTgtDir:%pTgtDir%, pLogDays:%pLogDays%, pErrorDays:%pErrorDays%, pBedrockDays:%pBedrockDays%, pCSVDays:%pCSVDays%, pFileSize:%pFileSize%.' ;\r\n\r\n## check operating system\r\nIf( SubSt( GetProcessErrorFileDirectory, 2, 1 ) @= ':' );\r\n  sOS = 'Windows';\r\n  sOSDelim = '\\';\r\nElseIf( Scan( '/', GetProcessErrorFileDirectory ) > 0 );\r\n  sOS = 'Linux';\r\n  sOSDelim = '/';\r\nElse;\r\n  sOS = 'Windows';\r\n  sOSDelim = '\\';\r\nEndIf;\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\nIF( pTgtDir @= '');\r\n    pTgtDir = GetProcessErrorFileDirectory;\r\nELSE;\r\n    ## Remove leading and/or trailing spaces\r\n    pTgtDir = Trim( pTgtDir );\r\nENDIF;\r\n\r\n## Remove trailing \\ from directory names if present\r\nIf( SubSt( pTgtDir, Long( pTgtDir ), 1 ) @= sOSDelim );\r\n    pTgtDir = SubSt( pTgtDir, 1, Long( pTgtDir ) - 1 );\r\nEndIf;\r\n\r\n# Check that target Logging Directory exists\r\nIf( FileExists( pTgtDir ) = 0 );\r\n    nErrors = 1;\r\n    sMessage = 'Logging directory does not exist: ' | pTgtDir;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n# Positive file size\r\nIf( pFileSize <= 0 );\r\n  pFileSize = 0;\r\nEndIf;\r\npFileSize = pFileSize * 1024 * 1024;\r\n\r\nsLogDays        = NumberToString( ROUND( pLogDays ) );\r\nsErrorDays      = NumberToString( ROUND( pErrorDays ) );\r\nsBedrockDays    = NumberToString( ROUND( pBedrockDays ) );\r\nsCSVDays        = NumberToString( ROUND( pCSVDays ) );\r\nsFileSize       = NumberToString( ROUND( pFileSize ) );\r\n\r\n### Create Execute File File ###\r\nDatasourceASCIIQuoteCharacter = '';\r\n\r\nIf( sOS @= 'Windows');\r\n  sFileName = GetProcessName() | '.bat';\r\n  If( SubSt(pTgtDir, 1, 2) @<> '\\\\' );\r\n    # local or mapped drive, use forfiles to delete files matching pattern and expiry days\r\n    ASCIIOUTPUT(sFileName, Expand('forfiles -p \"%pTgtDir%\" -s -m tm1s*.log -d -%sLogDays% -c \"cmd /c if @fsize GEQ %sFileSize% del @path\"'));\r\n    ASCIIOUTPUT(sFileName, Expand('forfiles -p \"%pTgtDir%\" -s -m tm1auditstore*.log -d -%sLogDays% -c \"cmd /c del @path\"'));\r\n    ASCIIOUTPUT(sFileName, Expand('forfiles -p \"%pTgtDir%\" -s -m TM1ProcessError*.log -d -%sErrorDays% -c \"cmd /c del @path\"'));\r\n    ASCIIOUTPUT(sFileName, Expand('forfiles -p \"%pTgtDir%\" -s -m Bedrock*.* -d -%sBedrockDays% -c \"cmd /c del @path\"'));\r\n    ASCIIOUTPUT(sFileName, Expand('forfiles -p \"%pTgtDir%\" -s -m *.csv -d -%sCSVDays% -c \"cmd /c del @path\"'));\r\n    ASCIIOUTPUT(sFileName, Expand('forfiles -p \"%pTgtDir%\" -s -m *.cma -d -%sCSVDays% -c \"cmd /c del @path\"'));\r\n    ASCIIOUTPUT(sFileName, Expand('forfiles -p \"%pTgtDir%\" -s -m *.txt -d -%sCSVDays% -c \"cmd /c del @path\"'));\r\n  Else;\r\n    # UNC shared folder path (forfiles command doesn't work with UNC use robocopy instead, create temp dir, move files to temp dir, then delete folder and contents)\r\n    ASCIIOUTPUT(sFileName, Expand('robocopy \"%pTgtDir%\" \"%pTgtDir%\\bedrocklogclear\" \"tm1s*.log\" /mov /purge /minage:%sLogDays% /min:%sFileSize% /copyall /s'));\r\n    ASCIIOUTPUT(sFileName, Expand('robocopy \"%pTgtDir%\" \"%pTgtDir%\\bedrocklogclear\" \"tm1auditstore*.log\" /mov /purge /minage:%sLogDays% /copyall /s'));\r\n    ASCIIOUTPUT(sFileName, Expand('robocopy \"%pTgtDir%\" \"%pTgtDir%\\bedrocklogclear\" \"TM1ProcessError*.log\" /mov /purge /minage:%sBedrockDays% /copyall /s'));\r\n    ASCIIOUTPUT(sFileName, Expand('robocopy \"%pTgtDir%\" \"%pTgtDir%\\bedrocklogclear\" \"Bedrock*.*\" /mov /purge /minage:%sErrorDays% /copyall /s'));\r\n    ASCIIOUTPUT(sFileName, Expand('robocopy \"%pTgtDir%\" \"%pTgtDir%\\bedrocklogclear\" \"*.csv\" /mov /purge /minage:%sCSVDays% /copyall /s'));\r\n    ASCIIOUTPUT(sFileName, Expand('robocopy \"%pTgtDir%\" \"%pTgtDir%\\bedrocklogclear\" \"*.cma\" /mov /purge /minage:%sCSVDays% /copyall /s'));\r\n    ASCIIOUTPUT(sFileName, Expand('robocopy \"%pTgtDir%\" \"%pTgtDir%\\bedrocklogclear\" \"*.txt\" /mov /purge /minage:%sCSVDays% /copyall /s'));\r\n    ASCIIOUTPUT(sFileName, Expand('rmdir /s /q \"%pTgtDir%\\bedrocklogclear\"'));\r\n  EndIf;\r\nElse;\r\n  sFileName = GetProcessName() | '.sh';\r\n  ASCIIOUTPUT(sFileName, Expand('find \"%pTgtDir%\" -type f -mtime +%sLogDays% -name \"tm1s*.log\" -size +%sFileSize%c -exec rm {}\\;'));\r\n  ASCIIOUTPUT(sFileName, Expand('find \"%pTgtDir%\" -type f -mtime +%sLogDays% -name \"tm1auditstore*.log\" -exec rm {}\\;'));\r\n  ASCIIOUTPUT(sFileName, Expand('find \"%pTgtDir%\" -type f -mtime +%sErrorDays% -name \"TM1ProcessError*.log\" -exec rm {}\\;'));\r\n  ASCIIOUTPUT(sFileName, Expand('find \"%pTgtDir%\" -type f -mtime +%sBedrockDays% -name \"bedrock*.*\" -exec rm {}\\;'));\r\n  ASCIIOUTPUT(sFileName, Expand('find \"%pTgtDir%\" -type f -mtime +%sCSVDays% -name \"*.csv\" -exec rm {}\\;'));\r\n  ASCIIOUTPUT(sFileName, Expand('find \"%pTgtDir%\" -type f -mtime +%sCSVDays% -name \"*.cma\" -exec rm {}\\;'));\r\n  ASCIIOUTPUT(sFileName, Expand('find \"%pTgtDir%\" -type f -mtime +%sCSVDays% -name \"*.txt\" -exec rm {}\\;'));\r\nEndIf;\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}