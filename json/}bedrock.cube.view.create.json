{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling ###\r\nIf( nErrors <> 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( 'ERROR' , Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    Else;\r\n        ProcessBreak;\r\n    EndIf;\r\nElse;\r\n\r\n    sProcessAction      = Expand( 'Process:%cThisProcName% successfully created View %pView% in Cube %pCube%.' );\r\n    sProcessReturnCode  = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode  = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.cube.view.create",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pCube",
            "Prompt": "REQUIRED: Cube Name",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pView",
            "Prompt": "REQUIRED: Name of the View",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pFilter",
            "Prompt": "OPTIONAL: Filter: Year\u00a6 2006 + 2007 & Scenario\u00a6 Actual + Budget & Organization\u00a6 North America Operations",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pSuppressZero",
            "Prompt": "REQUIRED: Suppress Zero Data (Skip = 1)",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pSuppressConsol",
            "Prompt": "REQUIRED: Suppress Consolidations (Skip = 1)",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pSuppressRules",
            "Prompt": "REQUIRED: Suppress Rules (Skip = 1)",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pSuppressConsolStrings",
            "Prompt": "REQUIRED: Suppress Strings on Consolidations (Skip = 1 Include = 0) (Default [Skip] = -1 for backward compatibility)",
            "Type": "Numeric",
            "Value": "-1"
        },
        {
            "Name": "pDimDelim",
            "Prompt": "REQUIRED: Delimiter for start of Dimension/Element set",
            "Type": "String",
            "Value": "&"
        },
        {
            "Name": "pEleStartDelim",
            "Prompt": "REQUIRED: Delimiter for start of element list",
            "Type": "String",
            "Value": "\u00a6"
        },
        {
            "Name": "pEleDelim",
            "Prompt": "REQUIRED: Delimiter between elements",
            "Type": "String",
            "Value": "+"
        },
        {
            "Name": "pTemp",
            "Prompt": "OPTIONAL: Make View Temporary (1=Temporary)",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pSubN",
            "Prompt": "OPTIONAL: Create N level subset for all dims not mentioned in pFilter",
            "Type": "Numeric",
            "Value": "0"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.cube.view.create', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pCube', '', 'pView', '', 'pFilter', '',\r\n    \t'pSuppressZero', 1, 'pSuppressConsol', 1, 'pSuppressRules', 1, 'pSuppressConsolStrings', 1,\r\n    \t'pDimDelim', '&', 'pEleStartDelim', '\u00a6', 'pEleDelim', '+',\r\n    \t'pTemp', 1, 'pSubN', 0\r\n    );\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***s\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process creates a view that can be used for exporting, copying or zeroing out numbers.\r\n\r\n# Use case: Intended for development/prototyping or production.\r\n# 1/ Create a view to zero out data.\r\n# 2/ Create a view to use as a source for exporting or copying.\r\n\r\n# Note:\r\n# Naturally, a valid cube name (pCube) is mandatory otherwise the process will abort.\r\n# The pFilter parameter contains the dimenson and elements to be used for filtering:\r\n# - The format of the pFilter parameter is as follows delimiters of :, & and +: Dim1: Elem1 + Elem2 & Dim2: Elem3 + Elem4.\r\n# - The dimension parameters do not need to be given in the index order of dimensions in the cube.\r\n# - The dimension name is specified as the first member of the delimited string of elements.\r\n# - If consols are skipped the N level children of any consolidated filter elements will be used.\r\n# - Spaces are ignored so use them to make your filter more readable.\r\n# - pTemp: This parameter will control whether to make the view temporary (value 1) or if the\r\n#   view will be permanently retained (value 0).\r\n#EndRegion @DOC\r\n\r\n### Global Variables\r\nStringGlobalVariable ('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nStringGlobalVariable('sBedrockViewCreateParsedFilter');\r\nsProcessReturnCode = '';\r\nnProcessReturnCode = 0;\r\n\r\n### Constants ###\r\ncThisProcName     = GetProcessName();\r\ncUserName         = TM1User();\r\ncTimeStamp        = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt        = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSubset       = cThisProcName | '_' | cTimeStamp | '_' | cRandomInt;\r\ncTempFile         = GetProcessErrorFileDirectory | cTempSubset | '.csv';\r\nsMessage          = '';\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncMsgInfoLevel     =  'INFO';\r\ncMsgInfoContent   = '%cThisProcName% : %sMessage% : %cUserName%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pCube:%pCube%, pView:%pView%, pFilter:%pFilter%, pSuppressZero:%pSuppressZero%, pSuppressConsol:%pSuppressConsol%, pSuppressRules:%pSuppressRules%, pDimDelim:%pDimDelim%, pEleStartDelim:%pEleStartDelim%, pEleDelim:%pEleDelim%, pTemp:%pTemp%, pSuppressConsolStrings:%pSuppressConsolStrings%.' ;\r\n\r\n\r\nsSubset           = pView;\r\nsDelimDim         = TRIM(pDimDelim);\r\nsElementStartDelim= TRIM(pEleStartDelim);\r\nsDelimElem        = TRIM(pEleDelim);\r\n\r\n## LogOutput parameters\r\nIF ( pLogoutput = 1 );\r\n  LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\nnErrors = 0;\r\n\r\n### Validate Parameters ###\r\n\r\n## Default filter delimiters\r\nIf( pDimDelim     @= '' );\r\n    pDimDelim     = '&';\r\nEndIf;\r\nIf( pEleStartDelim@= '' );\r\n    pEleStartDelim= '\u00a6';\r\nEndIf;\r\nIf( pEleDelim     @= '' );\r\n    pEleDelim     = '+';\r\nEndIf;\r\n\r\n# If specified cube does not exist then terminate process\r\nIf( Trim( pCube ) @= '' );\r\n  sMessage = 'A cube name must be provided.';\r\n  nErrors = nErrors + 1;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIf( CubeExists( pCube ) = 0 );\r\n  sMessage = 'Cube: ' | pCube | ' does not exist.';\r\n  nErrors = nErrors + 1;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n## Validate the View parameter\r\nIf( Trim( pView ) @= '' );\r\n  sMessage = 'A view name must be provided.';\r\n  nErrors = nErrors + 1;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Check the delimiters\r\nIf( sDelimDim @= sElementStartDelim % sDelimDim @= sDelimElem % sElementStartDelim @= sDelimElem );\r\n  sMessage = 'The delimiters cannot be the same';\r\n  nErrors = nErrors + 1;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n## Validate pTemp\r\nIF( pTemp<> 0 & pTemp<> 1 );\r\n    nErrors = 1;\r\n    sMessage = 'Invalid value for pTemp' | NumberToString( pTemp ) | '. Valid values are 0 and 1';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n### If errors occurred terminate process with a major error status ###\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n# Reset all of the subsets that may be attached to the view in the case that dimensions not in the filter\r\nIf( ViewExists( pCube, pView ) = 1 );\r\n    ### Reset View ###\r\n    sMessage = 'Resetting view ' | pView | ' on cube ' | pCube;\r\n    IF ( pLogoutput = 1 );\r\n       LogOutput( cMsgInfoLevel, Expand( cMsgInfoContent ) );\r\n    EndIf;\r\n    nCount = 1;\r\n    While( TabDim( pCube, nCount ) @<> '' );\r\n        sCubeDimName = TabDim( pCube, nCount );\r\n        # Subset is the same name as the view (no way to test if subset assigned, assume it is if same name)\r\n        If( SubsetExists( sCubeDimName, sSubset ) = 1 );\r\n            # Add all elements\r\n            If( SubsetIsAllSet(sCubeDimName, sSubset, 1) <> 1 );\r\n                sMessage = Expand('Unable to add all elements on subset %sSubset% in dimension %sCubeDimName%');\r\n                nErrors = nErrors + 1;\r\n                LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n            EndIf;\r\n        EndIf;\r\n        nCount = nCount + 1;\r\n    End;\r\nElse;\r\n    ### Create View ###\r\n    sMessage = Expand('Creating view %pView% in cube %pCube%');\r\n    IF ( pLogoutput = 1 );\r\n       LogOutput( cMsgInfoLevel, Expand( cMsgInfoContent ) );\r\n    EndIf;\r\n    ViewCreate( pCube, pView, pTemp );\r\nEndIf;\r\n\r\nViewExtractSkipCalcsSet( pCube, pView, pSuppressConsol );\r\nViewExtractSkipZeroesSet( pCube, pView, pSuppressZero );\r\nViewExtractSkipRuleValuesSet( pCube, pView, pSuppressRules );\r\n# Fix of issue #141, https://github.com/cubewise-code/bedrock/issues/141\r\nIf( pSuppressConsolStrings <> -1 );\r\n    ViewExtractSkipConsolidatedStringsSet( pCube, pView, pSuppressConsolStrings );\r\nEndIf;\r\n\r\n### Split filter and create subsets ###\r\nsFilter = TRIM( pFilter );\r\nsParsedFilter = '';\r\nnChar = 1;\r\nnCharCount = LONG( sFilter );\r\nsWord = '';\r\nsLastDelim = '';\r\nnIndex = 1;\r\n# Add a trailing element delimiter so that the last element is picked up\r\nIf( nCharCount > 0 );\r\n  sFilter = sFilter | sDelimElem;\r\n  nCharCount = nCharCount + LONG(sDelimElem);\r\nEndIf;\r\n\r\nWHILE (nChar <= nCharCount);\r\n    sChar = SUBST( sFilter, nChar, 1);\r\n\r\n    # Used for delimiters, required for multiple character delimiters\r\n    sDelim = '';\r\n    nAddExtra = 0;\r\n\r\n    # Ignore spaces\r\n    IF (TRIM(sChar) @<> '' );\r\n\r\n      ### Dimension Name ###\r\n\r\n      # If the delimiter is more than 1 character peek ahead the same amount\r\n      # Ignore the first character\r\n      sDelim = sChar;\r\n      nCount = LONG(sElementStartDelim) - 1;\r\n      If( nCount > 0 & nChar + nCount <= nCharCount );\r\n        # Add the extra characters\r\n        sDelim = sDelim | SUBST( sFilter, nChar + 1, nCount);\r\n        # Move to the end of the delimter\r\n        nAddExtra = nCount;\r\n      EndIf;\r\n\r\n      If( sDelim @= sElementStartDelim );\r\n\r\n        sChar = sDelim;\r\n\r\n        If( sLastDelim @<> '' & sLastDelim @<> sDelimDim );\r\n            sMessage = 'The name of a dimension must follow a dimension delimiter (' | sDelimDim | ')';\r\n            nErrors = nErrors + 1;\r\n            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n        EndIf;\r\n\r\n        sDimension = sWord;\r\n        nOneDimEleAdded = 0;\r\n\r\n        If( DimensionExists( sDimension ) = 0 );\r\n            # The dimension does not exist in the model. Cancel process\r\n            sMessage = 'Dimension: ' | sDimension | ' does not exist';\r\n            nErrors = nErrors + 1;\r\n            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n        EndIf;\r\n\r\n        ### Determine the dimension is a member of the cube ###\r\n        nCount = 1;\r\n        nDimensionIndex = 0;\r\n        While( TabDim( pCube, nCount ) @<> '' );\r\n            sCubeDimName = TabDim( pCube, nCount );\r\n            If( sDimension @= sCubeDimName );\r\n                nDimensionIndex = nCount;\r\n            EndIf;\r\n            nCount = nCount + 1;\r\n        End;\r\n\r\n        If( nDimensionIndex = 0 );\r\n            # The dimension does not exist in the cube. Cancel process\r\n            sMessage = 'Dimension: ' | sDimension | ' is not a member of: '| pCube | 'cube.';\r\n            nErrors = nErrors + 1;\r\n            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n        EndIf;\r\n\r\n        # Create the subset\r\n        If( SubsetExists( sDimension, sSubset ) = 1 );\r\n            SubsetDeleteAllElements( sDimension, sSubset );\r\n        Else;\r\n            SubsetCreate( sDimension, sSubset, pTemp );\r\n        EndIf;\r\n\r\n        # Attach to the view\r\n        ViewSubsetAssign( pCube, pView, sDimension, sSubset );\r\n\r\n        #Add to the Parsed filter\r\n        IF(sParsedFilter@='');\r\n          sParsedFilter=sDimension;\r\n        Else;\r\n          sParsedFilter=sParsedFilter|sDelimDim|sDimension;\r\n        Endif;\r\n\r\n        nIndex = 1;\r\n        sLastDelim = sChar;\r\n        # Clear the word\r\n        sWord = '';\r\n      Else;\r\n\r\n        # Reset extra chars\r\n        nAddExtra = 0;\r\n\r\n        ### Check both both dim delimiter and element delimiter ###\r\n        nIsDelimiter = 0;\r\n\r\n        ## Check dimension delimiter first\r\n        # If the delimiter is more than 1 character peek ahead the same amount\r\n        # Ignore the first character\r\n        sDelim = sChar;\r\n        nCount = LONG(sDelimDim) - 1;\r\n        If( nCount > 0 & nChar + nCount <= nCharCount );\r\n          # Add the extra characters\r\n          sDelim = sDelim | SUBST( sFilter, nChar + 1, nCount);\r\n          # Move to the end of the delimter\r\n          nAddExtra = nCount;\r\n        EndIf;\r\n\r\n        If( sDelim @= sDelimDim );\r\n          nIsDelimiter = 1;\r\n          sChar = sDelim;\r\n        Else;\r\n          # Reset extra chars\r\n          nAddExtra = 0;\r\n\r\n          ## Check element delimiter\r\n\r\n          # If the delimiter is more than 1 character peek ahead the same amount\r\n          # Ignore the first character\r\n          sDelim = sChar;\r\n          nCount = LONG(sDelimElem) - 1;\r\n          If( nCount > 0 & nChar + nCount <= nCharCount );\r\n            # Add the extra characters\r\n            sDelim = sDelim | SUBST( sFilter, nChar + 1, nCount);\r\n            # Move to the end of the delimter\r\n            nAddExtra = nCount;\r\n          EndIf;\r\n\r\n          If( sDelim @= sDelimElem );\r\n            nIsDelimiter = 1;\r\n            sChar = sDelim;\r\n          Else;\r\n            # Reset extra chars\r\n            nAddExtra = 0;\r\n          EndIf;\r\n\r\n        EndIf;\r\n\r\n        If ( nIsDelimiter = 1 );\r\n\r\n          If( sLastDelim @= '' % sLastDelim @= sDelimDim );\r\n            sMessage = 'An element delimiter must follow a dimension name: ' |  sChar | ' (' | NumberToString(nChar) | ')';\r\n            nErrors = nErrors + 1;\r\n            LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n            #ProcessError();\r\n          EndIf;\r\n\r\n          sElement = sWord;\r\n\r\n          If( DIMIX( sDimension, sElement ) = 0 );\r\n              # The element does not exist in the dimension. Cancel process\r\n              sMessage = 'Element: ' | sElement | ' in dimension ' | sDimension | ' does not exist';\r\n              nErrors = nErrors + 1;\r\n              LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n              #ProcessError();\r\n          EndIf;\r\n\r\n          sElement = DimensionElementPrincipalName(sDimension,sElement);\r\n\r\n          If ( pSuppressConsol = 1 & DTYPE( sDimension, sElement) @= 'C'  );\r\n              # Add all N level elements to the subset\r\n              # Loop through all elements and check if it is an ancestor\r\n              sMessage = 'Element ' | sElement | ' is consolidated' ;\r\n              IF ( pLogoutput = 1 );\r\n                LogOutput( cMsgInfoLevel, Expand( cMsgInfoContent ) );\r\n              EndIf;\r\n              nElCount = DIMSIZ ( sDimension );\r\n              n = 1;\r\n              WHILE ( n <= nElCount );\r\n                  sEl = DIMNM( sDimension, n );\r\n                  IF( DTYPE( sDimension, sEl) @<> 'C' & ELISANC( sDimension, sElement, sEl ) = 1 );\r\n                      SubsetElementInsert( sDimension, sSubset, sEl, 0 );\r\n                  EndIf;\r\n                  n = n + 1;\r\n              END;\r\n\r\n              # Add the consolidated element to the subset as well to export strings, if necessary\r\n              If ( pSuppressConsolStrings = 0 );\r\n                SubsetElementInsert( sDimension, sSubset, sElement, 0 );\r\n              EndIf;\r\n\r\n          Else;\r\n              # Add the element to the subset\r\n              SubsetElementInsert( sDimension, sSubset, sElement, 0 );\r\n          EndIf;\r\n\r\n          #Add to the Parsed filter\r\n          If( nOneDimEleAdded = 0 );\r\n            sParsedFilter=sParsedFilter|pEleStartDelim|sElement;\r\n            nOneDimEleAdded = nOneDimEleAdded + 1;\r\n          Else;\r\n            sParsedFilter=sParsedFilter|sDelimElem|sElement;\r\n          EndIf;\r\n\r\n          nIndex = nIndex + 1;\r\n          sLastDelim = sChar;\r\n\r\n          # Clear the word\r\n          sWord = '';\r\n        Else;\r\n          sWord = sWord | sChar;\r\n        EndIf;\r\n\r\n      EndIf;\r\n\r\n    EndIf;\r\n\r\n    nChar = nChar + nAddExtra + 1;\r\n\r\nEND;\r\nsBedrockViewCreateParsedFilter = sParsedFilter;\r\n\r\n# creating N level subset for all dim not included in pFilter\r\n# useful when suppress consolidation is not on\r\nIf(pSubN = 1);\r\n\r\n    nCountDimC = 1;\r\n    While( TabDim( pCube, nCountDimC ) @<> '' );\r\n        sDimC = TabDim( pCube, nCountDimC );\r\n        sDimString = lower(sDimC);\r\n\r\n        # filters created by other bedrock processes skip spaces from dim names and between separators\r\n        While(Scan(' ',sDimString)>0);\r\n            sDimString = subst(sDimString, 1, Scan(' ',sDimString)-1)|subst(sDimString,Scan(' ',sDimString)+1,long(sDimString));\r\n        End;\r\n        sTFilter = lower(sFilter);\r\n        While(Scan(' ',sTFilter)>0);\r\n            sTFilter = subst(sTFilter, 1, Scan(' ',sTFilter)-1)|subst(sTFilter,Scan(' ',sTFilter)+1,long(sTFilter));\r\n        End;\r\n\r\n        # to make sure that the name of the dim is not part of the name of another dim\r\n        If(Scan(pDimDelim|sDimString|pEleStartDelim, sTFilter)=0 & Scan(sDimString|pEleStartDelim, sTFilter)<>1);\r\n            sProc   = '}bedrock.hier.sub.create';\r\n            nRet    = ExecuteProcess( sProc,\r\n                'pLogOutput', pLogOutput,\r\n                'pStrictErrorHandling', pStrictErrorHandling,\r\n                'pDim', sDimC,\r\n                'pHier', '',\r\n                'pSub', sSubset,\r\n                'pConsol', '',\r\n                'pAttr', '',\r\n                'pAttrValue', '',\r\n                'pLevelFrom', 0,\r\n                'pLevelTo', 0,\r\n                'pExclusions', '',\r\n                'pDelim', pEleDelim,\r\n                'pAddToSubset', 0,\r\n                'pAlias', '',\r\n                'pTemp', pTemp\r\n            );\r\n\r\n            IF(nRet <> 0);\r\n                sMessage = 'Error creating the view from the filter.';\r\n                nErrors = nErrors + 1;\r\n                LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n                If( pStrictErrorHandling = 1 );\r\n                    ProcessQuit;\r\n                Else;\r\n                    ProcessBreak;\r\n                EndIf;\r\n            ENDIF;\r\n\r\n            ViewSubsetAssign( pCube, pView, sDimC, sSubset );\r\n\r\n        EndIf;\r\n\r\n        nCountDimC = nCountDimC + 1;\r\n    End;\r\n\r\n  EndIf;",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}