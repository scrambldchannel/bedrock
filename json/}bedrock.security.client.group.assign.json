{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully performed %pAddOrRemove% for client %pClient% to group %pGroup%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.security.client.group.assign",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pClient",
            "Prompt": "REQUIRED: Client Names Separated by Delimiter and accepts wildcards",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pGroup",
            "Prompt": "REQUIRED: Group Names Separated by Delimiter and excepts wildcards",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: Delimiter (default value if blank = '&')",
            "Type": "String",
            "Value": "&"
        },
        {
            "Name": "pAddOrRemove",
            "Prompt": "REQUIRED: Add or Remove",
            "Type": "String",
            "Value": "Add"
        },
        {
            "Name": "pSecurityRefresh",
            "Prompt": "REQUIRED: Refresh Security?",
            "Type": "String",
            "Value": "Yes"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.security.client.group.assign', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pClient', '', 'pGroup', '',\r\n    \t'pDelim','&', 'pAddOrRemove', 'Add', 'pSecurityRefresh', 'Yes'\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process will assign Client and Group Security.\r\n\r\n# Use case: Intended for production.\r\n# 1/ After adding new user(s) using '}bedrock.security.client.create' they must be assigned to groups.\r\n\r\n# Note:\r\n# Naturally, valid  client (pClient) is mandatory otherwise the process can't make assignments:\r\n# - This process can either add or remove clients to groups based on pAddOrRemove.\r\n# - This process can work on a single client or multiple clients separated by a delimiter.\r\n# - This process can work on a single group or multiple groups separated by a delimiter.\r\n# - Therefore, it can be used to:\r\n#   - Add/remove a single client to/from a single group.\r\n#   - Add/remove many clients to/from a single group.\r\n#   - Add/remove a single client to/from many groups.\r\n#   - Add/remove many clients to/from many groups.\r\n# - The caller can choose whether or not to refresh security at the end. Default is yes.\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName = GetProcessName();\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncUserName         = TM1User();\r\ncTempSub          = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pClient:%pClient%, pGroup:%pGroup%, pDelim:%pDelim%, pAddOrRemove:%pAddOrRemove%, pSecurityRefresh:%pSecurityRefresh%.' ;\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\n# If no clients have been specified then terminate process\r\nIf( Trim( pClient ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No clients specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# If no groups have been specified then terminate process\r\nIf( Trim( pGroup ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No groups specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# If pSecurityRefresh is blank then default to yes\r\nIf( Trim( pSecurityRefresh ) @= '' );\r\n    pSecurityRefresh = 'Yes';\r\nEndIf;\r\n\r\n# If pAddOrDelete has not been specified correctly then terminate process\r\nIf( Upper( pAddOrRemove ) @<> 'ADD' & Upper( pAddOrRemove ) @<> 'REMOVE' );\r\n    nErrors = 1;\r\n    sMessage = 'Incorrect value for pAddOrRemove: ' | pAddOrRemove | '. Valid values are Add or Remove';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# If pSecurityRefresh has not been specified correctly then terminate process\r\nIf( Upper( pSecurityRefresh ) @<> 'YES' & Upper( pSecurityRefresh ) @<> 'NO' );\r\n    nErrors = 1;\r\n    sMessage = 'Incorrect value for pSecurityRefresh: ' | pSecurityRefresh | '. Valid values are Yes or No';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelim @= '' );\r\n  pDelim = '&';\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Add/remove clients to/from groups ###\r\n\r\n# Loop through list of clients\r\nsClients            = pClient;\r\nnClientDelimIndex   = 1;\r\nWhile( nClientDelimIndex <> 0 );\r\n  nClientDelimIndex = Scan( pDelim, sClients );\r\n  If( nClientDelimIndex = 0 );\r\n    sClient         = sClients;\r\n  Else;\r\n    sClient         = Trim( SubSt( sClients, 1, nClientDelimIndex - 1 ) );\r\n    sClients        = Trim( Subst( sClients, nClientDelimIndex + Long(pDelim), Long( sClients ) ) );\r\n  EndIf;\r\n\r\n  If(Scan('*', sClient) = 0 & Scan('?', sClient) = 0);\r\n  # Don't attempt to process a blank client\r\n   If( sClient @<> '' );\r\n     # Check that client exists\r\n     If( DimIx( '}Clients', sClient ) = 0 );\r\n        nErrors     = 1;\r\n        sMessage    = 'Client: ' | sClient | ' does not exists';\r\n        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n     ELSE;\r\n        # Loop through list of Groups\r\n        sGroups                 = pGroup;\r\n        nGroupDelimIndex        = 1;\r\n        While( nGroupDelimIndex <> 0 );\r\n            nGroupDelimIndex    = Scan( pDelim, sGroups );\r\n            If( nGroupDelimIndex = 0 );\r\n                sGroup          = sGroups;\r\n            Else;\r\n                sGroup          = Trim( SubSt( sGroups, 1, nGroupDelimIndex - 1 ) );\r\n                sGroups         = Trim( Subst( sGroups, nGroupDelimIndex + Long(pDelim), Long( sGroups ) ) );\r\n            EndIf;\r\n            If( Scan( '*', sGroup ) = 0 & Scan('?', sGroup ) = 0 );\r\n                # Don't attempt to process a blank Group\r\n                If( sGroup @<> '' );\r\n                    # Check that group exists\r\n                    If( DimIx( '}Groups', sGroup ) = 0 );\r\n                        nErrors = 1;\r\n                        sMessage = 'Group: ' | sGroup | ' does not exists';\r\n                        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n                    ELSE;\r\n                        # Add/Remove Client\r\n                        If( Upper( pAddOrRemove ) @= 'ADD' );\r\n                            AssignClientToGroup( sClient, sGroup );\r\n                        ElseIf( Upper( pAddOrRemove ) @= 'REMOVE' );\r\n                            RemoveClientFromGroup( sClient, sGroup );\r\n                        EndIf;\r\n                    EndIf;\r\n                EndIf;\r\n            ELSE;\r\n                # Wildcard search string\r\n                sGroup = '\"'|sGroup|'\"';\r\n                sGroupDim = '}Groups';\r\n                sMdx = '{TM1FILTERBYPATTERN( {TM1SUBSETALL([ ' |sGroupDim| '])},'| sGroup| ')}';\r\n                If( SubsetExists( sGroupDim, cTempSub ) = 1 );\r\n                    # If a delimited list of Groups includes wildcards then we may have to re-use the subset multiple times\r\n                    SubsetMDXSet( sGroupDim, cTempSub, sMDX );\r\n                Else;\r\n                    # temp subset, therefore no need to destroy in epilog\r\n                    SubsetCreatebyMDX( cTempSub, sMDX, sGroupDim, 1 );\r\n                EndIf;\r\n                nCountGrp = SubsetGetSize( sGroupDim, cTempSub );\r\n                While( nCountGrp >= 1 );\r\n                    sGroup = SubsetGetElementName( sGroupDim, cTempSub, nCountGrp );\r\n                    # Add/Remove Client\r\n                    If( Upper( pAddOrRemove ) @= 'ADD' );\r\n                        AssignClientToGroup( sClient, sGroup );\r\n                    ElseIf( Upper( pAddOrRemove ) @= 'REMOVE' );\r\n                        RemoveClientFromGroup( sClient, sGroup );\r\n                    EndIf;\r\n                    nCountGrp = nCountGrp - 1;\r\n                End;\r\n            Endif;\r\n        End;\r\n     EndIf;\r\n   EndIf;\r\n  ELSE;\r\n  # Wildcard search string\r\n        sClientDim = '}Clients';\r\n        sClient = '\"'|sClient|'\"';\r\n        sMdx = '{TM1FILTERBYPATTERN( {TM1SUBSETALL([ ' |sClientDim| '])},'| sClient| ')}';\r\n        If( SubsetExists( sClientDim, cTempSub ) = 1 );\r\n            # If a delimited list of Clients includes wildcards then we may have to re-use the subset multiple times\r\n            SubsetMDXSet( sClientDim, cTempSub, sMDX );\r\n        Else;\r\n            # temp subset, therefore no need to destroy in epilog\r\n            SubsetCreatebyMDX( cTempSub, sMDX, sClientDim, 1 );\r\n        EndIf;\r\n        # Loop through dimensions in clients with wildcard\r\n        nCountClient = SubsetGetSize( '}Clients' , cTempSub );\r\n        While( nCountClient >= 1 );\r\n\r\n            sClient = SubsetGetElementName( '}Clients' , cTempSub, nCountClient );\r\n            # Validate client name\r\n            If( Dimix('}Clients', sClient) = 0 );\r\n                nErrors = 1;\r\n                sMessage = Expand( 'Client \"%sClient%\" does not exist.' );\r\n                LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n            Else;\r\n              # Loop through list of Groups\r\n              sGroups = pGroup;\r\n              nGroupDelimIndex = 1;\r\n              While( nGroupDelimIndex <> 0 );\r\n                nGroupDelimIndex = Scan( pDelim, sGroups );\r\n                If( nGroupDelimIndex = 0 );\r\n                   sGroup = sGroups;\r\n                Else;\r\n                   sGroup = Trim( SubSt( sGroups, 1, nGroupDelimIndex - 1 ) );\r\n                   sGroups = Trim( Subst( sGroups, nGroupDelimIndex + Long(pDelim), Long( sGroups ) ) );\r\n                EndIf;\r\n                If( Scan( '*', sGroup ) = 0 & Scan('?',sGroup ) = 0);\r\n                  # Don't attempt to process a blank Group\r\n                  If( sGroup @<> '' );\r\n                    # Check that group exists\r\n                    If( DimIx( '}Groups', sGroup ) = 0 );\r\n                        nErrors = 1;\r\n                        sMessage = 'Group: ' | sGroup | ' does not exists';\r\n                        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n                    ELSE;\r\n                      # Add/Remove Client\r\n                      If( Upper( pAddOrRemove ) @= 'ADD' );\r\n                        AssignClientToGroup( sClient, sGroup );\r\n                      ElseIf( Upper( pAddOrRemove ) @= 'REMOVE' );\r\n                        RemoveClientFromGroup( sClient, sGroup );\r\n                      EndIf;\r\n                    EndIf;\r\n                  EndIf;\r\n                ELSE;\r\n                # Wildcard search string\r\n                sGroup = '\"'|sGroup|'\"';\r\n                sGroupDim = '}Groups';\r\n                sMdx = '{TM1FILTERBYPATTERN( {TM1SUBSETALL([ ' |sGroupDim| '])},'| sGroup| ')}';\r\n                If( SubsetExists( sGroupDim, cTempSub ) = 1 );\r\n                   # If a delimited list of objects includes wildcards then we may have to re-use the subset multiple times\r\n                   SubsetMDXSet( sGroupDim, cTempSub, sMDX );\r\n                Else;\r\n                   # temp subset, therefore no need to destroy in epilog\r\n                   SubsetCreatebyMDX( cTempSub, sMDX, sGroupDim, 1 );\r\n                EndIf;\r\n                nCountGrp = SubsetGetSize( sGroupDim, cTempSub );\r\n                  While( nCountGrp >= 1 );\r\n                      sGroup = SubsetGetElementName( sGroupDim, cTempSub, nCountGrp );\r\n                      # Add/Remove Client\r\n                      If( Upper( pAddOrRemove ) @= 'ADD' );\r\n                          AssignClientToGroup( sClient, sGroup );\r\n                      ElseIf( Upper( pAddOrRemove ) @= 'REMOVE' );\r\n                          RemoveClientFromGroup( sClient, sGroup );\r\n                      EndIf;\r\n                      nCountGrp = nCountGrp - 1;\r\n                  End;\r\n               EndIf;\r\n              End;\r\n            Endif;\r\n            nCountClient = nCountClient - 1;\r\n        End;\r\n  Endif;\r\nEnd;\r\n\r\n\r\n### Refresh Security ###\r\n\r\nIf( Upper( pSecurityRefresh ) @= 'YES' );\r\n  SecurityRefresh;\r\nEndIf;\r\n\r\n\r\n### End Prolog ###",
    "Variables": []
}