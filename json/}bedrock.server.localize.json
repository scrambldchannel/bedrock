{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% localized cube & dimension names & localized attributes for dimensions %pDim%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.server.localize",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pDim",
            "Prompt": "OPTIONAL: Dimension (Delimited list & wildcards (*) acceptable)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pCube",
            "Prompt": "OPTIONAL: Cube( Delimited list & wildcards (*) acceptable)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: delimiter character for dimension list. (Defaults to & if blank)",
            "Type": "String",
            "Value": "&"
        },
        {
            "Name": "pSub",
            "Prompt": "OPTIONAL: If localizing attributes for a dimension also localize subset names?",
            "Type": "Numeric",
            "Value": "0"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.server.localize', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n\t    'pDim', '', 'pCube', '', 'pDelim', '&', 'pSub', 0\r\n    );\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~ Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0 ~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process localizes cube & dimension names & optionally localizes:\r\n# * attributes for specified dimension(s)\r\n# * subsets for specified dimension(s)\r\n# * views for specified cube(s)\r\n\r\n# Note:\r\n# If no dimension or cube names are passed, then just cube & dimension names will be localized.\r\n#EndRegion @DOC\r\n\r\n### Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName     = GetProcessName();\r\ncUserName         = TM1User();\r\ncTimeStamp        = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt        = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub          = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pDim:%pDim%, pDelim:%pDelim%.';\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\nIf( Trim( pDelim ) @= '' );\r\n    pDelim = '&';\r\nEndIf;\r\n\r\nIf( pSub <> 1 );\r\n    pSub = 0;\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\nIF( CubeExists( '}CubeAttributes' ) = 0 );\r\n    CubeAttrInsert( '', 'Caption', 'S');\r\nELSEIF( DimIx( '}CubeAttributes', 'Caption' ) = 0 );\r\n    CubeAttrInsert( '', 'Caption', 'S');\r\nENDIF;\r\nIF( CubeExists( '}DimensionAttributes' ) = 0 );\r\n    DimensionAttrInsert( '', 'Caption', 'S');\r\nELSEIF( DimIx( '}DimensionAttributes', 'Caption' ) = 0 );\r\n    DimensionAttrInsert( '', 'Caption', 'S');\r\nENDIF;\r\n\r\nIF( CubeExists( '}LocalizedCubeAttributes' ) = 0 );\r\n    CubeAttrPutS( '', '}CubeAttributes', 'Caption', 'en');\r\nENDIF;\r\nIF( CubeExists( '}LocalizedDimensionAttributes' ) = 0 );\r\n    DimensionAttrPutS( '', '}Cultures', 'Caption', 'en');\r\nENDIF;\r\n\r\n### Localization of attributes (& subsets) for any dimension passed\r\n# Loop through dimensions in pDim\r\nsDims               = Trim( pDim );\r\nnDimDelimiterIndex  = 1;\r\n# Get 1st dimension\r\nWhile( pDim @<> '' & nDimDelimiterIndex > 0 );\r\n    # Extract 1st dimension > sDim\r\n    nDimDelimiterIndex = Scan( pDelim, sDims );\r\n    If( nDimDelimiterIndex = 0 );\r\n        sDim        = sDims;\r\n    Else;\r\n        sDim        = Trim( SubSt( sDims, 1, nDimDelimiterIndex - 1 ) );\r\n        sDims       = Trim( Subst( sDims, nDimDelimiterIndex + Long(pDelim), Long( sDims ) ) );\r\n    EndIf;\r\n\r\n    # Check if sDim has wildcard\r\n    If( Scan( '*', sDim ) = 0);\r\n        If( DimensionExists(sDim) = 0 );\r\n            nErrors = 1;\r\n            sMessage = Expand( 'Dimension \"%sDim%\" does not exist.' );\r\n            LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n        Else;\r\n            sAttrDim = '}ElementAttributes_' | sDim;\r\n            sLocAttrDim = '}LocalizedElementAttributes_' | sDim;\r\n            sSubDim = '}Subsets_' | sDim;\r\n            sSubAttr = '}SubsetAttributes_' | sDim;\r\n            sLocSubAttr = '}LocalizedSubsetAttributes_' | sDim;\r\n            IF( CubeExists( sAttrDim ) = 0 );\r\n                AttrInsert( sDim, '', 'Caption', 'S' );\r\n            ELSEIF( DimIx( sAttrDim, 'Caption' ) = 0 );\r\n                AttrInsert( sDim, '', 'Caption', 'S' );\r\n            ENDIF;\r\n            IF( CubeExists( sLocAttrDim ) = 0 );\r\n                sFirstEle = '';\r\n                sFirstEle = DimNm( sDim, 1 );\r\n                IF( sFirstEle @<> '' );\r\n                    AttrPutS( '', sDim, sFirstEle, 'Caption', 'en' );\r\n                ENDIF;\r\n            ENDIF;\r\n            If( pSub = 1 & DimSiz( sSubDim ) > 0 );\r\n                If( CubeExists( sSubAttr ) = 0 );\r\n                    SubsetAttrInsert( sDim, '', 'Caption', 'S' );\r\n                EndIf;\r\n                If( CubeExists( sLocSubAttr ) = 0 );\r\n                    sSub = DimNm( sSubDim, 1 );\r\n                    If( Scan( ':', sSub ) > 0 );\r\n                        sDim = sDim |':'| SubSt( sSub, 1, Scan( ':', sSub ) - 1 );\r\n                        sSub = SubSt( sSub, Scan( ':', sSub ) + 1, Long( sSub ) );\r\n                    EndIf;\r\n                    SubsetAttrPutS( '', sDim, sSub, 'Caption', 'en' );\r\n                EndIf;\r\n            EndIf;\r\n        Endif;\r\n    Else;\r\n        # Create subset of dimensions using Wildcard to loop through dimensions in pDim with wildcard\r\n        sMdx = Expand('{TM1FILTERBYPATTERN( EXCEPT ( EXCEPT ( TM1SUBSETALL( [}Dimensions] ) , TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions] ) , \"*:*\") ), TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions] ) , \"}ElementAttributes_*\") ) , \"%sDim%\" )}');\r\n        If( SubsetExists( '}Dimensions' , cTempSub ) = 1 );\r\n            # If a delimited list of dim names includes wildcards then we may have to re-use the subset multiple times\r\n            SubsetMDXSet( '}Dimensions' , cTempSub, sMDX );\r\n        Else;\r\n            # temp subset, therefore no need to destroy in epilog\r\n            SubsetCreatebyMDX( cTempSub, sMDX, '}Dimensions' , 1 );\r\n        EndIf;\r\n\r\n        # Loop through dimensions in subset created based on wildcard\r\n        nCountDim = SubsetGetSize( '}Dimensions' , cTempSub );\r\n        While( nCountDim >= 1 );\r\n            sDim = SubsetGetElementName( '}Dimensions' , cTempSub, nCountDim );\r\n            If( DimensionExists(sDim) = 0 );\r\n                nErrors = 1;\r\n                sMessage = Expand( 'Dimension %sDim% does not exist.' );\r\n                LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n            Else;\r\n                sAttrDim = '}ElementAttributes_' | sDim;\r\n                sLocAttrDim = '}LocalizedElementAttributes_' | sDim;\r\n                sSubDim = '}Subsets_' | sDim;\r\n                sSubAttr = '}SubsetAttributes_' | sDim;\r\n                sLocSubAttr = '}LocalizedSubsetAttributes_' | sDim;\r\n                IF( CubeExists( sAttrDim ) = 0 );\r\n                    AttrInsert( sDim, '', 'Caption', 'S' );\r\n                ELSEIF( DimIx( sAttrDim, 'Caption' ) = 0 );\r\n                    AttrInsert( sDim, '', 'Caption', 'S' );\r\n                ENDIF;\r\n                IF( CubeExists( sLocAttrDim ) = 0 );\r\n                    sFirstEle = '';\r\n                    sFirstEle = DimNm( sDim, 1 );\r\n                    IF( sFirstEle @<> '' );\r\n                        AttrPutS( '', sDim, sFirstEle, 'Caption', 'en' );\r\n                    ENDIF;\r\n                ENDIF;\r\n                If( pSub = 1 );\r\n                    If( CubeExists( sSubAttr ) = 0 );\r\n                        SubsetAttrInsert( sDim, '', 'Caption', 'S' );\r\n                    EndIf;\r\n                    If( CubeExists( sLocSubAttr ) = 0 & DimSiz( sSubDim ) > 0 );\r\n                        sSub = DimNm( sSubDim, 1 );\r\n                        If( Scan( ':', sSub ) > 0 );\r\n                            sDim = sDim |':'| SubSt( sSub, 1, Scan( ':', sSub ) - 1 );\r\n                            sSub = SubSt( sSub, Scan( ':', sSub ) + 1, Long( sSub ) );\r\n                        EndIf;\r\n                        SubsetAttrPutS( '', sDim, sSub, 'Caption', 'en' );\r\n                    EndIf;\r\n                EndIf;\r\n            Endif;\r\n            nCountDim = nCountDim - 1;\r\n        End;\r\n    EndIf;\r\nEnd;\r\n\r\n### Localization of views for any cube passed\r\n# Loop through cubes in pCube\r\nsCubes              = Trim( pCube );\r\nnCubDelimiterIndex  = 1;\r\n# Get 1st Cube\r\nWhile( pCube @<> '' & nCubDelimiterIndex > 0 );\r\n    # Extract 1st cube > sCube\r\n    nCubDelimiterIndex = Scan( pDelim, sCubes );\r\n    If( nCubDelimiterIndex = 0 );\r\n        sCube       = sCubes;\r\n    Else;\r\n        sCube       = Trim( SubSt( sCubes, 1, nCubDelimiterIndex - 1 ) );\r\n        sCubes      = Trim( Subst( sCubes, nCubDelimiterIndex + Long(pDelim), Long( sCubes ) ) );\r\n    EndIf;\r\n\r\n    # Check if sCube has wildcard\r\n    If( Scan( '*', sCube ) = 0);\r\n        If( CubeExists(sCube) = 0 );\r\n            nErrors = 1;\r\n            sMessage = Expand( 'Cube \"%sCube%\" does not exist.' );\r\n            LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n        Else;\r\n            sViewDim = '}Views_' | sCube;\r\n            sViewAttr = '}ViewAttributes_' | sCube;\r\n            sLocViewAttr = '}LocalizedViewAttributes_' | sCube;\r\n            IF( CubeExists( sViewAttr ) = 0 & DimensionExists( sViewDim ) = 1 );\r\n                ViewAttrInsert( sCube, '', 'Caption', 'S' );\r\n            ENDIF;\r\n            IF( CubeExists( sLocViewAttr ) = 0 & DimSiz( sViewDim ) >= 1 );\r\n                ViewAttrPutS( '', sCube, DimNm( sViewDim, 1 ), 'Caption', 'en' );\r\n            ENDIF;\r\n        Endif;\r\n    Else;\r\n        # Create subset of cubes using Wildcard to loop through cubes in pCube with wildcard\r\n        sMdx = Expand('{TM1FILTERBYPATTERN( TM1SUBSETALL( [}Cubes] ),  \"%sCube%\" )}');\r\n        If( SubsetExists( '}Cubes' , cTempSub ) = 1 );\r\n            # If a delimited list of Cub names includes wildcards then we may have to re-use the subset multiple times\r\n            SubsetMDXSet( '}Cubes' , cTempSub, sMDX );\r\n        Else;\r\n            # temp subset, therefore no need to destroy in epilog\r\n            SubsetCreatebyMDX( cTempSub, sMDX, '}Cubes' , 1 );\r\n        EndIf;\r\n\r\n        # Loop through cubes in subset created based on wildcard\r\n        nCountCub = SubsetGetSize( '}Cubes' , cTempSub );\r\n        While( nCountCub >= 1 );\r\n            sCube = SubsetGetElementName( '}Cubes' , cTempSub, nCountCub );\r\n            If( CubeExists(sCube) = 0 );\r\n                nErrors = 1;\r\n                sMessage = Expand( 'Cube %sCube% does not exist.' );\r\n                LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n            Else;\r\n                sViewDim = '}Views_' | sCube;\r\n                sViewAttr = '}ViewAttributes_' | sCube;\r\n                sLocViewAttr = '}LocalizedViewAttributes_' | sCube;\r\n                IF( CubeExists( sViewAttr ) = 0 & DimensionExists( sViewDim ) = 1 );\r\n                    ViewAttrInsert( sCube, '', 'Caption', 'S' );\r\n                ENDIF;\r\n                IF( CubeExists( sLocViewAttr ) = 0 & DimSiz( sViewDim ) >= 1 );\r\n                    ViewAttrPutS( '', sCube, DimNm( sViewDim, 1 ), 'Caption', 'en' );\r\n                ENDIF;\r\n            Endif;\r\n            nCountCub = nCountCub - 1;\r\n        End;\r\n    EndIf;\r\nEnd;\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}