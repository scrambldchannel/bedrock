{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction     = Expand( 'Process:%cThisProcName% successfully deleted the dimension:hierarchy %pDim%:%pHier%' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.hier.delete",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pDim",
            "Prompt": "REQUIRED: Dimension accepts wildcards (if = * then all the dimensions)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pHier",
            "Prompt": "OPTIONAL: Hierarchy accepts wildcards (all hierarchies except default and Leaves deleted if = *)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: delimiter character for element list. (default value if blank = '&')",
            "Type": "String",
            "Value": "&"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.hier.delete', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n\t    'pDim', '', 'pHier', '', 'pDelim', '&'\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~ Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0 ~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process deletes a dimension or hierarchy (or a list thereof).\r\n\r\n# Use case: Intended for development/prototyping.\r\n# 1/ Clean up unused dimension/hierarchies after Go Live.\r\n\r\n# Note:\r\n# Naturally, a valid dimension name (pDim) is mandatory otherwise the process will abort.\r\n# If no hierarchy (pHier) is specified the dimension will be deleted if not in use by a **regular** cube.\r\n# If a hierarchy is specified, it must be valid otherwise the process will abort.\r\n#EndRegion @DOC\r\n\r\n### Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName     = GetProcessName();\r\ncUserName         = TM1User();\r\ncTimeStamp        = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt        = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub          = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncMsgInfoContent   = 'User:%cUserName% Process:%cThisProcName% Message:%sMessage%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pDim:%pDim%, pHier:%pHier%, pDelim:%pDelim%.';\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\nIf( Scan( '*', pDim ) = 0 & Scan( '?', pDim ) = 0 & Scan( pDelim, pDim ) = 0 & Scan( ':', pDim ) > 0 & pHier @= '' );\r\n    # A hierarchy has been passed as dimension. Handle the input error by splitting dim:hier into dimension & hierarchy\r\n    pHier       = SubSt( pDim, Scan( ':', pDim ) + 1, Long( pDim ) );\r\n    pDim        = SubSt( pDim, 1, Scan( ':', pDim ) - 1 );\r\nEndIf;\r\n\r\nIf( Trim( pDim ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No dimension specified.';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIF( Scan( '*', pDim ) = 0 & Scan( '?', pDim ) = 0 & Scan( pDelim, pDim ) = 0 & DimensionExists( pDim ) = 0 );\r\n    nErrors = 1;\r\n    sMessage = 'Invalid dimension: ' | pDim;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIf( Trim( pHier ) @= '' );\r\n  ## use same name as Dimension. Since wildcards are allowed this is managed inside the code below\r\nElseIf( Trim( pHier ) @= 'Leaves' );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid hierarchy: \"Leaves\".';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIf(  Scan( '*', pHier ) = 0 & Scan( '?', pHier ) = 0 & Scan( pDelim, pHier ) = 0 & Scan( '*', pDim ) = 0 & Scan( '?', pDim ) = 0 & Scan( pDelim, pDim ) = 0 & Trim( pHier ) @= Trim( pDim ) );\r\n  nErrors = 1;\r\n  sMessage = 'Cannot delete same named hierarchy: \"}bedrock.dim.delete\" process should be used for this purpose';\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelim @= '' );\r\n    pDelim = '&';\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n\r\nIF( Scan( '*', pHier ) = 0 & Scan( '?', pHier ) = 0 & Scan( pDelim, pHier ) = 0 & Scan( '*', pDim ) = 0 & Scan( '?', pDim ) = 0 & Scan( pDelim, pDim ) = 0 );\r\n    If( HierarchyExists( pDim, pHier ) = 0 );\r\n        nError = 1;\r\n        sMessage = 'The Hierachy \"' | pHier | '\" is not available in \"' | pDim | '\" dimension' ;\r\n        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    Else;\r\n        HierarchyDestroy( pDim  ,pHier );\r\n    Endif;\r\nElseIf( pHier @= 'Leaves');\r\n    nError = 1;\r\n    sMessage = 'The Hierachy is Leaves and can not be destroyed';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElse;\r\n    # Loop through dimensions in pDim\r\n    sDims = pDim;\r\n    nDimDelimiterIndex = 1;\r\n    sMdx = '';\r\n    # Get 1st dimension\r\n    While( nDimDelimiterIndex <> 0 );\r\n        # Extract 1st dimension > sDim\r\n        nDimDelimiterIndex = Scan( pDelim, sDims );\r\n        If( nDimDelimiterIndex = 0 );\r\n            sDim = sDims;\r\n        Else;\r\n            sDim = Trim( SubSt( sDims, 1, nDimDelimiterIndex - 1 ) );\r\n            sDims = Trim( Subst( sDims, nDimDelimiterIndex + Long(pDelim), Long( sDims ) ) );\r\n        EndIf;\r\n\r\n          # Create subset of dimensions using Wildcard to loop through dimensions in pDim with wildcard\r\n        sDimExp = '\"'|sDim|'\"';\r\n        sMdxPart = '{TM1FILTERBYPATTERN( EXCEPT( TM1SUBSETALL( [}Dimensions] ) , TM1FILTERBYPATTERN( TM1SUBSETALL( [}Dimensions] ) , \"*:*\") ) ,'| sDimExp | ')}';\r\n        IF( sMdx @= '');\r\n          sMdx = sMdxPart;\r\n        ELSE;\r\n          sMdx = sMdx | ' + ' | sMdxPart;\r\n        ENDIF;\r\n    End;\r\n\r\n    If( SubsetExists( '}Dimensions' , cTempSub ) = 1 );\r\n        # If a delimited list of dim names includes wildcards then we may have to re-use the subset multiple times\r\n        SubsetMDXSet( '}Dimensions' , cTempSub, sMDX );\r\n    Else;\r\n        # temp subset, therefore no need to destroy in epilog\r\n        SubsetCreatebyMDX( cTempSub, sMDX, '}Dimensions' , 1 );\r\n    EndIf;\r\n\r\n    # Loop through dimensions in subset created based on wildcard\r\n    nCountDim = SubsetGetSize( '}Dimensions' , cTempSub );\r\n    While( nCountDim >= 1 );\r\n        sDim = SubsetGetElementName( '}Dimensions' , cTempSub, nCountDim );\r\n        # Validate dimension name\r\n        If( DimensionExists(sDim) = 0 );\r\n            nErrors = 1;\r\n            sMessage = Expand( 'Dimension %sDim% does not exist.' );\r\n            LogOutput( 'ERROR', Expand( cMsgErrorContent ) );\r\n        Else;\r\n            If( pLogOutput = 1 );\r\n              sMessage = Expand( 'Dimension %sDim% being processed....' );\r\n              LogOutput( 'INFO', Expand( cMsgInfoContent ) );\r\n            EndIf;\r\n            # Loop through hierarchies in pHier\r\n            If( Trim( pHier ) @= '' );\r\n              ### Use main hierarchy for each dimension if pHier is empty\r\n              sHierarchies = sDim;\r\n            Else;\r\n              sHierarchies              = pHier;\r\n            EndIf;\r\n            nDelimiterIndexA    = 1;\r\n            sHierDim            = '}Hierarchies_'|sDim ;\r\n            sMdxHier = '';\r\n            While( nDelimiterIndexA <> 0 );\r\n\r\n                nDelimiterIndexA = Scan( pDelim, sHierarchies );\r\n                If( nDelimiterIndexA = 0 );\r\n                    sHierarchy   = sHierarchies;\r\n                Else;\r\n                    sHierarchy   = Trim( SubSt( sHierarchies, 1, nDelimiterIndexA - 1 ) );\r\n                    sHierarchies  = Trim( Subst( sHierarchies, nDelimiterIndexA + Long(pDelim), Long( sHierarchies ) ) );\r\n                EndIf;\r\n\r\n                # Create subset of Hierarchies using Wildcard\r\n                sHierExp = '\"'|sDim|':'|sHierarchy|'\"';\r\n                sMdxHierPart = '{TM1FILTERBYPATTERN( {TM1SUBSETALL([ ' |sHierDim| '])},'| sHierExp | ')}';\r\n                IF( sMdxHier @= '');\r\n                  sMdxHier = sMdxHierPart;\r\n                ELSE;\r\n                  sMdxHier = sMdxHier | ' + ' | sMdxHierPart;\r\n                ENDIF;\r\n            End;\r\n\r\n            If( SubsetExists( sHierDim, cTempSub ) = 1 );\r\n                # If a delimited list of attr names includes wildcards then we may have to re-use the subset multiple times\r\n                SubsetMDXSet( sHierDim, cTempSub, sMdxHier );\r\n            Else;\r\n                # temp subset, therefore no need to destroy in epilog\r\n                SubsetCreatebyMDX( cTempSub, sMdxHier, sHierDim, 1 );\r\n            EndIf;\r\n\r\n            # Loop through subset of hierarchies created based on wildcard\r\n            nCountHier = SubsetGetSize( sHierDim, cTempSub );\r\n            While( nCountHier >= 1 );\r\n                sCurrHier = SubsetGetElementName( sHierDim, cTempSub, nCountHier );\r\n                sCurrHierName = Subst( sCurrHier, Scan(':', sCurrHier)+1, Long(sCurrHier) );\r\n\r\n                # Validate hierarchy name in dimension\r\n                If( Dimix( sHierDim , sCurrHier ) = 0 );\r\n                    sMessage = Expand('The %sCurrHier% hierarchy does NOT exist in the %sDim% dimension.');\r\n                    LogOutput( 'INFO' , Expand( cMsgInfoContent ) );\r\n                Else;\r\n                  If( pLogOutput = 1 );\r\n                    sMessage = Expand( 'Hierarchy %sCurrHierName% in Dimension %sDim% being processed....' );\r\n                    LogOutput( 'INFO', Expand( cMsgInfoContent ) );\r\n                  EndIf;\r\n                  If( Trim( sCurrHierName ) @= Trim( sDim ) );\r\n                      ## Do not remove main hierarchy\r\n                  ElseIf( sCurrHierName @= 'Leaves');\r\n                      If( pLogOutput = 1 );\r\n                        sMessage = 'The Hierachy is Leaves and can not be destroyed';\r\n                        LogOutput( 'INFO', Expand( cMsgInfoContent ) );\r\n                      EndIf;\r\n                  Else;\r\n                      HierarchyDestroy( sDim, sCurrHierName );\r\n                      If( pLogOutput = 1 );\r\n                        sMessage = Expand( 'Destroying hierarchy %sCurrHierName% in Dimension %sDim%' );\r\n                      LogOutput( 'INFO', Expand( cMsgInfoContent ) );\r\n                  EndIf;\r\n                  Endif;\r\n                Endif;\r\n\r\n                nCountHier = nCountHier - 1;\r\n            End;\r\n\r\n        EndIf;\r\n\r\n        nCountDim = nCountDim - 1;\r\n    End;\r\nEndIf;\r\n\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}