{
    "DataProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Data Count\r\nnDataCount = nDataCount + 1;\r\n\r\nsVar1 = v1;\r\nsVar2 = v2;\r\nsVar3 = If( pLegacy <> 1, Subst( v3 , Scan( '-' , v3 ) + 1 , Long( v3 ) ), v3 );\r\nsVar4 = If( pLegacy <> 1, Subst( v4 , Scan( '-' , v4 ) + 1 , Long( v4 ) ), v4 );\r\nsVar5 = If( pLegacy <> 1, Subst( v5 , Scan( '-' , v5 ) + 1 , Long( v5 ) ), v5 );\r\n\r\nIf( pDim @= sHier);\r\n    sDim = pDim;\r\nElse;\r\n    sDim = pDim|':'|sHier;\r\nEndif;\r\n\r\n### Load Attribute Values ###\r\nIF( V1 @= 'V' );\r\n    sAttrType = DTYPE( sAttrDimName , sVar3 );\r\n    IF ( pDim @<> sHier );\r\n        IF ( CellIsUpdateable ( '}ElementAttributes_' | pDim, sHier:sVar2, sVar3 ) = 0 ) ;\r\n            ItemSkip ;\r\n        ENDIF ;\r\n        IF( sAttrType @= 'AN' );\r\n            ElementAttrPUTN( StringToNumber( sVar4 ), pDim, sHier, sVar2, sVar3 );\r\n        ELSEIF( sAttrType @= 'AA' );\r\n            ElementATTRPUTS( sVar4, pDim, sHier, sVar2, sVar3, 1 );\r\n        ELSE;\r\n            ElementATTRPUTS( sVar4, pDim, sHier, sVar2, sVar3 );\r\n        ENDIF;\r\n    ELSE;\r\n        IF ( CellIsUpdateable ( '}ElementAttributes_' | pDim , sVar2, sVar3 ) = 0 ) ;\r\n            ItemSkip ;\r\n        ENDIF ;\r\n        IF( sAttrType @= 'AN' );\r\n            AttrPUTN( StringToNumber( sVar4 ), pDim, sVar2, sVar3 );\r\n        ELSEIF( sAttrType @= 'AA' );\r\n            ATTRPUTS( sVar4, pDim, sVar2, sVar3, 1 );\r\n        ELSE;\r\n            ATTRPUTS( sVar4, pDim, sVar2, sVar3 );\r\n        ENDIF;\r\n    ENDIF;\r\nENDIF;",
    "DataSource": {
        "Type": "ASCII",
        "asciiDecimalSeparator": ".",
        "asciiDelimiterChar": ",",
        "asciiDelimiterType": "Character",
        "asciiHeaderRecords": 0,
        "asciiQuoteCharacter": "\"",
        "asciiThousandSeparator": ",",
        "dataSourceNameForClient": "D:\\TM1Models\\Bedrock.v4\\Log\\Currency Currency 2_Export.csv",
        "dataSourceNameForServer": "D:\\TM1Models\\Bedrock.v4\\Log\\Currency Currency 2_Export.csv"
    },
    "EpilogProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### If errors occurred terminate process with a major error status ###\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 major error and consequently aborted. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% aborted. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nEndIf;\r\n\r\n### Return Code\r\nsProcessAction      = Expand( 'Process:%cThisProcName% successfully imported data from %sFileName% and updated the %pDim%:%pHier% dimension:hierarchy.' );\r\nsProcessReturnCode  = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\nnProcessReturnCode  = 1;\r\nIf ( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( sProcessAction ) );\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\nIf( pDim @= sHier);\r\n    sDim = pDim;\r\nElse;\r\n    sDim = pDim|':'|sHier;\r\nEndif;\r\n\r\n### Metadata Count\r\nnMetaCount = nMetaCount + 1;\r\n\r\nsVar1 = v1;\r\nsVar2 = v2;\r\nsVar3 = If( pLegacy <> 1, Subst( v3 , Scan( '-' , v3 ) + 1 , Long( v3 ) ), v3 );\r\nsVar4 = If( pLegacy <> 1, Subst( v4 , Scan( '-' , v4 ) + 1 , Long( v4 ) ), v4 );\r\nsVar5 = If( pLegacy <> 1, Subst( v5 , Scan( '-' , v5 ) + 1 , Long( v5 ) ), v5 );\r\n\r\n## Set Dimension Sort Order\r\nIF( v1 @= 'Sort parameters :' );\r\n    CELLPUTS( sVar2, cCubeS1 , sDim, 'SORTELEMENTSTYPE' );\r\n    CELLPUTS( sVar3, cCubeS1 , sDim, 'SORTCOMPONENTSTYPE' );\r\n    CELLPUTS( sVar4, cCubeS1 , sDim, 'SORTELEMENTSSENSE' );\r\n    CELLPUTS( sVar5, cCubeS1 , sDim, 'SORTCOMPONENTSSENSE' );\r\n    DimensionSortOrder( sDim, sVar3, sVar5, sVar2, sVar4 );\r\nElseIF( pLegacy = 1 & nDataCount = 3 & ( sVar1 @= 'BYINPUT' % sVar1 @= 'BYNAME' % sVar1 @= 'BYHIERARCHY' % sVar1 @= 'BYLEVEL' ) );\r\n    CELLPUTS( sVar1, cCubeS1 , sDim, 'SORTELEMENTSTYPE' );\r\n    CELLPUTS( sVar2, cCubeS1 , sDim, 'SORTCOMPONENTSTYPE' );\r\n    CELLPUTS( sVar3, cCubeS1 , sDim, 'SORTELEMENTSSENSE' );\r\n    CELLPUTS( sVar4, cCubeS1 , sDim, 'SORTCOMPONENTSSENSE' );\r\n    DimensionSortOrder( sDim, sVar2, sVar4, sVar1, sVar3 );\r\nENDIF;\r\n\r\n### Build dimension\r\nIF( V1 @= 'A' );\r\n    # insert attributes\r\n    ATTRINSERT( pDim, '', sVar2 , SUBST( sVar3, 2, 1 ) );\r\n    IF( pLogOutput = 1 );\r\n        sMessage    = Expand('Attribute %sVar2% created in %sDim% as type %sVar3%.');\r\n        LogOutput( 'INFO', Expand( cMsgErrorContent ) );\r\n    ENDIF;\r\nELSEIF( V1 @= 'E' );\r\n    # insert elements\r\n    If( sHier @= 'Leaves' & sVar3 @<> 'N' );\r\n        IF( pLogOutput = 1 );\r\n            sMessage    = Expand('Invalid element type %sVar3% for Leaves hierachy. Skipping insertion of element %sVar2%.');\r\n            LogOutput( 'INFO', Expand( cMsgErrorContent ) );\r\n        ENDIF;\r\n        ItemSkip;\r\n    EndIf;\r\n    HierarchyElementInsert( pDim, sHier, '', sVar2 , sVar3 );\r\n    IF( pLogOutput = 1 );\r\n        sMessage    = Expand('Inserted element %sVar2% into %sDim% as type %sVar3%.');\r\n        LogOutput( 'INFO', Expand( cMsgErrorContent ) );\r\n    ENDIF;\r\nELSEIF( V1 @= 'P' );\r\n    # create rollups\r\n    If( sHier @= 'Leaves' );\r\n        IF( pLogOutput = 1 );\r\n            sMessage    = Expand('Leaves hierarchy! Skipping mapping of %sVar2% into parent %sVar3%.');\r\n            LogOutput( 'INFO', Expand( cMsgErrorContent ) );\r\n        ENDIF;\r\n        ItemSkip;\r\n    EndIf;\r\n    HierarchyElementInsert( pDim, sHier, '', sVar3 , sVar4 );\r\n    HierarchyElementComponentAdd( pDim, sHier, sVar3 , sVar2 , StringToNumber( sVar5 ) );\r\n    IF( pLogOutput = 1 );\r\n        sMessage    = Expand('Inserted parent %sVar3% into %sDim% as type %sVar4%. Then added %sVar2% to %sVar3% with a weight of %sVar5%.');\r\n        sMessage    = Expand('Added %sVar2% to %sVar3% with a weight of %sVar5%.');\r\n        LogOutput( 'INFO', Expand( cMsgErrorContent ) );\r\n    ENDIF;\r\nENDIF;",
    "Name": "}bedrock.hier.import",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pDim",
            "Prompt": "REQUIRED: Dimension",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pHier",
            "Prompt": "OPTIONAL: Target Hierarchy (defaults to dimension name if blank)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pSrcDir",
            "Prompt": "OPTIONAL: Source Directory Path (defaults to Error File Directory)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pSrcFile",
            "Prompt": "OPTIONAL: Source File Name (defaults to 'Dimension Hierarchy _Export.csv' if blank)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDelim",
            "Prompt": "OPTIONAL: AsciiOutput delimiter character (Default=comma exactly 3 digits = ASCII code)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pQuote",
            "Prompt": "OPTIONAL: AsciiOutput quote character (Accepts empty quote exactly 3 digits = ASCII code)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pLegacy",
            "Prompt": "OPTIONAL: 1 = Legacy format (bedrock v3) 0 or empty = new bedrock v4 format",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pUnwind",
            "Prompt": "OPTIONAL: 1 = unwind elements 0 = like for like copy which may result in lost elements / data (2= no clear or unwind only add)",
            "Type": "Numeric",
            "Value": "1"
        },
        {
            "Name": "pConsol",
            "Prompt": "OPTIONAL: Target Consolidation accepts wildcards ( * will unwind ALL). Note: ignored if pUnwind=0",
            "Type": "String",
            "Value": "*"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\nExecuteProcess( '}bedrock.hier.import', 'pLogOutput', pLogOutput\r\n    , 'pStrictErrorHandling', pStrictErrorHandling\r\n    , 'pDim', '', 'pHier', ''\r\n    , 'pSrcDir', '', 'pSrcFile', ''\r\n    , 'pDelim', ',', 'pQuote', '\"'\r\n    , 'pLegacy', 0, 'pUnwind' , 1, 'pConsol', '*'\r\n);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process will import Dimension elements into a specified Hierarchy from a File. The process\r\n# is able to read a file generated by `}bedrock.hier.export`.\r\n# __Format of the file:__\r\n# - 1st line: File metadata contains summary information about the dimension, hierarchy, number of\r\n#   elements and date/time when file was generated.\r\n# - 2nd line: Source dimension and hierarchy.\r\n# - 3rd line: Dimension sort order.\r\n# - 4th and 5th line: Reserved for future development.\r\n# - 6th line: Header for elements export.\r\n# - 7th line and forth: Elements export data.\r\n\r\n# Use case:\r\n# 1. Restore a dimension from a backup.\r\n# 2. Quick replication of a large dimension.\r\n\r\n# Note:\r\n# Valid dimension name (pDim) is mandatory otherwise the process will abort.\r\n# If needed, custom delimiter might be used by specifying parameter pDelim value as either exactly one\r\n# character or as a 3-digit (decimal) ASCII code. For example to use TAB as a delimiter, use 009.\r\n# pUnwind provides the option to 1 (unwind) or 0 (delete) elements in the target dimension. Default is to unwind,\r\n# care should be taken when using option 0 otherwise data loss may occur.\r\n\r\n# Caution: Process was redesigned in Bedrock4 but is able to process dimension extracts from prior\r\n# versions of Bedrock in legacy mode (pLegacy = 1).\r\n#EndRegion @DOC\r\n\r\n# This process will Create Dimension hierarchy from File.\r\n### Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName   = GetProcessName();\r\ncUserName       = TM1User();\r\ncTimeStamp      = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt      = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub        = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel  = 'ERROR';\r\ncMsgErrorContent= 'Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo        = 'Process:%cThisProcName% run with parameters pDim:%pDim%, pHier:%pHier%, pSrcDir:%pSrcDir%, pSrcFile:%pSrcFile%, pDelim:%pDelim%, pQuote:%pQuote%, pLegacy:%pLegacy%, pUnwind:%pUnwind%, pConsol:%pConsol%';\r\ncLenASCIICode = 3;\r\n\r\npDelim  = TRIM(pDelim);\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\nnMetaCount = 0;\r\nnDataCount = 0;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\nIf( Scan( ':', pDim ) > 0 & pHier @= '' );\r\n    # A hierarchy has been passed as dimension. Handle the input error by splitting dim:hier into dimension & hierarchy\r\n    pHier       = SubSt( pDim, Scan( ':', pDim ) + 1, Long( pDim ) );\r\n    pDim        = SubSt( pDim, 1, Scan( ':', pDim ) - 1 );\r\nEndIf;\r\n\r\n# Validate dimension\r\nIf( Trim( pDim ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No dimension specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIf( DimensionExists( pDim ) = 0 );\r\n    sMessage = 'Dimension: ' | pDim | ' does not exist and will be created.';\r\n    LogOutput( 'INFO', Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate Hierarchy\r\nsHier       = Trim( pHier );\r\nIf( sHier @= '' );\r\n    sHier     = pDim;\r\nElseIf( sHier @= 'Leaves' );\r\n    If( pUnwind = 1 );\r\n        pUnwind = 2;\r\n        sMessage  = Expand('%cThisProcName%: Leaves hierarchy, unwind is redundant. Changing unwind mode for %pDim%:%pHier% to 2.');\r\n        LogOutput( 'INFO', sMessage );\r\n    EndIf;\r\nEndIf;\r\n\r\n## check operating system\r\nIf( SubSt( GetProcessErrorFileDirectory, 2, 1 ) @= ':' );\r\n  sOS = 'Windows';\r\n  sOSDelim = '\\';\r\nElseIf( Scan( '/', GetProcessErrorFileDirectory ) > 0 );\r\n  sOS = 'Linux';\r\n  sOSDelim = '/';\r\nElse;\r\n  sOS = 'Windows';\r\n  sOSDelim = '\\';\r\nEndIf;\r\n\r\n## Validate source dir\r\nIf( Trim( pSrcDir ) @= '' );\r\n    pSrcDir     = GetProcessErrorFileDirectory;\r\n    sMessage    = 'Source folder defaulted to error file directory.';\r\n    LogOutput( 'INFO', Expand( cMsgErrorContent ) );\r\nEndIf;\r\nIf( SubSt( pSrcDir, Long( pSrcDir ), 1 ) @= sOSDelim );\r\n    pSrcDir = SubSt( pSrcDir, 1, Long( pSrcDir ) -1 );\r\nEndIf;\r\nIf( FileExists( pSrcDir ) = 0 );\r\n    nErrors     = 1;\r\n    sMessage    = 'Invalid source path specified. Folder does not exist.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\npSrcDir         = pSrcDir | sOSDelim;\r\n\r\n# Validate legacy file format\r\nIf( pLegacy <> 1 );\r\n    pLegacy = 0;\r\nEndIf;\r\n\r\n# Validate export filename\r\nIf( pSrcFile @= '' );\r\n  pSrcFile      = pDim | If( pLegacy = 1, '', ' ' | sHier ) | '_Export.csv';\r\nElseIf( Scan( '.', pSrcFile ) = 0 );\r\n    # No file extension specified\r\n    pSrcFile    = pSrcFile | '.csv';\r\nEndIf;\r\n\r\n# Construct full export filename including path\r\nsFilename       = pSrcDir | pSrcFile;\r\nsAttrDimName    = '}ElementAttributes_' | pDim ;\r\n\r\nIf( FileExists( sFilename ) = 0 );\r\n    nErrors     = 1;\r\n    sMessage    = 'Invalid path or file name specified. It does not exist.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate unwind\r\nIf( pUnwind <> 0 & pUnwind <> 2 );\r\n    pUnwind = 1;\r\nEndIf;\r\n\r\n# Validate consolidation to unwind\r\nIf( pConsol @= '' );\r\n    # Only check if parameter is passed as empty as this is invalid. Validation in case of element not existng in dimension will be evaluated in the unwind sub-process\r\n    pConsol = '*';\r\nEndIf;\r\n\r\n# Validate file delimiter & quote character\r\nIf( pDelim @= '' );\r\n    pDelim = ',';\r\nElse;\r\n    # If length of pDelim is exactly 3 chars and each of them is decimal digit, then the pDelim is entered as ASCII code\r\n    nValid = 0;\r\n    If ( LONG(pDelim) = cLenASCIICode );\r\n      nChar = 1;\r\n      While ( nChar <= cLenASCIICode );\r\n        If( CODE( pDelim, nChar )>=CODE( '0', 1 ) & CODE( pDelim, nChar )<=CODE( '9', 1 ) );\r\n          nValid = 1;\r\n        Else;\r\n          nValid = 0;\r\n        EndIf;\r\n        nChar = nChar + 1;\r\n      End;\r\n    EndIf;\r\n    If ( nValid<>0 );\r\n      pDelim=CHAR(StringToNumber( pDelim ));\r\n    Else;\r\n      pDelim = SubSt( Trim( pDelim ), 1, 1 );\r\n    EndIf;\r\nEndIf;\r\nIf( pQuote @= '' );\r\n    ## Use no quote character\r\nElse;\r\n    # If length of pQuote is exactly 3 chars and each of them is decimal digit, then the pQuote is entered as ASCII code\r\n    nValid = 0;\r\n    If ( LONG(pQuote) = cLenASCIICode );\r\n      nChar = 1;\r\n      While ( nChar <= cLenASCIICode );\r\n        If( CODE( pQuote, nChar ) >= CODE( '0', 1 ) & CODE( pQuote, nChar ) <= CODE( '9', 1 ) );\r\n          nValid = 1;\r\n        Else;\r\n          nValid = 0;\r\n        EndIf;\r\n        nChar = nChar + 1;\r\n      End;\r\n    EndIf;\r\n    If ( nValid<>0 );\r\n      pQuote=CHAR(StringToNumber( pQuote ));\r\n    Else;\r\n      pQuote = SubSt( Trim( pQuote ), 1, 1 );\r\n    EndIf;\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Prepare target dimension ###\r\nIf( HierarchyExists( pDim, sHier ) = 1 );\r\n    If( pUnwind = 1 );\r\n    ExecuteProcess('}bedrock.hier.unwind', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pDim', pDim,\r\n    \t'pHier', sHier,\r\n    \t'pConsol', pConsol,\r\n    \t'pRecursive', 1\r\n    );\r\n    ElseIf( pUnwind = 0 );\r\n        If( pDim @= pHier );\r\n            DimensionDeleteAllElements( pDim );\r\n        Else;\r\n            HierarchyDeleteAllElements( pDim, pHier );\r\n        EndIf;\r\n    EndIf;\r\nElse;\r\n    ExecuteProcess('}bedrock.hier.create',\r\n\t'pLogOutput',pLogOutput,\r\n\t'pStrictErrorHandling', pStrictErrorHandling,\r\n\t'pDim',pDim,\r\n\t'pHier',sHier);\r\nEndIf;\r\n\r\nIf( nErrors = 0 );\r\n    If( HierarchyExists( pDim, pHier ) = 1 );\r\n        IF ( pUnwind = 1 ) ;\r\n            sMessage = 'Dimension unwound: ' | pDim|':'|sHier;\r\n        ELSEIF ( pUnwind = 0 ) ;\r\n            sMessage = 'Dimension rebuilt: ' | pDim|':'|sHier;\r\n        ENDIF ;\r\n    Else;\r\n        sMessage = 'Dimension created: ' | pDim|':'|sHier;\r\n    EndIf;\r\nElse;\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    Else;\r\n        ProcessBreak;\r\n    EndIf;\r\nEndIf;\r\n\r\n### CONSTANTS ###\r\nsAttrDimName    = '}ElementAttributes_' | pDim ;\r\ncCubeS1         = '}DimensionProperties';\r\n\r\n#Processbreak;\r\n\r\n### Assign Datasource ###\r\nDataSourceType          = 'CHARACTERDELIMITED';\r\nDatasourceNameForServer = sFilename;\r\nDatasourceNameForClient = sFilename;\r\nDatasourceAsciiDelimiter= pDelim;\r\nDatasourceAsciiQuoteCharacter = pQuote;\r\n\r\n##### End Prolog #####",
    "Variables": [
        {
            "EndByte": 0,
            "Name": "V1",
            "Position": 1,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "V2",
            "Position": 2,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "V3",
            "Position": 3,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "V4",
            "Position": 4,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "V5",
            "Position": 5,
            "StartByte": 0,
            "Type": "String"
        },
        {
            "EndByte": 0,
            "Name": "V6",
            "Position": 6,
            "StartByte": 0,
            "Type": "String"
        }
    ]
}