{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0.0~~##\r\n#################################################################################################\r\n\r\n\r\n### Check for errors in prolog ###\r\n\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Replicate Attributes ###\r\n# Note: DTYPE on Attr dim returns \"AS\", \"AN\" or \"AA\" need to strip off leading \"A\"\r\n\r\nIf( pAttr = 1 & DimensionExists( sAttrDim ) = 1 );\r\n\r\n    nAttr = 1;\r\n    While( nAttr <= nNumAttrs );\r\n        sAttrName = DimNm( sAttrDim, nAttr );\r\n        sAttrType = SubSt( DTYPE( sAttrDim, sAttrName ), 2, 1 );\r\n\r\n        If( sAttrType @= 'S' % sAttrType @= 'A' );\r\n            sAttrVal = ElementAttrS( pSrcDim, pSrcHier, vEle, sAttrName );\r\n\r\n            If( sAttrVal @<> '' );\r\n                If( CellIsUpdateable( '}ElementAttributes_' | pTgtDim, pTgtHier:vEle, sAttrName ) = 1 );\r\n                    If( sAttrType @= 'A' );\r\n                        ElementAttrPutS( sAttrVal, pTgtDim, pTgtHier, vEle, sAttrName, 1 );\r\n                    Else;\r\n                        ElementAttrPutS( sAttrVal, pTgtDim, pTgtHier, vEle, sAttrName );\r\n                    EndIf;\r\n                EndIf;\r\n            EndIf;\r\n        Else;\r\n            nAttrVal = ElementAttrN( pSrcDim, pSrcHier, vEle, sAttrName );\r\n            If( nAttrVal <> 0 );\r\n                If( CellIsUpdateable( '}ElementAttributes_' | pTgtDim, pTgtHier:vEle, sAttrName ) = 1 );\r\n                    ElementAttrPutN( nAttrVal, pTgtDim, pTgtHier, vEle, sAttrName );\r\n                EndIf;\r\n            EndIf;\r\n        EndIf;\r\n        # check for localized attributes\r\n        If( CubeExists( sAttrLoc ) = 1 );\r\n            nLang = 1;\r\n            While( nLang <= nNumLang );\r\n                sLang       = DimNm( cLangDim, nLang );\r\n                If( sAttrType @= 'A' % sAttrType @= 'S' );\r\n                    sAttrVal    = ElementAttrS( pSrcDim, pSrcHier, vEle, sAttrName );\r\n                    sAttrValLoc = ElementAttrSL( pSrcDim, pSrcHier, vEle, sAttrName, sLang );\r\n                    If( sAttrValLoc @= sAttrVal ); sAttrValLoc = ''; EndIf;\r\n                Else;\r\n                    nAttrVal    = ElementAttrN( pSrcDim, pSrcHier, vEle, sAttrName );\r\n                    nAttrValLoc = ElementAttrNL( pSrcDim, pSrcHier, vEle, sAttrName, sLang );\r\n                EndIf;\r\n                If( CubeExists( sAttrLocTarget ) = 0 );\r\n                    If( sAttrType @= 'A' );\r\n                        ElementAttrPutS( sAttrValLoc, pTgtDim, pTgtHier, vEle, sAttrName, sLang, 1 );\r\n                    ElseIf( sAttrType @= 'N' );\r\n                        ElementAttrPutN( nAttrValLoc, pTgtDim, pTgtHier, vEle, sAttrName, sLang );\r\n                    Else;\r\n                        ElementAttrPutS( sAttrValLoc, pTgtDim, pTgtHier, vEle, sAttrName, sLang );\r\n                    EndIf;\r\n                ElseIf(CubeExists( sAttrLocTarget ) = 1 );\r\n                    If( CellIsUpdateable( sAttrLocTarget, pTgtHier:vEle, sLang, sAttrName ) = 1 );\r\n                        If( sAttrType @= 'A' );\r\n                            ElementAttrPutS( sAttrValLoc, pTgtDim, pTgtHier, vEle, sAttrName, sLang, 1 );\r\n                        ElseIf( sAttrType @= 'N' );\r\n                            ElementAttrPutN( nAttrValLoc, pTgtDim, pTgtHier, vEle, sAttrName, sLang );\r\n                        Else;\r\n                            ElementAttrPutS( sAttrValLoc, pTgtDim, pTgtHier, vEle, sAttrName, sLang );\r\n                        EndIf;\r\n                    EndIf;\r\n                EndIf;\r\n                nLang   = nLang + 1;\r\n            End;\r\n        EndIf;\r\n        nAttr = nAttr + 1;\r\n    End;\r\n\r\nEndIf;\r\n\r\n### End Data ###",
    "DataSource": {
        "Type": "?",
        "asciiDecimalSeparator": ".",
        "asciiDelimiterChar": ",",
        "asciiHeaderRecords": 0,
        "asciiQuoteCharacter": "\"",
        "asciiThousandSeparator": ",",
        "dataSourceNameForClient": "}Cubes",
        "dataSourceNameForServer": "}Cubes"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n\r\nIf(pTgtDim @=pTgtHier);\r\n    sTargetDimHier = pTgtDim;\r\nElse;\r\n    sTargetDimHier =pTgtDim|':'|pTgtHier;\r\nEndIf;\r\n\r\n### Set the target Sort Order ###\r\n  CELLPUTS( sSortElementsType, '}DimensionProperties', sTargetDimHier, 'SORTELEMENTSTYPE');\r\n  CELLPUTS( sSortElementsSense, '}DimensionProperties', sTargetDimHier, 'SORTELEMENTSSENSE');\r\n  CELLPUTS( sSortComponentsType, '}DimensionProperties',sTargetDimHier, 'SORTCOMPONENTSTYPE');\r\n  CELLPUTS( sSortComponentsSense, '}DimensionProperties', sTargetDimHier, 'SORTCOMPONENTSSENSE');\r\n\r\n### If a new dimension has been created, call the process recursively to clone the alternate hierarchy, after the same named hierarchy has been processed\r\nIf( nProcessSameNamedHier = 1 );\r\n  nRet = EXECUTEPROCESS('}bedrock.hier.clone',\r\n    'pLogOutput', pLogOutput,\r\n    'pStrictErrorHandling', pStrictErrorHandling,\r\n    'pSrcDim', pSrcDim,\r\n    'pSrcHier',pSrcHier,\r\n    'pTgtDim', pTgtDim,\r\n    'pTgtHier', sEpilogTgtHier,\r\n    'pAttr', pAttr,\r\n    'pUnwind', pUnwind\r\n    );\r\nEndIf;\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully cloned the %pSrcDim%:%pSrcHier% dimension:hierarchy to %pTgtDim%:%pTgtHier%' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0.0~~##\r\n#################################################################################################\r\n\r\n\r\n### Check for errors in prolog ###\r\n\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Add Elements to target dimension ###\r\n\r\nsElType = ElementType(pSrcDim, pSrcHier, vEle);\r\n\r\nIF( sElType @= 'C' & ElementComponentCount( pSrcDim, pSrcHier, vEle  ) > 0 );\r\n    nChildren = ElementComponentCount( pSrcDim, pSrcHier, vEle );\r\n    nCount = 1;\r\n    While( nCount <= nChildren );\r\n        sChildElement = ElementComponent( pSrcDim, pSrcHier, vEle, nCount );\r\n        sChildWeight = ElementWeight( pSrcDim,pSrcHier, vEle, sChildElement );\r\n        HierarchyElementComponentAdd(pTgtDim, pTgtHier, vEle, sChildElement, sChildWeight);\r\n        nCount = nCount + 1;\r\n    End;\r\nEndIf;\r\n\r\n### End MetaData ###",
    "Name": "}bedrock.hier.clone",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pSrcDim",
            "Prompt": "REQUIRED: Source Dimension",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pSrcHier",
            "Prompt": "REQUIRED: Source Hierarchy",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pTgtDim",
            "Prompt": "REQUIRED: Target Dimension (can be the same as source)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pTgtHier",
            "Prompt": "OPTIONAL: Target Hierarchy (will default to SrcHier_Clone if the dimensions are the same)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pAttr",
            "Prompt": "OPTIONAL: Include Attributes? (Boolean 1=True)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pUnwind",
            "Prompt": "REQUIRED:  Unwind? (0 = Delete all Elements 1 = Unwind Existing Elements 2 = Do not change Existing Elements (Only relevant if target hierarchy exists) )",
            "Type": "Numeric",
            "Value": "0"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.hier.clone', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pSrcDim', '', 'pSrcHier', '',\r\n    \t'pTgtDim', '', 'pTgtHier', '',\r\n    \t'pAttr', 0, 'pUnwind', 0\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process will clone the source dimension Hierarchy.\r\n\r\n# Use case: Mostly in Development.\r\n# 1/ Create a duplicate of an existing hierarchy for testing.\r\n\r\n# Note:\r\n# Valid source dimension name (pSrcDim) and target dimension (pTgtDim) names are mandatory otherwise the process will abort.\r\n# Valid source hierarchy name (pSrcHier) is mandatory otherwise the process will abort.\r\n\r\n# Caution:\r\n# - Target hierarchy cannot be `Leaves`.\r\n# - If the target dimension Hierarchy exists then it will be overwritten.\r\n#EndRegion @DOC\r\n\r\n### Global Varaibales ###\r\nStringGlobalVariable ('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode = 0;\r\n\r\n### Constants ###\r\ncThisProcName     = GetProcessName();\r\ncUserName         = TM1User();\r\ncTimeStamp        = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt        = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSub          = cThisProcName |'_'| cTimeStamp |'_'| cRandomInt;\r\ncMsgErrorLevel    = 'ERROR';\r\ncMsgErrorContent  = '%cThisProcName% : %sMessage% : %cUserName%';\r\ncLogInfo          = 'Process:%cThisProcName% run with parameters pSrcDim:%pSrcDim%, pSrcHier:%pSrcHier%, pTgtDim:%pTgtDim%, pTgtHier:%pTgtHier%, pAttr:%pAttr%, pUnwind:%pUnwind%.';\r\ncLangDim          = '}Cultures';\r\nnNumLang          = DimSiz( cLangDim );\r\n\r\nnProcessSameNamedHier = 0;\r\nsEpilogTgtHier = '';\r\n\r\n## LogOutput parameters\r\nIF ( pLogoutput = 1 );\r\n  LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\nIf( Scan( ':', pSrcDim ) > 0 & pSrcHier @= '' );\r\n    # A hierarchy has been passed as dimension. Handle the input error by splitting dim:hier into dimension & hierarchy\r\n    pSrcHier       = SubSt( pSrcDim, Scan( ':', pSrcDim ) + 1, Long( pSrcDim ) );\r\n    pSrcDim        = SubSt( pSrcDim, 1, Scan( ':', pSrcDim ) - 1 );\r\nEndIf;\r\n\r\n## Validate Source dimension\r\nIF( Trim( pSrcDim ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No source dimension specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIF( DimensionExists( pSrcDim ) = 0 );\r\n    nErrors = 1;\r\n    sMessage = 'Invalid source dimension: ' | pSrcDim;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate Source hierarchy\r\nIF( Trim( pSrcHier ) @= '' );\r\n    pSrcHier = pSrcDim;\r\nElseIF(HierarchyExists(pSrcDim,pSrcHier ) = 0 );\r\n    nErrors = 1;\r\n    sMessage = 'Invalid source hierarchy: ' | pSrcHier;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Validate Target dimension\r\nIF( Trim( pTgtDim ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No target dimension specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIf( Scan( ':', pTgtDim ) > 0 & pTgtHier @= '' );\r\n    # A hierarchy has been passed as dimension. Handle the input error by splitting dim:hier into dimension & hierarchy\r\n    pTgtHier       = SubSt( pTgtDim, Scan( ':', pTgtDim ) + 1, Long( pTgtDim ) );\r\n    pTgtDim        = SubSt( pTgtDim, 1, Scan( ':', pTgtDim ) - 1 );\r\nEndIf;\r\n\r\nIf ( DimensionExists( pTgtDim ) = 0 );\r\n  DimensionCreate( pTgtDim );\r\n  ### In this case clone source hierarchy into same-named hierarchy of the new target dimension first. This will allow attributes to be processed in the data tab.\r\n  nProcessSameNamedHier = 1;\r\nEndIf;\r\n\r\n# Validate target hierarchy\r\nIf( pSrcDim @= pTgtDim);\r\n    If( pTgtHier @= '' % pTgtHier @= pSrcHier );\r\n        pTgtHier = pSrcHier | '_Clone';\r\n    EndIf;\r\nElseIf(pTgtHier @= '');\r\n    If( nProcessSameNamedHier = 1 );\r\n      sEpilogTgtHier = pTgtHier;\r\n      pTgtHier = pTgtDim;\r\n    Else;\r\n      pTgtHier = pSrcHier;\r\n    EndIf;\r\nElseIf( nProcessSameNamedHier = 1 );\r\n    sEpilogTgtHier = pTgtHier;\r\n    pTgtHier = pTgtDim;\r\nEndif;\r\n\r\npTgtHier = Trim(pTgtHier);\r\n\r\nIF(pTgtHier @= 'Leaves' );\r\n  nErrors = 1;\r\n  sMessage = 'Leaves is an invalid selection for Target Hierarchy: ' | pTgtDim |':'|pTgtHier;\r\n  LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIf( DimensionExists( pTgtDim ) = 0 );\r\n    If( pUnwind >= 1 );\r\n        pUnwind = 2;\r\n    EndIf;\r\nElseIf( HierarchyExists( pTgtDim, pTgtHier ) = 0 );\r\n    If( pUnwind >= 1 );\r\n        pUnwind = 2;\r\n    EndIf;\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Create target dimension Hierarchy ###\r\nIf( HierarchyExists( pTgtDim, pTgtHier) = 0 );\r\n    HierarchyCreate( pTgtDim, pTgtHier );\r\nElse;\r\n    IF(pUnwind = 1 );\r\n      nRet = ExecuteProcess('}bedrock.hier.unwind',\r\n        'pLogOutput', pLogOutput,\r\n        'pStrictErrorHandling', pStrictErrorHandling,\r\n        'pDim', pTgtDim,\r\n        'pHier', pTgtHier,\r\n        'pConsol', '*',\r\n        'pRecursive', 1\r\n        );\r\n    ELSEIF(pUnwind = 2 );\r\n      #Do nothing\r\n    ELSEIF(pUnwind = 0 );\r\n      HierarchyDeleteAllElements( pTgtDim, pTgtHier );\r\n    EndIf;\r\nEndIf;\r\n\r\nIf(pSrcDim @=pSrcHier);\r\n   sDimHier = pSrcDim;\r\n Else;\r\n   sDimHier =pSrcDim|':'|pSrcHier;\r\n Endif;\r\n\r\n### Set the target Sort Order ###\r\nsSortElementsType     = CELLGETS( '}DimensionProperties', sDimHier, 'SORTELEMENTSTYPE');\r\nsSortElementsSense    = CELLGETS( '}DimensionProperties', sDimHier, 'SORTELEMENTSSENSE');\r\nsSortComponentsType   = CELLGETS( '}DimensionProperties', sDimHier, 'SORTCOMPONENTSTYPE');\r\nsSortComponentsSense  = CELLGETS( '}DimensionProperties', sDimHier, 'SORTCOMPONENTSSENSE');\r\n\r\nHierarchySortOrder(pTgtDim, pTgtHier, sSortComponentsType, sSortComponentsSense, sSortElementsType , sSortElementsSense);\r\n\r\nnSourceHierSize = DimSiz(pSrcDim|':'|pSrcHier);\r\n\r\nnIndex = 1;\r\nWHILE( nIndex <= nSourceHierSize );\r\n  sElName = ElementName(pSrcDim, pSrcHier, nIndex);\r\n  sElType = ElementType(pSrcDim, pSrcHier, sElName);\r\n  HierarchyElementInsert(pTgtDim, pTgtHier, '', sElName, sElType);\r\n  nIndex = nIndex + 1;\r\nEND;\r\n\r\n### Assign Data Source ###\r\n\r\nDatasourceNameForServer     = pSrcDim|':'|pSrcHier;\r\nDataSourceType              = 'SUBSET';\r\nDatasourceDimensionSubset   = 'ALL';\r\n\r\n### Replicate Attributes ###\r\n\r\n# Note: DType on Attr dim returns \"AS\", \"AN\" or \"AA\" need to strip off leading \"A\"\r\n\r\nsAttrDim        = '}ElementAttributes_' | pSrcDim;\r\nsAttrLoc        = '}LocalizedElementAttributes_' | pSrcDim;\r\nsAttrTragetDim  = '}ElementAttributes_' | pTgtDim;\r\nsAttrLocTarget  = '}LocalizedElementAttributes_' | pTgtDim;\r\n\r\nIf( pAttr = 1 & DimensionExists( sAttrDim ) = 1 );\r\n  nNumAttrs = DimSiz( sAttrDim );\r\n  nCount = 1;\r\n  While( nCount <= nNumAttrs );\r\n    sAttrName = DimNm( sAttrDim, nCount );\r\n    sAttrType = SubSt(DType( sAttrDim, sAttrName ), 2, 1 );\r\n      If ( DimensionExists( sAttrTragetDim ) = 0);\r\n         AttrInsert(pTgtDim,'',sAttrName,sAttrType );\r\n       ElseIF(DimIx(sAttrTragetDim, sAttrName) = 0);\r\n         AttrInsert(pTgtDim,'',sAttrName,sAttrType );\r\n      Endif;\r\n    nCount = nCount + 1;\r\n  End;\r\nEndIf;\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [
        {
            "EndByte": 0,
            "Name": "vEle",
            "Position": 1,
            "StartByte": 0,
            "Type": "String"
        }
    ],
    "VariablesUIData": []
}