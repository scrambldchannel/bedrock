{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully created cell security for %pCube% and %pDim%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.security.cube.cellsecurity.create",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pCube",
            "Prompt": "REQUIRED: Cube to create cell security for",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pDim",
            "Prompt": "REQUIRED: Map of dimensions to include in cell security as a array of 1:0 colon delimited e.g. \"\"1:0:0:1:0",
            "Type": "String",
            "Value": ""
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.security.cube.cellsecurity.create', 'pLogOutput', pLogOutput,\r\n      'pStrictErrorHandling', pStrictErrorHandling,\r\n\t    'pCube', '', 'pDim', ''\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process will create a cell security cube for the specified cube for the specified list of dimensions\r\n# using the TI function _CellSecurityCubeCreate_. The benefit of this process is not needing to write a custom\r\n# process each time in order to create a cell security cube.\r\n\r\n# Use case: Intended for development.\r\n# 1/ Set up cell security cubes\r\n\r\n# Note:\r\n# * Naturally, a valid cube (pCube) is mandatory otherwise the process will abort.\r\n# * If cell security has already been set up the TI will abort.\r\n# * The pDim parameter must map _ALL_ the dimensions in order in the cube with a 0 or 1.\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName       = GetProcessName();\r\ncTimeStamp          = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt          = NumberToString( INT( RAND( ) * 1000 ));\r\ncUserName           = TM1User();\r\ncMsgErrorLevel      = 'ERROR';\r\ncMsgErrorContent    = 'User:%cUserName% Process:%cThisProcName% Message:%sMessage%';\r\ncLogInfo            = 'Process:%cThisProcName% run with parameters pCube:%pCube%, pDim:%pDim%.' ;\r\ncDelim              = ':';\r\n\r\n## LogOutput parameters\r\nIF( pLogOutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\n# If no cube has been specified then terminate process\r\nIf( Trim( pCube ) @= '' );\r\n    nErrors = 1;\r\n    sMessage = 'No cube specified.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIf( CubeExists( pCube ) = 0 );\r\n    nErrors = 1;\r\n    sMessage = Expand('Cube %pCube% does not exist.');\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# Check if cell security cube already exists\r\nIf( CubeExists(  '}CellSecurity_' | pCube ) = 1 );\r\n    nErrors = 1;\r\n    sMessage = 'Cell Security cube already exists.';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Count dimensions in cube\r\nnDims               = CubeDimensionCountGet( pCube );\r\n\r\n### If pDim is wildcard, then = ALL (no restrictions on dimensions)\r\npDim = Trim( pDim );\r\nIf( pDim @= '*' );\r\n   pDim = Fill( '1:', 2 * nDims - 1 );\r\nEndIf;\r\n### Count dimensions mapped in pDim ###\r\nsDimensions         = pDim;\r\nnDelimiterIndex     = 1;\r\nnMapDims            = 0;\r\niDim                = 1;\r\nWhile( nDelimiterIndex <> 0 );\r\n    nMapDims        = iDim;\r\n    nDelimiterIndex = Scan( cDelim, sDimensions );\r\n    If( nDelimiterIndex = 0 );\r\n        sDimension  = sDimensions;\r\n    Else;\r\n        sDimension  = Trim( SubSt( sDimensions, 1, nDelimiterIndex - 1 ) );\r\n        sDimensions = Trim( Subst( sDimensions, nDelimiterIndex + Long(cDelim), Long( sDimensions ) ) );\r\n    EndIf;\r\n    # Redundant?\r\n    If( sDimension @= '1' );\r\n        sMessage    = ' INCLUDE in cell security cube';\r\n    ElseIf( sDimension @= '0' );\r\n        sMessage    = ' EXCLUDE from cell security cube';\r\n    Else;\r\n        sMessage    = ' INVALID map parameter: ' | sDimension;\r\n    EndIF;\r\n    iDim            = iDim + 1;\r\nEnd;\r\n\r\n### Check dimension count of dimension map vs. dimensions in cube ###\r\nIf( nDims <> nMapDims );\r\n    nErrors         = 1;\r\n    sMessage        = 'Parameter count of dimension map does not match dimension count of cube!';\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElse;\r\n    nRet            = CellSecurityCubeCreate ( pCube, pDim );\r\n    If( nRet = 1 );\r\n        sMessage    = '}CellSecurity_' | pCube | ' successfully created';\r\n        LogOutput( 'INFO', Expand( cMsgErrorContent ) );\r\n    Else;\r\n        sMessage    = 'Error. Could not create }CellSecurity_' | pCube;\r\n        LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Prolog ###",
    "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f",
    "Variables": [],
    "VariablesUIData": []
}