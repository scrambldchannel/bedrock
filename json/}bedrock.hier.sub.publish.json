{
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "DataSource": {
        "Type": "None"
    },
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0~~##\r\n#################################################################################################\r\n\r\n### Return code & final error message handling\r\nIf( nErrors > 0 );\r\n    sMessage = 'the process incurred at least 1 error. Please see above lines in this file for more details.';\r\n    nProcessReturnCode = 0;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% Process:%cThisProcName% completed with errors. Check tm1server.log for details.' );\r\n    If( pStrictErrorHandling = 1 );\r\n        ProcessQuit;\r\n    EndIf;\r\nElse;\r\n    sProcessAction = Expand( 'Process:%cThisProcName% successfully published subset %pSub% in hierarchy %pDim%:%pHier% created by cient %pClient%.' );\r\n    sProcessReturnCode = Expand( '%sProcessReturnCode% %sProcessAction%' );\r\n    nProcessReturnCode = 1;\r\n    If( pLogoutput = 1 );\r\n        LogOutput('INFO', Expand( sProcessAction ) );\r\n    EndIf;\r\nEndIf;\r\n\r\n### End Epilog ###",
    "HasSecurityAccess": true,
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n",
    "Name": "}bedrock.hier.sub.publish",
    "Parameters": [
        {
            "Name": "pLogOutput",
            "Prompt": "OPTIONAL: Write parameters and action summary to server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pStrictErrorHandling",
            "Prompt": "OPTIONAL: On encountering any error exit with major error status by ProcessQuit after writing to the server message log (Boolean True = 1)",
            "Type": "Numeric",
            "Value": "0"
        },
        {
            "Name": "pDim",
            "Prompt": "REQUIRED: dimension name (if a dim:hier tuple is supplied then the hierarchy parameter will be ignored)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pHier",
            "Prompt": "OPTIONAL: hierarchy name (if blank assume same named hierarchy. delimited dim:hier can also be passed in the dimension parameter)",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pSub",
            "Prompt": "REQUIRED: private subset name",
            "Type": "String",
            "Value": ""
        },
        {
            "Name": "pOverwrite",
            "Prompt": "OPTIONAL: Overwrite Existing public subset with same name? (Boolean 1=Yes)",
            "Type": "Numeric",
            "Value": "0"
        }
    ],
    "PrologProcedure": "#Region CallThisProcess\r\n# A snippet of code provided as an example how to call this process should the developer be working on a system without access to an editor with auto-complete.\r\nIf( 1 = 0 );\r\n    ExecuteProcess( '}bedrock.hier.sub.publish', 'pLogOutput', pLogOutput, 'pStrictErrorHandling', pStrictErrorHandling,\r\n    \t'pDim', '', 'pHier', '', 'pSub', '',\r\n    \t'pOverwrite', 0\r\n\t);\r\nEndIf;\r\n#EndRegion CallThisProcess\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#################################################################################################\r\n##~~Join the bedrock TM1 community on GitHub https://github.com/cubewise-code/bedrock Ver 4.0.0~~##\r\n#################################################################################################\r\n\r\n#Region @DOC\r\n# Description:\r\n# This process converts a private subset to a public subset for the named client.\r\n#\r\n# Use case: Intended for development/prototyping or production.\r\n# 1. Make private subset public to enable public consumption.\r\n#\r\n# Note:\r\n# * A valid dimension name pDim is mandatory otherwise the process will abort.\r\n# * Also, a valid subset name pSub _belonging to the user running the process_ is mandatory otherwise the process will abort.\r\n# * This process must be run by the user owning the private subset; it canot be run by another user.\r\n#EndRegion @DOC\r\n\r\n##Global Variables\r\nStringGlobalVariable('sProcessReturnCode');\r\nNumericGlobalVariable('nProcessReturnCode');\r\nnProcessReturnCode= 0;\r\n\r\n### Constants ###\r\ncThisProcName       = GetProcessName();\r\ncUserName           = TM1User();\r\ncTimeStamp          = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncRandomInt          = NumberToString( INT( RAND( ) * 1000 ));\r\ncTempSubset         = cThisProcName | '_' | cTimeStamp | '_' | cRandomInt;\r\ncTempFile           = GetProcessErrorFileDirectory | cTempSubset | '.csv';\r\nsMessage            = \t'';\r\ncMsgErrorLevel      = 'ERROR';\r\ncMsgErrorContent    = 'User:%cUserName% Process:%cThisProcName% ErrorMsg:%sMessage%';\r\ncLogInfo            = 'Process:%cThisProcName% run with parameters pDim:%pDim%, pHier:%pHier%, pSub:%pSub%, pSubPublish:%pSubPublish%, pOverwrite:%pOverwrite%.' ;\r\n\r\n## LogOutput parameters\r\nIF( pLogoutput = 1 );\r\n    LogOutput('INFO', Expand( cLogInfo ) );\r\nENDIF;\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\n# create friendly name for user handle\r\nIf( DimIx( '}ElementAttributes_}Clients', '}TM1_DefaultDisplayValue' ) > 0 );\r\n    pClient = AttrS( '}Clients', cUserName, '}TM1_DefaultDisplayValue' );\r\n    If( pClient @= '' );\r\n        pClient = cUserName;\r\n    EndIf;\r\nElse;\r\n    pClient = cUserName;\r\nEndIf;\r\n\r\n# Validate Dimension & Hierarchy\r\nIf( Scan(':', pDim ) > 0 );\r\n    pHier       = SubSt( pDim, Scan(':', pDim )+1, Long(pDim) - Scan(':', pDim ) );\r\n    pDim        = SubSt( pDim, 1, Scan(':', pDim )-1 );\r\nEndIf;\r\nIf( pHier @= '' );\r\n    pHier = pDim;\r\nEndIf;\r\nIf( Trim( pDim ) @= '' );\r\n    sMessage    = 'No dimension specified';\r\n    nErrors     = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIf( DimensionExists( pDim ) = 0 );\r\n    sMessage = Expand('Dimension %pDim% does not exist on server');\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nElseIf( HierarchyExists( pDim, pHier ) = 0 );\r\n    sMessage = Expand('Hierarchy %pHier% does not exist in dimension %pDim%');\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\nIf( pHier @= pDim );\r\n    sDimHier = pDim;\r\nElse;\r\n    sDimHier = Expand('%pDim%:%pHier%');\r\nEndIf;\r\n\r\n# Validate Subset\r\nIf( Trim( pSub ) @= '' );\r\n    sMessage = 'No private subset specified';\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n# No way to check if private subset exists with TurboIntegrator except via file system.\r\n# Could include data directory param and concatenate with user, cube and view to check\r\n# if private subset exists to handle error in the case that private sub does not exist\r\n\r\n# Check for valid overwrite parameters\r\nIf( pOverwrite <> 0 & pOverwrite <> 1 );\r\n    sMessage = 'Invalid overwrite existing public subset selection: ' | NumberToString( pOverwrite );\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\nIf( pOverwrite = 0 & HierarchySubsetExists( pDim, pHier, pSub ) = 1 );\r\n    # If NOT overwriting current public subset AND subset of the same name already exists then cause minor error ( major error if not handled )\r\n    sMessage = 'Public subset of same name already exists and Overwrite=0 specified';\r\n    nErrors = nErrors + 1;\r\n    LogOutput( cMsgErrorLevel, Expand( cMsgErrorContent ) );\r\nEndIf;\r\n\r\n### Check for errors before continuing\r\nIf( nErrors <> 0 );\r\n  If( pStrictErrorHandling = 1 );\r\n      ProcessQuit;\r\n  Else;\r\n      ProcessBreak;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Publish the subset ###\r\n# PublishSubset publishes a named private subset on the server. This function was introduced in Planning Analytics 2.0.9.10/TM1 Server 11.8.9 and cannot be used in previous versions.\r\nPublishSubset( sDimHier, pSub, pOverwrite );\r\n\r\n### End Prolog ###",
    "Variables": []
}